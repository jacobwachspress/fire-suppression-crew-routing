[ Info: Initializing data structures
┌ Info: Checkpoint after initializing data structures
└   time() - start_time = 0.2070000171661377
┌ Warning: Node with no parent
│   i = 1
└ @ Main C:\Users\jacob\Coding\MIT\ihc_routing\BranchAndPrice.jl:127
┌ Info: Exploring node
└   branch_and_bound_node.ix = 1
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules = FireDemandBranchingRule[]
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.008678
┌ Info: Price and cut time (b-and-b)
└   t = 0.4652206
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 1
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  1  0  2  6  8  8  8  6  3  0  0  0
│      0  9  9  8  4  0  0  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: Price and cut time (heuristic)
└   t = 0.1697634
┌ Info: found sol
│   t = 0.0196805
│   obj = 1.2122545684315973
└   obj_bound = 1.2122545684315973
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2   2  1  3  7  9  9  9  7  4  1  1  1
│      1  10  10  9  5  1  1  1  1  1  1  1  1  1
└     11   1   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: Price and cut time (heuristic)
└   t = 0.1692562
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0711045
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149568
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   3   2  4  8  10  10  10  8  5  2  2  2
│      2  11  11  10  6  2   2   2   2  2  2  2  2  2
└     12   2   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: Price and cut time (heuristic)
└   t = 0.1377787
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1735983
│   obj = 1.1754333641149566
└   obj_bound = 1.1754333641149566
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   4   4   3  5  9  11  11  11  9  6  3  3  3
│      3  12  12  11  7  3   3   3   3  3  3  3  3  3
└     13   3   3   3  3  3   3   3   3  3  3  3  3  3
┌ Info: Price and cut time (heuristic)
└   t = 0.1054544
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2887068
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149566
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1754333641149568
┌ Info: current bounds
│   node_ix = 1
│   lb = 1.1388005347712324
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 1
└   length(nodes) = 3
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 541
└   sum(fire_plans.plans_per_fire) = 267
┌ Info: Time check
└   time() - start_time = 1.9860000610351562
┌ Info: Exploring node
└   branch_and_bound_node.ix = 2
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0146418
┌ Info: Price and cut time (b-and-b)
└   t = 0.2741946
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 2
│   lb = 1.1388005347712324
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 2
└   length(nodes) = 5
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 574
└   sum(fire_plans.plans_per_fire) = 309
┌ Info: Time check
└   time() - start_time = 2.2710001468658447
┌ Info: Exploring node
└   branch_and_bound_node.ix = 3
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125205
┌ Info: Price and cut time (b-and-b)
└   t = 0.1179955
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 3
│   lb = 1.1394932911329647
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 3
└   length(nodes) = 7
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 617
└   sum(fire_plans.plans_per_fire) = 327
┌ Info: Time check
└   time() - start_time = 2.4140000343322754
┌ Info: Exploring node
└   branch_and_bound_node.ix = 4
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0179782
┌ Info: Price and cut time (b-and-b)
└   t = 0.2022084
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 4
│   lb = 1.1394932911329647
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 4
└   length(nodes) = 9
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 659
└   sum(fire_plans.plans_per_fire) = 354
┌ Info: Time check
└   time() - start_time = 2.629000186920166
┌ Info: Exploring node
└   branch_and_bound_node.ix = 5
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0099351
┌ Info: Price and cut time (b-and-b)
└   t = 0.208797
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 5
│   lb = 1.1400216063449233
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 5
└   length(nodes) = 11
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 723
└   sum(fire_plans.plans_per_fire) = 383
┌ Info: Time check
└   time() - start_time = 2.8570001125335693
┌ Info: Exploring node
└   branch_and_bound_node.ix = 8
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125868
┌ Info: Price and cut time (b-and-b)
└   t = 0.0703187
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 8
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  1  3  7  8  8  8  6  3  0  0  0
│      0  9  9  9  4  0  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1445524
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0874082
│   obj = 1.1754333641149568
└   obj_bound = 1.1754324315382796
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2   2  4  8  9  9  9  7  4  1  1  1
│      1  10  10  10  5  1  1  1  1  1  1  1  1  1
└     11   2   1   1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.135103
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1049986
│   obj = 1.1754333641149568
└   obj_bound = 1.1753161283341236
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   3  5  9  10  10  10  8  5  2  2  2
│      2  11  11  11  6  2   2   2   2  2  2  2  2  2
└     12   3   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1529078
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0936604
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149568
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1754333641149568
┌ Info: current bounds
│   node_ix = 8
│   lb = 1.1400216063449233
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 6
└   length(nodes) = 13
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 871
└   sum(fire_plans.plans_per_fire) = 481
┌ Info: Time check
└   time() - start_time = 3.7910001277923584
┌ Info: Exploring node
└   branch_and_bound_node.ix = 9
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0108696
┌ Info: Price and cut time (b-and-b)
└   t = 0.2110606
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 9
│   lb = 1.1412974329150785
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 7
└   length(nodes) = 15
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 910
└   sum(fire_plans.plans_per_fire) = 515
┌ Info: Time check
└   time() - start_time = 4.009999990463257
┌ Info: Exploring node
└   branch_and_bound_node.ix = 12
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.013915
┌ Info: Price and cut time (b-and-b)
└   t = 0.0767782
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 12
│   lb = 1.1412974329150785
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 8
└   length(nodes) = 17
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 931
└   sum(fire_plans.plans_per_fire) = 524
┌ Info: Time check
└   time() - start_time = 4.114000082015991
┌ Info: Exploring node
└   branch_and_bound_node.ix = 13
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.017465
┌ Info: Price and cut time (b-and-b)
└   t = 0.1912946
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 13
│   lb = 1.1425566883442655
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 9
└   length(nodes) = 19
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 963
└   sum(fire_plans.plans_per_fire) = 549
┌ Info: Time check
└   time() - start_time = 4.318000078201294
┌ Info: Exploring node
└   branch_and_bound_node.ix = 16
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0124781
┌ Info: Price and cut time (b-and-b)
└   t = 0.0686764
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 16
│   lb = 1.1425566883442655
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 10
└   length(nodes) = 21
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 973
└   sum(fire_plans.plans_per_fire) = 558
┌ Info: Time check
└   time() - start_time = 4.414000034332275
┌ Info: Exploring node
└   branch_and_bound_node.ix = 17
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102817
┌ Info: Price and cut time (b-and-b)
└   t = 0.2807343
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 17
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  2  1  7  8  8  8  6  3  0  0  0
│      0  9  9  7  6  0  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2064409
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0259328
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  3  2  8  9  9  9  7  4  1  1  1
│      1  10  10  8  7  1  1  1  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1667133
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0629588
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  4  3  9  10  10  10  8  5  2  2  2
│      2  11  11  9  8  2   2   2   2  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1462005
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1670682
│   obj = 1.1542001485149342
└   obj_bound = 1.1542001485149342
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1542001485149342
┌ Info: current bounds
│   node_ix = 17
│   lb = 1.142589553658512
└   ub = 1.1542001485149342
┌ Info: number of nodes
│   node_explored_count = 11
└   length(nodes) = 23
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1154
└   sum(fire_plans.plans_per_fire) = 689
┌ Info: Time check
└   time() - start_time = 5.617000102996826
┌ Info: Exploring node
└   branch_and_bound_node.ix = 18
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0158177
┌ Info: Price and cut time (b-and-b)
└   t = 0.1003123
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 18
│   lb = 1.142589553658512
└   ub = 1.1542001485149342
┌ Info: number of nodes
│   node_explored_count = 12
└   length(nodes) = 25
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1182
└   sum(fire_plans.plans_per_fire) = 701
┌ Info: Time check
└   time() - start_time = 5.736999988555908
┌ Info: Exploring node
└   branch_and_bound_node.ix = 19
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0103486
┌ Info: Price and cut time (b-and-b)
└   t = 0.1540055
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 19
│   lb = 1.1428186717848638
└   ub = 1.1542001485149342
┌ Info: number of nodes
│   node_explored_count = 13
└   length(nodes) = 27
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1224
└   sum(fire_plans.plans_per_fire) = 720
┌ Info: Time check
└   time() - start_time = 5.903000116348267
┌ Info: Exploring node
└   branch_and_bound_node.ix = 26
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.012639
┌ Info: Price and cut time (b-and-b)
└   t = 0.0420384
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 26
│   lb = 1.1428186717848638
└   ub = 1.1542001485149342
┌ Info: number of nodes
│   node_explored_count = 14
└   length(nodes) = 29
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1234
└   sum(fire_plans.plans_per_fire) = 726
┌ Info: Time check
└   time() - start_time = 5.958000183105469
┌ Info: Exploring node
└   branch_and_bound_node.ix = 27
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111662
┌ Info: Price and cut time (b-and-b)
└   t = 0.1882085
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 27
│   lb = 1.1430907935480137
└   ub = 1.1542001485149342
┌ Info: number of nodes
│   node_explored_count = 15
└   length(nodes) = 31
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1270
└   sum(fire_plans.plans_per_fire) = 750
┌ Info: Time check
└   time() - start_time = 6.166000127792358
┌ Info: Exploring node
└   branch_and_bound_node.ix = 6
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0138711
┌ Info: Price and cut time (b-and-b)
└   t = 0.1583271
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 6
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  1  1  2  5  9  8  9  7  3  0  0  0
│      0  9  9  7  5  2  0  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0873834
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0185258
│   obj = 1.154200148514934
└   obj_bound = 1.1541006847372828
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2   2  2  3  6  10  9  10  8  4  1  1  1
│      1  10  10  8  6  3   1  1   1  1  1  1  1  1
└     11   1   1  1  1  1   1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1491794
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0160308
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   3  3  4  7  11  10  11  9  5  2  2  2
│      2  11  11  9  7  4   2   2   2  2  2  2  2  2
└     12   2   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1180616
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0391863
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 6
│   lb = 1.1430907935480137
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 16
└   length(nodes) = 33
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1396
└   sum(fire_plans.plans_per_fire) = 861
┌ Info: Time check
└   time() - start_time = 6.917999982833862
┌ Info: Exploring node
└   branch_and_bound_node.ix = 7
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.011069
┌ Info: Price and cut time (b-and-b)
└   t = 0.278229
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 7
│   lb = 1.1434420258439608
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 17
└   length(nodes) = 35
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1471
└   sum(fire_plans.plans_per_fire) = 904
┌ Info: Time check
└   time() - start_time = 7.213000059127808
┌ Info: Exploring node
└   branch_and_bound_node.ix = 20
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0101583
┌ Info: Price and cut time (b-and-b)
└   t = 0.165602
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 20
│   lb = 1.1434420258439608
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 18
└   length(nodes) = 37
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1499
└   sum(fire_plans.plans_per_fire) = 922
┌ Info: Time check
└   time() - start_time = 7.384000062942505
┌ Info: Exploring node
└   branch_and_bound_node.ix = 21
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010422
┌ Info: Price and cut time (b-and-b)
└   t = 0.2716287
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 21
│   lb = 1.1435589719334982
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 19
└   length(nodes) = 39
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1556
└   sum(fire_plans.plans_per_fire) = 954
┌ Info: Time check
└   time() - start_time = 7.67300009727478
┌ Info: Exploring node
└   branch_and_bound_node.ix = 24
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0161718
┌ Info: Price and cut time (b-and-b)
└   t = 0.2311305
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 24
│   lb = 1.1435589719334982
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 20
└   length(nodes) = 41
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1596
└   sum(fire_plans.plans_per_fire) = 980
┌ Info: Time check
└   time() - start_time = 7.926000118255615
┌ Info: Exploring node
└   branch_and_bound_node.ix = 25
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0138847
┌ Info: Price and cut time (b-and-b)
└   t = 0.057401
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 25
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  1  6  4  8  8  8  6  3  0  0  0
│      0  9  9  9  1  4  1  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1292503
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0234042
│   obj = 1.154200148514934
└   obj_bound = 1.1540882148032727
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2   2  7  5  9  9  9  7  4  1  1  1
│      1  10  10  10  2  5  2  1  1  1  1  1  1  1
└     11   2   1   1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1513653
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0479885
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   3  8  6  10  10  10  8  5  2  2  2
│      2  11  11  11  3  6   3   2   2  2  2  2  2  2
└     12   3   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.096891
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0444596
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 25
│   lb = 1.1440083301212471
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 21
└   length(nodes) = 43
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1705
└   sum(fire_plans.plans_per_fire) = 1061
┌ Info: Time check
└   time() - start_time = 8.630000114440918
┌ Info: Exploring node
└   branch_and_bound_node.ix = 42
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111678
┌ Info: Price and cut time (b-and-b)
└   t = 0.1749246
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 42
│   lb = 1.1440083301212471
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 22
└   length(nodes) = 45
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1742
└   sum(fire_plans.plans_per_fire) = 1081
┌ Info: Time check
└   time() - start_time = 8.814000129699707
┌ Info: Exploring node
└   branch_and_bound_node.ix = 43
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.01612
┌ Info: Price and cut time (b-and-b)
└   t = 0.1648739
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 43
│   lb = 1.1443277432577141
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 23
└   length(nodes) = 47
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1767
└   sum(fire_plans.plans_per_fire) = 1100
┌ Info: Time check
└   time() - start_time = 9.008000135421753
┌ Info: Exploring node
└   branch_and_bound_node.ix = 14
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0118174
┌ Info: Price and cut time (b-and-b)
└   t = 0.1859071
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 14
│   lb = 1.1443277432577141
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 24
└   length(nodes) = 49
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1794
└   sum(fire_plans.plans_per_fire) = 1127
┌ Info: Time check
└   time() - start_time = 9.20900011062622
┌ Info: Exploring node
└   branch_and_bound_node.ix = 15
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0108127
┌ Info: Price and cut time (b-and-b)
└   t = 0.1588217
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 15
│   lb = 1.1445150816742706
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 25
└   length(nodes) = 51
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1864
└   sum(fire_plans.plans_per_fire) = 1157
┌ Info: Time check
└   time() - start_time = 9.377000093460083
┌ Info: Exploring node
└   branch_and_bound_node.ix = 22
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0128752
┌ Info: Price and cut time (b-and-b)
└   t = 0.16355
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 22
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  3  2  6  8  8  8  6  3  0  0  0
│      0  9  9  7  5  1  1  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1496784
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0254988
│   obj = 1.154200148514934
└   obj_bound = 1.154129148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  4  3  7  9  9  9  7  4  1  1  1
│      1  10  10  8  6  2  2  1  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1864181
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.038976
│   obj = 1.1542001485149345
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  5  4  8  10  10  10  8  5  2  2  2
│      2  11  11  9  7  3   3   2   2  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1365814
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0886323
│   obj = 1.154200148514934
└   obj_bound = 1.1542001485149338
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 22
│   lb = 1.1445150816742706
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 26
└   length(nodes) = 53
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1983
└   sum(fire_plans.plans_per_fire) = 1266
┌ Info: Time check
└   time() - start_time = 10.321000099182129
┌ Info: Exploring node
└   branch_and_bound_node.ix = 23
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110244
┌ Info: Price and cut time (b-and-b)
└   t = 0.1244487
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 23
│   lb = 1.1445699225071522
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 27
└   length(nodes) = 55
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 1997
└   sum(fire_plans.plans_per_fire) = 1282
┌ Info: Time check
└   time() - start_time = 10.462000131607056
┌ Info: Exploring node
└   branch_and_bound_node.ix = 50
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112802
┌ Info: Price and cut time (b-and-b)
└   t = 0.1747299
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 50
│   lb = 1.1445699225071522
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 28
└   length(nodes) = 57
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2019
└   sum(fire_plans.plans_per_fire) = 1307
┌ Info: Time check
└   time() - start_time = 10.648000001907349
┌ Info: Exploring node
└   branch_and_bound_node.ix = 51
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0190973
┌ Info: Price and cut time (b-and-b)
└   t = 0.1283409
┌ Info: current bounds
│   node_ix = 51
│   lb = 1.144644059030343
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 29
└   length(nodes) = 57
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2081
└   sum(fire_plans.plans_per_fire) = 1330
┌ Info: Time check
└   time() - start_time = 10.797000169754028
┌ Info: Exploring node
└   branch_and_bound_node.ix = 44
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0128377
┌ Info: Price and cut time (b-and-b)
└   t = 0.1149205
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 44
│   lb = 1.144644059030343
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 30
└   length(nodes) = 59
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2103
└   sum(fire_plans.plans_per_fire) = 1347
┌ Info: Time check
└   time() - start_time = 10.930999994277954
┌ Info: Exploring node
└   branch_and_bound_node.ix = 45
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111759
┌ Info: Price and cut time (b-and-b)
└   t = 0.2304987
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 45
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  3  1  4  4  8  8  8  6  3  0  0  0
│      0  9  8  8  3  3  1  0  0  0  0  0  0  0
└     10  2  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1515909
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0375055
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1  4  2  5  5  9  9  9  7  4  1  1  1
│      1  10  9  9  4  4  2  1  1  1  1  1  1  1
└     11   3  1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1315471
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0574786
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   5   3  6  6  10  10  10  8  5  2  2  2
│      2  11  10  10  5  5   3   2   2  2  2  2  2  2
└     12   4   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.105871
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0521213
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 45
│   lb = 1.144663188839368
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 31
└   length(nodes) = 61
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2213
└   sum(fire_plans.plans_per_fire) = 1443
┌ Info: Time check
└   time() - start_time = 11.843000173568726
┌ Info: Exploring node
└   branch_and_bound_node.ix = 32
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0109784
┌ Info: Price and cut time (b-and-b)
└   t = 0.1195922
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 32
│   lb = 1.144663188839368
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 32
└   length(nodes) = 63
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2257
└   sum(fire_plans.plans_per_fire) = 1463
┌ Info: Time check
└   time() - start_time = 11.983999967575073
┌ Info: Exploring node
└   branch_and_bound_node.ix = 33
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0100925
┌ Info: Price and cut time (b-and-b)
└   t = 0.1502654
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 33
│   lb = 1.1450370656700721
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 33
└   length(nodes) = 65
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2349
└   sum(fire_plans.plans_per_fire) = 1495
┌ Info: Time check
└   time() - start_time = 12.14900016784668
┌ Info: Exploring node
└   branch_and_bound_node.ix = 10
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0100982
┌ Info: Price and cut time (b-and-b)
└   t = 0.1343358
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 10
│   lb = 1.1450370656700721
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 34
└   length(nodes) = 67
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2387
└   sum(fire_plans.plans_per_fire) = 1514
┌ Info: Time check
└   time() - start_time = 12.282999992370605
┌ Info: Exploring node
└   branch_and_bound_node.ix = 11
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0098971
┌ Info: Price and cut time (b-and-b)
└   t = 0.2026892
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 11
│   lb = 1.145295998249471
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 35
└   length(nodes) = 69
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2417
└   sum(fire_plans.plans_per_fire) = 1542
┌ Info: Time check
└   time() - start_time = 12.501000165939331
┌ Info: Exploring node
└   branch_and_bound_node.ix = 52
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112441
┌ Info: Price and cut time (b-and-b)
└   t = 0.1442413
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 52
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  3  2  6  8  8  8  7  3  0  0  0
│      0  9  9  6  5  2  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1896874
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0285144
│   obj = 1.1542001485149342
└   obj_bound = 1.1541346157765866
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  4  3  7  9  9  9  8  4  1  1  1
│      1  10  10  7  6  3  1  1  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1831064
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0462532
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  5  4  8  10  10  10  9  5  2  2  2
│      2  11  11  8  7  4   2   2   2  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1681762
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1125508
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1542001485149342
┌ Info: current bounds
│   node_ix = 52
│   lb = 1.145295998249471
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 36
└   length(nodes) = 71
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2554
└   sum(fire_plans.plans_per_fire) = 1651
┌ Info: Time check
└   time() - start_time = 13.52999997138977
┌ Info: Exploring node
└   branch_and_bound_node.ix = 53
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010467
┌ Info: Price and cut time (b-and-b)
└   t = 0.2897434
┌ Info: current bounds
│   node_ix = 53
│   lb = 1.1453254820913483
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 37
└   length(nodes) = 71
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2644
└   sum(fire_plans.plans_per_fire) = 1705
┌ Info: Time check
└   time() - start_time = 13.825000047683716
┌ Info: Exploring node
└   branch_and_bound_node.ix = 62
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.013696
┌ Info: Price and cut time (b-and-b)
└   t = 0.0761457
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 62
│   lb = 1.1453254820913483
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 38
└   length(nodes) = 73
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2664
└   sum(fire_plans.plans_per_fire) = 1719
┌ Info: Time check
└   time() - start_time = 13.930000066757202
┌ Info: Exploring node
└   branch_and_bound_node.ix = 63
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110532
┌ Info: Price and cut time (b-and-b)
└   t = 0.2138987
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 63
│   lb = 1.1453887837742387
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 39
└   length(nodes) = 75
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2725
└   sum(fire_plans.plans_per_fire) = 1750
┌ Info: Time check
└   time() - start_time = 14.153000116348267
┌ Info: Exploring node
└   branch_and_bound_node.ix = 34
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0132345
┌ Info: Price and cut time (b-and-b)
└   t = 0.233623
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 34
│   lb = 1.1453887837742387
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 40
└   length(nodes) = 77
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2772
└   sum(fire_plans.plans_per_fire) = 1783
┌ Info: Time check
└   time() - start_time = 14.398000001907349
┌ Info: Exploring node
└   branch_and_bound_node.ix = 35
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010617
┌ Info: Price and cut time (b-and-b)
└   t = 0.0870636
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 35
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  1  1  6  9  9  9  7  3  0  0  0
│      0  9  9  7  5  0  0  0  1  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0690025
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0251093
│   obj = 1.154200148514934
└   obj_bound = 1.1541776705113178
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  2  2  7  10  10  10  8  4  1  1  1
│      1  10  10  8  6  1   1   1   2  1  1  1  1  1
└     11   2   1  1  1  1   1   1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0926298
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0296267
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  3  3  8  11  11  11  9  5  2  2  2
│      2  11  11  9  7  2   2   2   3  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0878179
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.038196
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 35
│   lb = 1.145416331992123
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 41
└   length(nodes) = 77
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2964
└   sum(fire_plans.plans_per_fire) = 1860
┌ Info: Time check
└   time() - start_time = 14.98800015449524
┌ Info: Exploring node
└   branch_and_bound_node.ix = 36
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107801
┌ Info: Price and cut time (b-and-b)
└   t = 0.0906216
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 36
│   lb = 1.145416331992123
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 42
└   length(nodes) = 79
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2986
└   sum(fire_plans.plans_per_fire) = 1870
┌ Info: Time check
└   time() - start_time = 15.09500002861023
┌ Info: Exploring node
└   branch_and_bound_node.ix = 37
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.012135
┌ Info: Price and cut time (b-and-b)
└   t = 0.1428124
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 37
│   lb = 1.1454427846473585
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 43
└   length(nodes) = 81
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 2996
└   sum(fire_plans.plans_per_fire) = 1884
┌ Info: Time check
└   time() - start_time = 15.253000020980835
┌ Info: Exploring node
└   branch_and_bound_node.ix = 68
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010145
┌ Info: Price and cut time (b-and-b)
└   t = 0.0701986
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 68
│   lb = 1.1454427846473585
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 44
└   length(nodes) = 83
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3026
└   sum(fire_plans.plans_per_fire) = 1894
┌ Info: Time check
└   time() - start_time = 15.335999965667725
┌ Info: Exploring node
└   branch_and_bound_node.ix = 69
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112158
┌ Info: Price and cut time (b-and-b)
└   t = 0.1990915
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 69
│   lb = 1.1454465839190233
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 45
└   length(nodes) = 85
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3060
└   sum(fire_plans.plans_per_fire) = 1922
┌ Info: Time check
└   time() - start_time = 15.551000118255615
┌ Info: Exploring node
└   branch_and_bound_node.ix = 48
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0120873
┌ Info: Price and cut time (b-and-b)
└   t = 0.0973275
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 48
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  4  1  1  3  4  8  8  9  6  3  0  0  0
│      0  8  9  8  3  3  1  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1651306
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0327313
│   obj = 1.154200148514934
└   obj_bound = 1.154129148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1  5   2  2  4  5  9  9  10  7  4  1  1  1
│      1  9  10  9  4  4  2  1   1  1  1  1  1  1
└     11  1   1  1  1  1  1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2415157
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0431846
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   6   3   3  5  6  10  10  11  8  5  2  2  2
│      2  10  11  10  5  5   3   2   2  2  2  2  2  2
└     12   2   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.148627
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0447077
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 48
│   lb = 1.1454465839190233
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 46
└   length(nodes) = 87
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3209
└   sum(fire_plans.plans_per_fire) = 2047
┌ Info: Time check
└   time() - start_time = 16.475000143051147
┌ Info: Exploring node
└   branch_and_bound_node.ix = 49
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.013488
┌ Info: Price and cut time (b-and-b)
└   t = 0.2660342
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 49
│   lb = 1.145446583919024
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 47
└   length(nodes) = 89
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3305
└   sum(fire_plans.plans_per_fire) = 2092
┌ Info: Time check
└   time() - start_time = 16.759999990463257
┌ Info: Exploring node
└   branch_and_bound_node.ix = 86
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102545
┌ Info: Price and cut time (b-and-b)
└   t = 0.1749532
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 86
│   lb = 1.145446583919024
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 48
└   length(nodes) = 91
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3317
└   sum(fire_plans.plans_per_fire) = 2116
┌ Info: Time check
└   time() - start_time = 16.95300006866455
┌ Info: Exploring node
└   branch_and_bound_node.ix = 87
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.011623
┌ Info: Price and cut time (b-and-b)
└   t = 0.1086374
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 87
│   lb = 1.1454939503195631
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 49
└   length(nodes) = 93
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3340
└   sum(fire_plans.plans_per_fire) = 2131
┌ Info: Time check
└   time() - start_time = 17.0770001411438
┌ Info: Exploring node
└   branch_and_bound_node.ix = 70
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0103824
┌ Info: Price and cut time (b-and-b)
└   t = 0.1257351
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 70
│   lb = 1.1454939503195631
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 50
└   length(nodes) = 95
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3354
└   sum(fire_plans.plans_per_fire) = 2144
┌ Info: Time check
└   time() - start_time = 17.20900011062622
┌ Info: Exploring node
└   branch_and_bound_node.ix = 71
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0113183
┌ Info: Price and cut time (b-and-b)
└   t = 0.2285243
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 71
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  3  2  6  9  9  9  6  3  0  0  0
│      0  9  9  6  5  2  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2145945
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0284011
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  4  3  7  10  10  10  7  4  1  1  1
│      1  10  10  7  6  3   1   1   1  1  1  1  1  1
└     11   2   1  1  1  1   1   1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1719505
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1658135
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  5  4  8  11  11  11  8  5  2  2  2
│      2  11  11  8  7  4   2   2   2  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.103061
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0612894
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 71
│   lb = 1.1460699632362816
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 51
└   length(nodes) = 97
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3506
└   sum(fire_plans.plans_per_fire) = 2254
┌ Info: Time check
└   time() - start_time = 18.356000185012817
┌ Info: Exploring node
└   branch_and_bound_node.ix = 28
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0123379
┌ Info: Price and cut time (b-and-b)
└   t = 0.191549
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 28
│   lb = 1.1460699632362816
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 52
└   length(nodes) = 99
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3526
└   sum(fire_plans.plans_per_fire) = 2279
┌ Info: Time check
└   time() - start_time = 18.562000036239624
┌ Info: Exploring node
└   branch_and_bound_node.ix = 29
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0105239
┌ Info: Price and cut time (b-and-b)
└   t = 0.1509533
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 29
│   lb = 1.146073717298822
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 53
└   length(nodes) = 101
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3543
└   sum(fire_plans.plans_per_fire) = 2299
┌ Info: Time check
└   time() - start_time = 18.729000091552734
┌ Info: Exploring node
└   branch_and_bound_node.ix = 90
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0137585
┌ Info: Price and cut time (b-and-b)
└   t = 0.1465312
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 2, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 2, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 90
│   lb = 1.146073717298822
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 54
└   length(nodes) = 103
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3568
└   sum(fire_plans.plans_per_fire) = 2321
┌ Info: Time check
└   time() - start_time = 18.89400005340576
┌ Info: Exploring node
└   branch_and_bound_node.ix = 91
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0121935
┌ Info: Price and cut time (b-and-b)
└   t = 0.1010862
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 91
│   lb = 1.1461593494206446
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 55
└   length(nodes) = 105
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3583
└   sum(fire_plans.plans_per_fire) = 2336
┌ Info: Time check
└   time() - start_time = 19.014000177383423
┌ Info: Exploring node
└   branch_and_bound_node.ix = 56
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0127306
┌ Info: Price and cut time (b-and-b)
└   t = 0.2164735
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 56
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  3  1  0  0  7  9  9  9  6  4  0  0  0
│      0  8  9  8  7  0  0  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1457368
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0247872
│   obj = 1.1542001485149342
└   obj_bound = 1.1541610810916112
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1  4   2  1  1  8  10  10  10  7  5  1  1  1
│      1  9  10  9  8  1   1   1   1  1  1  1  1  1
└     11  1   1  1  1  1   1   1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1891217
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0238793
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   5   3   2  2  9  11  11  11  8  6  2  2  2
│      2  10  11  10  9  2   2   2   2  2  2  2  2  2
└     12   2   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1280046
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0567235
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1542001485149342
┌ Info: current bounds
│   node_ix = 56
│   lb = 1.1461593494206446
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 56
└   length(nodes) = 107
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3691
└   sum(fire_plans.plans_per_fire) = 2450
┌ Info: Time check
└   time() - start_time = 19.9520001411438
┌ Info: Exploring node
└   branch_and_bound_node.ix = 57
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125145
┌ Info: Price and cut time (b-and-b)
└   t = 0.1788444
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 57
│   lb = 1.1462886231447982
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 57
└   length(nodes) = 109
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3718
└   sum(fire_plans.plans_per_fire) = 2472
┌ Info: Time check
└   time() - start_time = 20.140000104904175
┌ Info: Exploring node
└   branch_and_bound_node.ix = 76
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0220301
┌ Info: Price and cut time (b-and-b)
└   t = 0.2137284
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 76
│   lb = 1.1462886231447982
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 58
└   length(nodes) = 111
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3770
└   sum(fire_plans.plans_per_fire) = 2499
┌ Info: Time check
└   time() - start_time = 20.384999990463257
┌ Info: Exploring node
└   branch_and_bound_node.ix = 77
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117823
┌ Info: Price and cut time (b-and-b)
└   t = 0.0615866
┌ Info: current bounds
│   node_ix = 77
│   lb = 1.1464140758853592
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 59
└   length(nodes) = 111
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3808
└   sum(fire_plans.plans_per_fire) = 2510
┌ Info: Time check
└   time() - start_time = 20.467000007629395
┌ Info: Exploring node
└   branch_and_bound_node.ix = 66
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0109483
┌ Info: Price and cut time (b-and-b)
└   t = 0.1417334
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 66
│   lb = 1.1464140758853592
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 60
└   length(nodes) = 113
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3821
└   sum(fire_plans.plans_per_fire) = 2536
┌ Info: Time check
└   time() - start_time = 20.627000093460083
┌ Info: Exploring node
└   branch_and_bound_node.ix = 67
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117435
┌ Info: Price and cut time (b-and-b)
└   t = 0.0812974
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 67
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  1  0  5  2  7  8  9  8  2  0  0  0
│      0  9  9  8  1  3  0  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0770468
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.022745
│   obj = 1.154200148514934
└   obj_bound = 1.1541841310897836
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2   2  1  6  3  8  9  10  9  3  1  1  1
│      1  10  10  9  2  4  1  1   1  1  1  1  1  1
└     11   1   1  1  1  1  1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1640553
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0226778
│   obj = 1.154200148514934
└   obj_bound = 1.154129148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   3   2  7  4  9  10  11  10  4  2  2  2
│      2  11  11  10  3  5  2   2   2   2  2  2  2  2
└     12   2   2   2  2  2  2   2   2   2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1198337
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0419592
│   obj = 1.1542001485149342
└   obj_bound = 1.154200148514934
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.154200148514934
┌ Info: current bounds
│   node_ix = 67
│   lb = 1.1464679449929844
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 61
└   length(nodes) = 115
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3971
└   sum(fire_plans.plans_per_fire) = 2632
┌ Info: Time check
└   time() - start_time = 21.320000171661377
┌ Info: Exploring node
└   branch_and_bound_node.ix = 82
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0146587
┌ Info: Price and cut time (b-and-b)
└   t = 0.1362032
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 82
│   lb = 1.1464679449929844
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 62
└   length(nodes) = 117
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3998
└   sum(fire_plans.plans_per_fire) = 2650
┌ Info: Time check
└   time() - start_time = 21.478000164031982
┌ Info: Exploring node
└   branch_and_bound_node.ix = 83
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0101434
┌ Info: Price and cut time (b-and-b)
└   t = 0.2250877
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 83
│   lb = 1.1465635748151224
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 63
└   length(nodes) = 119
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4043
└   sum(fire_plans.plans_per_fire) = 2679
┌ Info: Time check
└   time() - start_time = 21.713000059127808
┌ Info: Exploring node
└   branch_and_bound_node.ix = 100
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0119541
┌ Info: Price and cut time (b-and-b)
└   t = 0.1551383
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 100
│   lb = 1.1465635748151224
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 64
└   length(nodes) = 121
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4059
└   sum(fire_plans.plans_per_fire) = 2695
┌ Info: Time check
└   time() - start_time = 21.87600016593933
┌ Info: Exploring node
└   branch_and_bound_node.ix = 101
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102197
┌ Info: Price and cut time (b-and-b)
└   t = 0.0777201
┌ Info: current bounds
│   node_ix = 101
│   lb = 1.1465635748151226
└   ub = 1.154200148514934
┌ Info: number of nodes
│   node_explored_count = 65
└   length(nodes) = 121
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4088
└   sum(fire_plans.plans_per_fire) = 2706
┌ Info: Time check
└   time() - start_time = 21.98300004005432
┌ Info: Exploring node
└   branch_and_bound_node.ix = 120
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0119041
┌ Info: Price and cut time (b-and-b)
└   t = 0.161867
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 120
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0   0  2  4  7  8  8  8  7  3  0  0  0
│      0  9  10  8  4  1  1  1  1  0  0  0  0  0
└     10  1   0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1696202
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0444514
│   obj = 1.154200148514934
└   obj_bound = 1.154200148514934
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   1  3  5  8  9  9  9  8  4  1  1  1
│      1  10  11  9  5  2  2  2  2  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.17059
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0199874
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   2   4  6  9  10  10  10  9  5  2  2  2
│      2  11  12  10  6  3   3   3   3  2  2  2  2  2
└     12   3   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0594025
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0133608
│   obj = 1.1501420420324961
└   obj_bound = 1.1501415757441575
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   3   3   5  7  10  11  11  11  10  6  3  3  3
│      3  12  13  11  7   4   4   4   4   3  3  3  3  3
└     13   4   3   3  3   3   3   3   3   3  3  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.067796
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0213591
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 120
│   lb = 1.1465635748151226
└   ub = 1.1501420420324964
┌ Info: number of nodes
│   node_explored_count = 66
└   length(nodes) = 123
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4214
└   sum(fire_plans.plans_per_fire) = 2812
┌ Info: Time check
└   time() - start_time = 22.907999992370605
┌ Info: Exploring node
└   branch_and_bound_node.ix = 121
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0115613
┌ Info: Price and cut time (b-and-b)
└   t = 0.1715796
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 2, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 121
│   lb = 1.1466275707189861
└   ub = 1.1501420420324964
┌ Info: number of nodes
│   node_explored_count = 67
└   length(nodes) = 125
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4237
└   sum(fire_plans.plans_per_fire) = 2835
┌ Info: Time check
└   time() - start_time = 23.088000059127808
┌ Info: Exploring node
└   branch_and_bound_node.ix = 38
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0169095
┌ Info: Price and cut time (b-and-b)
└   t = 0.1141874
┌ Info: current bounds
│   node_ix = 38
│   lb = 1.1466275707189861
└   ub = 1.1501420420324964
┌ Info: number of nodes
│   node_explored_count = 68
└   length(nodes) = 125
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4270
└   sum(fire_plans.plans_per_fire) = 2858
┌ Info: Time check
└   time() - start_time = 23.223000049591064
┌ Info: Exploring node
└   branch_and_bound_node.ix = 39
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0121331
┌ Info: Price and cut time (b-and-b)
└   t = 0.1599403
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 39
│   lb = 1.1466334634277682
└   ub = 1.1501420420324964
┌ Info: number of nodes
│   node_explored_count = 69
└   length(nodes) = 127
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4321
└   sum(fire_plans.plans_per_fire) = 2887
┌ Info: Time check
└   time() - start_time = 23.40499997138977
┌ Info: Exploring node
└   branch_and_bound_node.ix = 40
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0127207
┌ Info: Price and cut time (b-and-b)
└   t = 0.0950233
┌ Info: current bounds
│   node_ix = 40
│   lb = 1.1466334634277682
└   ub = 1.1501420420324964
┌ Info: number of nodes
│   node_explored_count = 70
└   length(nodes) = 127
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4350
└   sum(fire_plans.plans_per_fire) = 2904
┌ Info: Time check
└   time() - start_time = 23.522000074386597
┌ Info: Exploring node
└   branch_and_bound_node.ix = 41
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107732
┌ Info: Price and cut time (b-and-b)
└   t = 0.0982636
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 41
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  1  7  4  8  7  8  6  3  0  0  0
│      0  9  9  8  0  3  0  2  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1405829
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0216266
│   obj = 1.1501420420324961
└   obj_bound = 1.1500297295913953
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  2  8  5  9  8  9  7  4  1  1  1
│      1  10  10  9  1  4  1  3  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.200154
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0207587
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   3  9  6  10  9  10  8  5  2  2  2
│      2  11  11  10  2  5   2  4   2  2  2  2  2  2
└     12   3   2   2  2  2   2  2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1592995
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0244005
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324961
┌ Info: current bounds
│   node_ix = 41
│   lb = 1.1466960842598972
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 71
└   length(nodes) = 129
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4464
└   sum(fire_plans.plans_per_fire) = 3002
┌ Info: Time check
└   time() - start_time = 24.34000015258789
┌ Info: Exploring node
└   branch_and_bound_node.ix = 110
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0140952
┌ Info: Price and cut time (b-and-b)
└   t = 0.1147664
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 110
│   lb = 1.1466960842598972
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 72
└   length(nodes) = 131
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4498
└   sum(fire_plans.plans_per_fire) = 3020
┌ Info: Time check
└   time() - start_time = 24.475000143051147
┌ Info: Exploring node
└   branch_and_bound_node.ix = 111
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0114263
┌ Info: Price and cut time (b-and-b)
└   t = 0.1528413
┌ Info: current bounds
│   node_ix = 111
│   lb = 1.1467524418670034
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 73
└   length(nodes) = 131
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4574
└   sum(fire_plans.plans_per_fire) = 3049
┌ Info: Time check
└   time() - start_time = 24.64300012588501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 106
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106214
┌ Info: Price and cut time (b-and-b)
└   t = 0.107246
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 106
│   lb = 1.1467524418670034
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 74
└   length(nodes) = 133
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4587
└   sum(fire_plans.plans_per_fire) = 3060
┌ Info: Time check
└   time() - start_time = 24.761000156402588
┌ Info: Exploring node
└   branch_and_bound_node.ix = 107
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0121415
┌ Info: Price and cut time (b-and-b)
└   t = 0.2080212
┌ Info: current bounds
│   node_ix = 107
│   lb = 1.146797799855884
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 75
└   length(nodes) = 133
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4600
└   sum(fire_plans.plans_per_fire) = 3085
┌ Info: Time check
└   time() - start_time = 24.993000030517578
┌ Info: Exploring node
└   branch_and_bound_node.ix = 54
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104094
┌ Info: Price and cut time (b-and-b)
└   t = 0.0802105
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 54
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  6  1  7  6  8  8  6  3  0  0  0
│      0  9  9  4  7  0  3  0  1  0  0  0  0  0
└     10  2  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1973973
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0311823
│   obj = 1.1501420420324964
└   obj_bound = 1.1500422642198327
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  7  2  8  7  9  9  7  4  1  1  1
│      1  10  10  5  8  1  4  1  2  1  1  1  1  1
└     11   3   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0884373
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0096048
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  8  3  9  8  10  10  8  5  2  2  2
│      2  11  11  6  9  2  5   2   3  2  2  2  2  2
└     12   4   2  2  2  2  2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0740224
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0171179
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 54
│   lb = 1.146797799855884
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 76
└   length(nodes) = 133
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4746
└   sum(fire_plans.plans_per_fire) = 3167
┌ Info: Time check
└   time() - start_time = 25.63700008392334
┌ Info: Exploring node
└   branch_and_bound_node.ix = 55
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0142224
┌ Info: Price and cut time (b-and-b)
└   t = 0.1482262
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 55
│   lb = 1.1468059052555164
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 77
└   length(nodes) = 135
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4799
└   sum(fire_plans.plans_per_fire) = 3192
┌ Info: Time check
└   time() - start_time = 25.79700016975403
┌ Info: Exploring node
└   branch_and_bound_node.ix = 134
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0135516
┌ Info: Price and cut time (b-and-b)
└   t = 0.1075037
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 134
│   lb = 1.1468059052555164
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 78
└   length(nodes) = 137
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4815
└   sum(fire_plans.plans_per_fire) = 3204
┌ Info: Time check
└   time() - start_time = 25.932000160217285
┌ Info: Exploring node
└   branch_and_bound_node.ix = 135
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0178149
┌ Info: Price and cut time (b-and-b)
└   t = 0.140803
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 7, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 7, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 135
│   lb = 1.1469122821871867
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 79
└   length(nodes) = 139
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4849
└   sum(fire_plans.plans_per_fire) = 3221
┌ Info: Time check
└   time() - start_time = 26.082000017166138
┌ Info: Exploring node
└   branch_and_bound_node.ix = 46
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104304
┌ Info: Price and cut time (b-and-b)
└   t = 0.2034111
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 7, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 46
│   lb = 1.1469122821871867
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 80
└   length(nodes) = 141
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4859
└   sum(fire_plans.plans_per_fire) = 3242
┌ Info: Time check
└   time() - start_time = 26.312000036239624
┌ Info: Exploring node
└   branch_and_bound_node.ix = 47
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0146513
┌ Info: Price and cut time (b-and-b)
└   t = 0.1554556
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 47
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  2  4  5  7  8  8  7  3  0  0  0
│      0  9  9  8  3  2  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0945806
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0233824
│   obj = 1.1501420420324964
└   obj_bound = 1.150102342032496
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  3  5  6  8  9  9  8  4  1  1  1
│      1  10  10  9  4  3  1  1  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1351037
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0492279
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   4  6  7  9  10  10  9  5  2  2  2
│      2  11  11  10  5  4  2   2   2  2  2  2  2  2
└     12   3   2   2  2  2  2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0913389
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0302882
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 47
│   lb = 1.1471299754630162
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 81
└   length(nodes) = 143
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4987
└   sum(fire_plans.plans_per_fire) = 3331
┌ Info: Time check
└   time() - start_time = 27.04700016975403
┌ Info: Exploring node
└   branch_and_bound_node.ix = 96
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0109943
┌ Info: Price and cut time (b-and-b)
└   t = 0.1917042
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 96
│   lb = 1.1471299754630162
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 82
└   length(nodes) = 145
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5000
└   sum(fire_plans.plans_per_fire) = 3357
┌ Info: Time check
└   time() - start_time = 27.243000030517578
┌ Info: Exploring node
└   branch_and_bound_node.ix = 97
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010494
┌ Info: Price and cut time (b-and-b)
└   t = 0.1718002
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 97
│   lb = 1.147186953728858
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 83
└   length(nodes) = 147
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5025
└   sum(fire_plans.plans_per_fire) = 3378
┌ Info: Time check
└   time() - start_time = 27.44600009918213
┌ Info: Exploring node
└   branch_and_bound_node.ix = 78
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0103123
┌ Info: Price and cut time (b-and-b)
└   t = 0.0993194
┌ Info: current bounds
│   node_ix = 78
│   lb = 1.147186953728858
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 84
└   length(nodes) = 147
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5065
└   sum(fire_plans.plans_per_fire) = 3397
┌ Info: Time check
└   time() - start_time = 27.561000108718872
┌ Info: Exploring node
└   branch_and_bound_node.ix = 79
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0101242
┌ Info: Price and cut time (b-and-b)
└   t = 0.0868794
┌ Info: current bounds
│   node_ix = 79
│   lb = 1.1472650385454997
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 85
└   length(nodes) = 147
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5093
└   sum(fire_plans.plans_per_fire) = 3412
┌ Info: Time check
└   time() - start_time = 27.663000106811523
┌ Info: Exploring node
└   branch_and_bound_node.ix = 140
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0103538
┌ Info: Price and cut time (b-and-b)
└   t = 0.2701148
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 140
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  0  7  5  6  9  9  8  3  0  0  0
│      0  9  9  9  0  3  2  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0909103
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0251145
│   obj = 1.1501420420324961
└   obj_bound = 1.1500783420324963
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2   1  8  6  7  10  10  9  4  1  1  1
│      1  10  10  10  1  4  3   1   1  1  1  1  1  1
└     11   2   1   1  1  1  1   1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0970349
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0107954
│   obj = 1.1501420420324964
└   obj_bound = 1.1501415757441578
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   2  9  7  8  11  11  10  5  2  2  2
│      2  11  11  11  2  5  4   2   2   2  2  2  2  2
└     12   3   2   2  2  2  2   2   2   2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0668397
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0153689
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324961
┌ Info: current bounds
│   node_ix = 140
│   lb = 1.1472650385454997
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 86
└   length(nodes) = 149
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5219
└   sum(fire_plans.plans_per_fire) = 3485
┌ Info: Time check
└   time() - start_time = 28.391000032424927
┌ Info: Exploring node
└   branch_and_bound_node.ix = 141
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117113
┌ Info: Price and cut time (b-and-b)
└   t = 0.1770186
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 141
│   lb = 1.1473606223497657
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 87
└   length(nodes) = 151
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5248
└   sum(fire_plans.plans_per_fire) = 3506
┌ Info: Time check
└   time() - start_time = 28.585000038146973
┌ Info: Exploring node
└   branch_and_bound_node.ix = 126
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112997
┌ Info: Price and cut time (b-and-b)
└   t = 0.1161813
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 126
│   lb = 1.1473606223497657
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 88
└   length(nodes) = 153
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5268
└   sum(fire_plans.plans_per_fire) = 3521
┌ Info: Time check
└   time() - start_time = 28.70300006866455
┌ Info: Exploring node
└   branch_and_bound_node.ix = 127
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104715
┌ Info: Price and cut time (b-and-b)
└   t = 0.1039858
┌ Info: current bounds
│   node_ix = 127
│   lb = 1.1473749238221982
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 89
└   length(nodes) = 153
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5306
└   sum(fire_plans.plans_per_fire) = 3539
┌ Info: Time check
└   time() - start_time = 28.835999965667725
┌ Info: Exploring node
└   branch_and_bound_node.ix = 136
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0185974
┌ Info: Price and cut time (b-and-b)
└   t = 0.0527687
┌ Info: current bounds
│   node_ix = 136
│   lb = 1.1473749238221982
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 90
└   length(nodes) = 153
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5326
└   sum(fire_plans.plans_per_fire) = 3546
┌ Info: Time check
└   time() - start_time = 28.90400004386902
┌ Info: Exploring node
└   branch_and_bound_node.ix = 137
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0130951
┌ Info: Price and cut time (b-and-b)
└   t = 0.2194681
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 137
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  3  1  8  8  8  8  7  3  0  0  0
│      0  9  9  6  7  0  0  0  0  0  0  0  0  0
└     10  2  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0656271
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0247402
│   obj = 1.1501420420324964
└   obj_bound = 1.1500298744243311
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  4  2  9  9  9  9  8  4  1  1  1
│      1  10  10  7  8  1  1  1  1  1  1  1  1  1
└     11   3   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1376241
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0297699
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  5  3  10  10  10  10  9  5  2  2  2
│      2  11  11  8  9   2   2   2   2  2  2  2  2  2
└     12   4   2  2  2   2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1502482
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0333221
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 137
│   lb = 1.147468387401104
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 91
└   length(nodes) = 155
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5409
└   sum(fire_plans.plans_per_fire) = 3622
┌ Info: Time check
└   time() - start_time = 29.73800015449524
┌ Info: Exploring node
└   branch_and_bound_node.ix = 130
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111032
┌ Info: Price and cut time (b-and-b)
└   t = 0.0477719
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 2, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 2, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 130
│   lb = 1.147468387401104
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 92
└   length(nodes) = 157
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5428
└   sum(fire_plans.plans_per_fire) = 3629
┌ Info: Time check
└   time() - start_time = 29.80299997329712
┌ Info: Exploring node
└   branch_and_bound_node.ix = 131
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0204232
┌ Info: Price and cut time (b-and-b)
└   t = 0.1838056
┌ Info: current bounds
│   node_ix = 131
│   lb = 1.1475415126616602
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 93
└   length(nodes) = 157
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5478
└   sum(fire_plans.plans_per_fire) = 3659
┌ Info: Time check
└   time() - start_time = 30.01200008392334
┌ Info: Exploring node
└   branch_and_bound_node.ix = 154
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111496
┌ Info: Price and cut time (b-and-b)
└   t = 0.2301242
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 154
│   lb = 1.1475415126616602
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 94
└   length(nodes) = 159
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5506
└   sum(fire_plans.plans_per_fire) = 3676
┌ Info: Time check
└   time() - start_time = 30.25
┌ Info: Exploring node
└   branch_and_bound_node.ix = 155
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.011068
┌ Info: Price and cut time (b-and-b)
└   t = 0.1363139
┌ Info: current bounds
│   node_ix = 155
│   lb = 1.1476649417500084
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 95
└   length(nodes) = 159
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5542
└   sum(fire_plans.plans_per_fire) = 3695
┌ Info: Time check
└   time() - start_time = 30.40000009536743
┌ Info: Exploring node
└   branch_and_bound_node.ix = 116
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0135369
┌ Info: Price and cut time (b-and-b)
└   t = 0.0945082
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 116
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  3  1  2  6  7  8  9  7  2  0  0  0
│      0  9  8  9  6  0  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1045016
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0257208
│   obj = 1.1501420420324964
└   obj_bound = 1.1500468083208346
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2  4   2  3  7  8  9  10  8  3  1  1  1
│      1  10  9  10  7  1  1  1   1  1  1  1  1  1
└     11   2  1   1  1  1  1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.180271
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0321759
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   5   3  4  8  9  10  11  9  4  2  2  2
│      2  11  10  11  8  2  2   2   2  2  2  2  2  2
└     12   3   2   2  2  2  2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1039559
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0433619
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 116
│   lb = 1.1476649417500084
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 96
└   length(nodes) = 161
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5679
└   sum(fire_plans.plans_per_fire) = 3777
┌ Info: Time check
└   time() - start_time = 31.157999992370605
┌ Info: Exploring node
└   branch_and_bound_node.ix = 117
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0153651
┌ Info: Price and cut time (b-and-b)
└   t = 0.1555395
┌ Info: current bounds
│   node_ix = 117
│   lb = 1.1477515755177563
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 97
└   length(nodes) = 161
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5724
└   sum(fire_plans.plans_per_fire) = 3796
┌ Info: Time check
└   time() - start_time = 31.335999965667725
┌ Info: Exploring node
└   branch_and_bound_node.ix = 128
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104476
┌ Info: Price and cut time (b-and-b)
└   t = 0.0632488
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 128
│   lb = 1.1477515755177563
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 98
└   length(nodes) = 163
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5735
└   sum(fire_plans.plans_per_fire) = 3802
┌ Info: Time check
└   time() - start_time = 31.417999982833862
┌ Info: Exploring node
└   branch_and_bound_node.ix = 129
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107093
┌ Info: Price and cut time (b-and-b)
└   t = 0.0902834
┌ Info: current bounds
│   node_ix = 129
│   lb = 1.1477562131672552
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 99
└   length(nodes) = 163
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5754
└   sum(fire_plans.plans_per_fire) = 3815
┌ Info: Time check
└   time() - start_time = 31.52400016784668
┌ Info: Exploring node
└   branch_and_bound_node.ix = 98
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0121508
┌ Info: Price and cut time (b-and-b)
└   t = 0.0799662
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 98
│   lb = 1.1477562131672552
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 100
└   length(nodes) = 165
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5775
└   sum(fire_plans.plans_per_fire) = 3826
┌ Info: Time check
└   time() - start_time = 31.617000102996826
┌ Info: Exploring node
└   branch_and_bound_node.ix = 99
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110832
┌ Info: Price and cut time (b-and-b)
└   t = 0.1357392
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 99
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│     0  0   0  1  4  7  8  8  8  5  4  0  0  0
│     0  8  10  9  4  1  1  0  0  0  0  0  0  0
└     9  2   0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1227082
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0235758
│   obj = 1.1501420420324964
└   obj_bound = 1.1500420083208347
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1  1   1   2  5  8  9  9  9  6  5  1  1  1
│      1  9  11  10  5  2  2  1  1  1  1  1  1  1
└     10  3   1   1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0842802
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0109579
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   2   3  6  9  10  10  10  7  6  2  2  2
│      2  10  12  11  6  3   3   2   2  2  2  2  2  2
└     11   4   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1596113
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   3   3   4  7  10  11  11  11  8  7  3  3  3
│      3  11  13  12  7   4   4   3   3  3  3  3  3  3
└     12   5   3   3  3   3   3   3   3  3  3  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0556231
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      4   4   4   5  8  11  12  12  12  9  8  4  4  4
│      4  12  14  13  8   5   5   4   4  4  4  4  4  4
└     13   6   4   4  4   4   4   4   4  4  4  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0649184
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      5   5   5   6  9  12  13  13  13  10  9  5  5  5
│      5  13  15  14  9   6   6   5   5   5  5  5  5  5
└     14   7   5   5  5   5   5   5   5   5  5  5  5  5
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1807294
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      6   6   6   7  10  13  14  14  14  11  10  6  6  6
│      6  14  16  15  10   7   7   6   6   6   6  6  6  6
└     15   8   6   6   6   6   6   6   6   6   6  6  6  6
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0434495
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      7   7   7   8  11  14  15  15  15  12  11  7  7  7
│      7  15  17  16  11   8   8   7   7   7   7  7  7  7
└     16   9   7   7   7   7   7   7   7   7   7  7  7  7
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0676066
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      8   8   8   9  12  15  16  16  16  13  12  8  8  8
│      8  16  18  17  12   9   9   8   8   8   8  8  8  8
└     17  10   8   8   8   8   8   8   8   8   8  8  8  8
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0695556
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      9   9   9  10  13  16  17  17  17  14  13  9  9  9
│      9  17  19  18  13  10  10   9   9   9   9  9  9  9
└     18  11   9   9   9   9   9   9   9   9   9  9  9  9
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0416875
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 99
│   lb = 1.1477809843164999
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 101
└   length(nodes) = 165
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5982
└   sum(fire_plans.plans_per_fire) = 4008
┌ Info: Time check
└   time() - start_time = 33.11500000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 164
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125955
┌ Info: Price and cut time (b-and-b)
└   t = 0.1872786
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 164
│   lb = 1.1477809843164999
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 102
└   length(nodes) = 167
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6025
└   sum(fire_plans.plans_per_fire) = 4036
┌ Info: Time check
└   time() - start_time = 33.31500005722046
┌ Info: Exploring node
└   branch_and_bound_node.ix = 165
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112694
┌ Info: Price and cut time (b-and-b)
└   t = 0.1303955
┌ Info: current bounds
│   node_ix = 165
│   lb = 1.1478391132134145
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 103
└   length(nodes) = 167
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6046
└   sum(fire_plans.plans_per_fire) = 4051
┌ Info: Time check
└   time() - start_time = 33.473999977111816
┌ Info: Exploring node
└   branch_and_bound_node.ix = 152
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0184773
┌ Info: Price and cut time (b-and-b)
└   t = 0.2914369
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 152
│   lb = 1.1478391132134145
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 104
└   length(nodes) = 169
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6062
└   sum(fire_plans.plans_per_fire) = 4086
┌ Info: Time check
└   time() - start_time = 33.777000188827515
┌ Info: Exploring node
└   branch_and_bound_node.ix = 153
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107919
┌ Info: Price and cut time (b-and-b)
└   t = 0.0671618
┌ Info: current bounds
│   node_ix = 153
│   lb = 1.1478924970464108
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 105
└   length(nodes) = 169
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6109
└   sum(fire_plans.plans_per_fire) = 4098
┌ Info: Time check
└   time() - start_time = 33.86199998855591
┌ Info: Exploring node
└   branch_and_bound_node.ix = 114
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112979
┌ Info: Price and cut time (b-and-b)
└   t = 0.1155293
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 114
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  2  2  2  5  3  7  8  10  8  3  0  0  0
│      0  9  9  7  2  3  0  1   0  0  0  0  0  0
└     10  0  0  0  0  0  0  0   0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2006628
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0233184
│   obj = 1.1501420420324961
└   obj_bound = 1.1500653961469443
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   3   3  3  6  4  8  9  11  9  4  1  1  1
│      1  10  10  8  3  4  1  2   1  1  1  1  1  1
└     11   1   1  1  1  1  1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1000003
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0137511
│   obj = 1.1501420420324961
└   obj_bound = 1.1501415757441578
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   4   4  4  7  5  9  10  12  10  5  2  2  2
│      2  11  11  9  4  5  2   3   2   2  2  2  2  2
└     12   2   2  2  2  2  2   2   2   2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0512978
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0138578
│   obj = 1.1501420420324961
└   obj_bound = 1.1501415757441575
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324961
┌ Info: current bounds
│   node_ix = 114
│   lb = 1.1478924970464108
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 106
└   length(nodes) = 169
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6256
└   sum(fire_plans.plans_per_fire) = 4183
┌ Info: Time check
└   time() - start_time = 34.54100012779236
┌ Info: Exploring node
└   branch_and_bound_node.ix = 115
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111764
┌ Info: Price and cut time (b-and-b)
└   t = 0.1812587
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 115
│   lb = 1.148243402938591
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 107
└   length(nodes) = 171
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6284
└   sum(fire_plans.plans_per_fire) = 4209
┌ Info: Time check
└   time() - start_time = 34.723999977111816
┌ Info: Exploring node
└   branch_and_bound_node.ix = 102
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 2, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010463
┌ Info: Price and cut time (b-and-b)
└   t = 0.1143453
┌ Info: current bounds
│   node_ix = 102
│   lb = 1.148243402938591
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 108
└   length(nodes) = 171
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6306
└   sum(fire_plans.plans_per_fire) = 4228
┌ Info: Time check
└   time() - start_time = 34.85800004005432
┌ Info: Exploring node
└   branch_and_bound_node.ix = 103
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 2, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125104
┌ Info: Price and cut time (b-and-b)
└   t = 0.1944423
┌ Info: current bounds
│   node_ix = 103
│   lb = 1.1483967253981493
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 109
└   length(nodes) = 171
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6389
└   sum(fire_plans.plans_per_fire) = 4264
┌ Info: Time check
└   time() - start_time = 35.07000017166138
┌ Info: Exploring node
└   branch_and_bound_node.ix = 92
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0130295
┌ Info: Price and cut time (b-and-b)
└   t = 0.225074
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 92
│   lb = 1.1483967253981493
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 110
└   length(nodes) = 173
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6437
└   sum(fire_plans.plans_per_fire) = 4294
┌ Info: Time check
└   time() - start_time = 35.31599998474121
┌ Info: Exploring node
└   branch_and_bound_node.ix = 93
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0126023
┌ Info: Price and cut time (b-and-b)
└   t = 0.1096679
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 93
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  3  1  1  2  3  7  9  8  7  3  0  0  0
│      0  8  9  8  4  3  1  0  2  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1250495
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0302248
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1  4   2  2  3  4  8  10  9  8  4  1  1  1
│      1  9  10  9  5  4  2   1  3  1  1  1  1  1
└     11  1   1  1  1  1  1   1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0575947
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0189323
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   5   3   3  4  5  9  11  10  9  5  2  2  2
│      2  10  11  10  6  5  3   2   4  2  2  2  2  2
└     12   2   2   2  2  2  2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0470861
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0155852
│   obj = 1.1501420420324961
└   obj_bound = 1.1500573251766655
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324961
┌ Info: current bounds
│   node_ix = 93
│   lb = 1.148398849962699
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 111
└   length(nodes) = 173
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6562
└   sum(fire_plans.plans_per_fire) = 4370
┌ Info: Time check
└   time() - start_time = 35.87700009346008
┌ Info: Exploring node
└   branch_and_bound_node.ix = 132
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0122747
┌ Info: Price and cut time (b-and-b)
└   t = 0.1087738
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 2, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 2, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 132
│   lb = 1.148398849962699
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 112
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6580
└   sum(fire_plans.plans_per_fire) = 4384
┌ Info: Time check
└   time() - start_time = 35.99000000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 133
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0105014
┌ Info: Price and cut time (b-and-b)
└   t = 0.0854971
┌ Info: current bounds
│   node_ix = 133
│   lb = 1.1484346246404877
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 113
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6606
└   sum(fire_plans.plans_per_fire) = 4399
┌ Info: Time check
└   time() - start_time = 36.10600018501282
┌ Info: Exploring node
└   branch_and_bound_node.ix = 58
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0105455
┌ Info: Price and cut time (b-and-b)
└   t = 0.1596412
┌ Info: current bounds
│   node_ix = 58
│   lb = 1.1484346246404877
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 114
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6656
└   sum(fire_plans.plans_per_fire) = 4421
┌ Info: Time check
└   time() - start_time = 36.27300000190735
┌ Info: Exploring node
└   branch_and_bound_node.ix = 59
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112253
┌ Info: Price and cut time (b-and-b)
└   t = 0.152763
┌ Info: current bounds
│   node_ix = 59
│   lb = 1.1484474657702282
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 115
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6691
└   sum(fire_plans.plans_per_fire) = 4444
┌ Info: Time check
└   time() - start_time = 36.450000047683716
┌ Info: Exploring node
└   branch_and_bound_node.ix = 144
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0114617
┌ Info: Price and cut time (b-and-b)
└   t = 0.0734155
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 144
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1  0   0  2  1  6  8  8  8  6  3  0  0  0
│      0  9  10  6  6  1  1  0  0  0  0  0  0  0
└     10  1   0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1301601
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0250438
│   obj = 1.1501420420324964
└   obj_bound = 1.1500308083200343
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   1   1  3  2  7  9  9  9  7  4  1  1  1
│      1  10  11  7  7  2  2  1  1  1  1  1  1  1
└     11   2   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1068805
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.011941
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   2   2  4  3  8  10  10  10  8  5  2  2  2
│      2  11  12  8  8  3   3   2   2  2  2  2  2  2
└     12   3   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2031731
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      4   3   3  5  4  9  11  11  11  9  6  3  3  3
│      3  12  13  9  9  4   4   3   3  3  3  3  3  3
└     13   4   3  3  3  3   3   3   3  3  3  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0816173
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      5   4   4   6   5  10  12  12  12  10  7  4  4  4
│      4  13  14  10  10   5   5   4   4   4  4  4  4  4
└     14   5   4   4   4   4   4   4   4   4  4  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0594843
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      6   5   5   7   6  11  13  13  13  11  8  5  5  5
│      5  14  15  11  11   6   6   5   5   5  5  5  5  5
└     15   6   5   5   5   5   5   5   5   5  5  5  5  5
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0508044
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      7   6   6   8   7  12  14  14  14  12  9  6  6  6
│      6  15  16  12  12   7   7   6   6   6  6  6  6  6
└     16   7   6   6   6   6   6   6   6   6  6  6  6  6
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.104325
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      8   7   7   9   8  13  15  15  15  13  10  7  7  7
│      7  16  17  13  13   8   8   7   7   7   7  7  7  7
└     17   8   7   7   7   7   7   7   7   7   7  7  7  7
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0537583
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      9   8   8  10   9  14  16  16  16  14  11  8  8  8
│      8  17  18  14  14   9   9   8   8   8   8  8  8  8
└     18   9   8   8   8   8   8   8   8   8   8  8  8  8
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0351818
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│     10   9   9  11  10  15  17  17  17  15  12  9  9  9
│      9  18  19  15  15  10  10   9   9   9   9  9  9  9
└     19  10   9   9   9   9   9   9   9   9   9  9  9  9
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0342201
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 144
│   lb = 1.1484474657702282
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 116
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6892
└   sum(fire_plans.plans_per_fire) = 4579
┌ Info: Time check
└   time() - start_time = 37.843000173568726
┌ Info: Exploring node
└   branch_and_bound_node.ix = 145
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107172
┌ Info: Price and cut time (b-and-b)
└   t = 0.219091
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 145
│   lb = 1.1484550451715996
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 117
└   length(nodes) = 177
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6956
└   sum(fire_plans.plans_per_fire) = 4612
┌ Info: Time check
└   time() - start_time = 38.092000007629395
┌ Info: Exploring node
└   branch_and_bound_node.ix = 142
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0103212
┌ Info: Price and cut time (b-and-b)
└   t = 0.1508261
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 142
│   lb = 1.1484550451715996
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 118
└   length(nodes) = 179
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7002
└   sum(fire_plans.plans_per_fire) = 4636
┌ Info: Time check
└   time() - start_time = 38.25999999046326
┌ Info: Exploring node
└   branch_and_bound_node.ix = 143
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010517
┌ Info: Price and cut time (b-and-b)
└   t = 0.1945552
┌ Info: current bounds
│   node_ix = 143
│   lb = 1.148474358045871
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 119
└   length(nodes) = 179
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7020
└   sum(fire_plans.plans_per_fire) = 4668
┌ Info: Time check
└   time() - start_time = 38.46000003814697
┌ Info: Exploring node
└   branch_and_bound_node.ix = 80
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0109264
┌ Info: Price and cut time (b-and-b)
└   t = 0.1232871
┌ Info: current bounds
│   node_ix = 80
│   lb = 1.148474358045871
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 120
└   length(nodes) = 179
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7060
└   sum(fire_plans.plans_per_fire) = 4689
┌ Info: Time check
└   time() - start_time = 38.60600018501282
┌ Info: Exploring node
└   branch_and_bound_node.ix = 81
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102933
┌ Info: Price and cut time (b-and-b)
└   t = 0.1739548
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 81
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  3  0  2  6  8  8  8  6  3  0  0  0
│      0  9  7  9  5  1  1  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1595945
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0238993
│   obj = 1.1501420420324964
└   obj_bound = 1.1501383022012281
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1  4   1  3  7  9  9  9  7  4  1  1  1
│      1  10  8  10  6  2  2  1  1  1  1  1  1  1
└     11   2  1   1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1741204
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0089554
│   obj = 1.1501420420324961
└   obj_bound = 1.1500440378941528
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2  5   2  4  8  10  10  10  8  5  2  2  2
│      2  11  9  11  7  3   3   2   2  2  2  2  2  2
└     12   3  2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1552404
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0163759
│   obj = 1.1501420420324964
└   obj_bound = 1.1500450842152947
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 81
│   lb = 1.1487009472807204
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 121
└   length(nodes) = 179
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7210
└   sum(fire_plans.plans_per_fire) = 4815
┌ Info: Time check
└   time() - start_time = 39.47000002861023
┌ Info: Exploring node
└   branch_and_bound_node.ix = 158
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0126544
┌ Info: Price and cut time (b-and-b)
└   t = 0.0507771
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(3, 2, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(3, 2, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 158
│   lb = 1.1487009472807204
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 122
└   length(nodes) = 181
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7230
└   sum(fire_plans.plans_per_fire) = 4820
┌ Info: Time check
└   time() - start_time = 39.532999992370605
┌ Info: Exploring node
└   branch_and_bound_node.ix = 159
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0123688
┌ Info: Price and cut time (b-and-b)
└   t = 0.0813224
┌ Info: current bounds
│   node_ix = 159
│   lb = 1.1487455147835814
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 123
└   length(nodes) = 181
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7282
└   sum(fire_plans.plans_per_fire) = 4832
┌ Info: Time check
└   time() - start_time = 39.640000104904175
┌ Info: Exploring node
└   branch_and_bound_node.ix = 170
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0144578
┌ Info: Price and cut time (b-and-b)
└   t = 0.1522203
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 170
│   lb = 1.1487455147835814
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 124
└   length(nodes) = 183
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7359
└   sum(fire_plans.plans_per_fire) = 4858
┌ Info: Time check
└   time() - start_time = 39.80900001525879
┌ Info: Exploring node
└   branch_and_bound_node.ix = 171
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0128086
┌ Info: Price and cut time (b-and-b)
└   t = 0.0621031
┌ Info: current bounds
│   node_ix = 171
│   lb = 1.1487962057159542
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 125
└   length(nodes) = 183
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7380
└   sum(fire_plans.plans_per_fire) = 4870
┌ Info: Time check
└   time() - start_time = 39.89800000190735
┌ Info: Exploring node
└   branch_and_bound_node.ix = 94
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0119508
┌ Info: Price and cut time (b-and-b)
└   t = 0.104769
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 94
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0   0  1  2  2  6  8  7  8  6  4  0  0  0
│      0  10  9  6  4  1  1  1  0  0  0  0  0  0
└     10   0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2028324
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0273376
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2  3  3  7  9  8  9  7  5  1  1  1
│      1  11  10  7  5  2  2  2  1  1  1  1  1  1
└     11   1   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1186332
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.013734
│   obj = 1.1501420420324964
└   obj_bound = 1.1501415757441578
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3  4  4  8  10  9  10  8  6  2  2  2
│      2  12  11  8  6  3   3  3   2  2  2  2  2  2
└     12   2   2  2  2  2   2  2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.271703
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   3   4  5  5  9  11  10  11  9  7  3  3  3
│      3  13  12  9  7  4   4   4   3  3  3  3  3  3
└     13   3   3  3  3  3   3   3   3  3  3  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.2037162
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      4   4   5   6  6  10  12  11  12  10  8  4  4  4
│      4  14  13  10  8   5   5   5   4   4  4  4  4  4
└     14   4   4   4  4   4   4   4   4   4  4  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1964545
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      5   5   6   7  7  11  13  12  13  11  9  5  5  5
│      5  15  14  11  9   6   6   6   5   5  5  5  5  5
└     15   5   5   5  5   5   5   5   5   5  5  5  5  5
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1335209
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0209142
│   obj = 1.1501420420324964
└   obj_bound = 1.150141575744158
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 94
│   lb = 1.1487962057159542
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 126
└   length(nodes) = 183
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7551
└   sum(fire_plans.plans_per_fire) = 5054
┌ Info: Time check
└   time() - start_time = 41.45900011062622
┌ Info: Exploring node
└   branch_and_bound_node.ix = 95
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.011908
┌ Info: Price and cut time (b-and-b)
└   t = 0.1112807
┌ Info: current bounds
│   node_ix = 95
│   lb = 1.1488042257162991
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 127
└   length(nodes) = 183
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7574
└   sum(fire_plans.plans_per_fire) = 5070
┌ Info: Time check
└   time() - start_time = 41.58200001716614
┌ Info: Exploring node
└   branch_and_bound_node.ix = 162
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0128644
┌ Info: Price and cut time (b-and-b)
└   t = 0.1807783
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 162
│   lb = 1.1488042257162991
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 128
└   length(nodes) = 185
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7597
└   sum(fire_plans.plans_per_fire) = 5092
┌ Info: Time check
└   time() - start_time = 41.776000022888184
┌ Info: Exploring node
└   branch_and_bound_node.ix = 163
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0123634
┌ Info: Price and cut time (b-and-b)
└   t = 0.1418499
┌ Info: current bounds
│   node_ix = 163
│   lb = 1.1488321880933619
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 129
└   length(nodes) = 185
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7624
└   sum(fire_plans.plans_per_fire) = 5111
┌ Info: Time check
└   time() - start_time = 41.94500017166138
┌ Info: Exploring node
└   branch_and_bound_node.ix = 160
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110252
┌ Info: Price and cut time (b-and-b)
└   t = 0.079975
┌ Info: current bounds
│   node_ix = 160
│   lb = 1.1488321880933619
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 130
└   length(nodes) = 185
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7640
└   sum(fire_plans.plans_per_fire) = 5122
┌ Info: Time check
└   time() - start_time = 42.04400014877319
┌ Info: Exploring node
└   branch_and_bound_node.ix = 161
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111372
┌ Info: Price and cut time (b-and-b)
└   t = 0.0767871
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 161
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  4  1  1  6  7  8  9  7  3  0  0  0
│      0  9  7  9  6  0  1  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0899
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.022986
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1  5   2  2  7  8  9  10  8  4  1  1  1
│      1  10  8  10  7  1  2  1   1  1  1  1  1  1
└     11   2  1   1  1  1  1  1   1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0949609
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0102322
│   obj = 1.1501420420324964
└   obj_bound = 1.1500930399633245
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2  6   3  3  8  9  10  11  9  5  2  2  2
│      2  11  9  11  8  2  3   2   2  2  2  2  2  2
└     12   3  2   2  2  2  2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 3, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1662579
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0432566
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324961
┌ Info: current bounds
│   node_ix = 161
│   lb = 1.1489387801226272
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 131
└   length(nodes) = 185
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7774
└   sum(fire_plans.plans_per_fire) = 5203
┌ Info: Time check
└   time() - start_time = 42.69600009918213
┌ Info: Exploring node
└   branch_and_bound_node.ix = 72
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0124432
┌ Info: Price and cut time (b-and-b)
└   t = 0.143564
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 72
│   lb = 1.1489387801226272
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 132
└   length(nodes) = 187
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7805
└   sum(fire_plans.plans_per_fire) = 5223
┌ Info: Time check
└   time() - start_time = 42.85700011253357
┌ Info: Exploring node
└   branch_and_bound_node.ix = 73
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111963
┌ Info: Price and cut time (b-and-b)
└   t = 0.096185
┌ Info: current bounds
│   node_ix = 73
│   lb = 1.14894780534697
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 133
└   length(nodes) = 187
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7847
└   sum(fire_plans.plans_per_fire) = 5236
┌ Info: Time check
└   time() - start_time = 42.97500014305115
┌ Info: Exploring node
└   branch_and_bound_node.ix = 74
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010355
┌ Info: Price and cut time (b-and-b)
└   t = 0.0994625
┌ Info: current bounds
│   node_ix = 74
│   lb = 1.14894780534697
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 134
└   length(nodes) = 187
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7896
└   sum(fire_plans.plans_per_fire) = 5255
┌ Info: Time check
└   time() - start_time = 43.09000015258789
┌ Info: Exploring node
└   branch_and_bound_node.ix = 75
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010335
┌ Info: Price and cut time (b-and-b)
└   t = 0.1320524
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 75
│   lb = 1.1489602792653368
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 135
└   length(nodes) = 189
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7906
└   sum(fire_plans.plans_per_fire) = 5277
┌ Info: Time check
└   time() - start_time = 43.22500014305115
┌ Info: Exploring node
└   branch_and_bound_node.ix = 188
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.010555
┌ Info: Price and cut time (b-and-b)
└   t = 0.175799
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 188
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  3  1  2  3  10  8  8  6  3  0  0  0
│      0  9  8  6  5  3   0  0  0  0  0  0  0  0
└     10  0  0  0  0  0   0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1455344
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0272185
│   obj = 1.1501420420324964
└   obj_bound = 1.150049542032496
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2  4  2  3  4  11  9  9  7  4  1  1  1
│      1  10  9  7  6  4   1  1  1  1  1  1  1  1
└     11   1  1  1  1  1   1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1804495
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0139302
│   obj = 1.1501420420324964
└   obj_bound = 1.1501420420324964
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   5  3  4  5  12  10  10  8  5  2  2  2
│      2  11  10  8  7  5   2   2   2  2  2  2  2  2
└     12   2   2  2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.0732465
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0158994
│   obj = 1.1501420420324961
└   obj_bound = 1.1501420420324961
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1501420420324964
┌ Info: current bounds
│   node_ix = 188
│   lb = 1.1489602792653368
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 136
└   length(nodes) = 189
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8031
└   sum(fire_plans.plans_per_fire) = 5385
┌ Info: Time check
└   time() - start_time = 44.04100012779236
┌ Info: Exploring node
└   branch_and_bound_node.ix = 189
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111732
┌ Info: Price and cut time (b-and-b)
└   t = 0.0868042
┌ Info: current bounds
│   node_ix = 189
│   lb = 1.1490268072818843
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 137
└   length(nodes) = 189
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8098
└   sum(fire_plans.plans_per_fire) = 5397
┌ Info: Time check
└   time() - start_time = 44.14300012588501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 146
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0146931
┌ Info: Price and cut time (b-and-b)
└   t = 0.1501496
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 146
│   lb = 1.1490268072818843
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 138
└   length(nodes) = 191
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8130
└   sum(fire_plans.plans_per_fire) = 5415
┌ Info: Time check
└   time() - start_time = 44.30000019073486
┌ Info: Exploring node
└   branch_and_bound_node.ix = 147
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107617
┌ Info: Price and cut time (b-and-b)
└   t = 0.0997065
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 147
│   lb = 1.1490446771236464
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 139
└   length(nodes) = 193
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8153
└   sum(fire_plans.plans_per_fire) = 5430
┌ Info: Time check
└   time() - start_time = 44.41900014877319
┌ Info: Exploring node
└   branch_and_bound_node.ix = 124
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106572
┌ Info: Price and cut time (b-and-b)
└   t = 0.0890759
┌ Info: current bounds
│   node_ix = 124
│   lb = 1.1490446771236464
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 140
└   length(nodes) = 193
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8184
└   sum(fire_plans.plans_per_fire) = 5443
┌ Info: Time check
└   time() - start_time = 44.53600001335144
┌ Info: Exploring node
└   branch_and_bound_node.ix = 125
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106672
┌ Info: Price and cut time (b-and-b)
└   t = 0.0419268
┌ Info: current bounds
│   node_ix = 125
│   lb = 1.1490649603954706
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 141
└   length(nodes) = 193
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8205
└   sum(fire_plans.plans_per_fire) = 5452
┌ Info: Time check
└   time() - start_time = 44.587000131607056
┌ Info: Exploring node
└   branch_and_bound_node.ix = 168
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0123299
┌ Info: Price and cut time (b-and-b)
└   t = 0.10881
┌ Info: current bounds
│   node_ix = 168
│   lb = 1.1490649603954706
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 142
└   length(nodes) = 193
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8224
└   sum(fire_plans.plans_per_fire) = 5467
┌ Info: Time check
└   time() - start_time = 44.71900010108948
┌ Info: Exploring node
└   branch_and_bound_node.ix = 169
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0107951
┌ Info: Price and cut time (b-and-b)
└   t = 0.1558064
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 2, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 169
│   lb = 1.1490710983970918
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 143
└   length(nodes) = 195
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8248
└   sum(fire_plans.plans_per_fire) = 5482
┌ Info: Time check
└   time() - start_time = 44.884000062942505
┌ Info: Exploring node
└   branch_and_bound_node.ix = 118
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0113277
┌ Info: Price and cut time (b-and-b)
└   t = 0.2218547
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 118
│   lb = 1.1490710983970918
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 144
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8259
└   sum(fire_plans.plans_per_fire) = 5498
┌ Info: Time check
└   time() - start_time = 45.128000020980835
┌ Info: Exploring node
└   branch_and_bound_node.ix = 119
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.01034
┌ Info: Price and cut time (b-and-b)
└   t = 0.0762002
┌ Info: current bounds
│   node_ix = 119
│   lb = 1.1490785267357917
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 145
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8289
└   sum(fire_plans.plans_per_fire) = 5507
┌ Info: Time check
└   time() - start_time = 45.22100019454956
┌ Info: Exploring node
└   branch_and_bound_node.ix = 108
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117707
┌ Info: Price and cut time (b-and-b)
└   t = 0.1270645
┌ Info: current bounds
│   node_ix = 108
│   lb = 1.1490785267357917
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 146
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8304
└   sum(fire_plans.plans_per_fire) = 5521
┌ Info: Time check
└   time() - start_time = 45.360000133514404
┌ Info: Exploring node
└   branch_and_bound_node.ix = 109
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0114922
┌ Info: Price and cut time (b-and-b)
└   t = 0.1107047
┌ Info: current bounds
│   node_ix = 109
│   lb = 1.1490820198786553
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 147
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8325
└   sum(fire_plans.plans_per_fire) = 5534
┌ Info: Time check
└   time() - start_time = 45.49300003051758
┌ Info: Exploring node
└   branch_and_bound_node.ix = 178
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110528
┌ Info: Price and cut time (b-and-b)
└   t = 0.0629728
┌ Info: current bounds
│   node_ix = 178
│   lb = 1.1490820198786553
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 148
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8346
└   sum(fire_plans.plans_per_fire) = 5545
┌ Info: Time check
└   time() - start_time = 45.57000017166138
┌ Info: Exploring node
└   branch_and_bound_node.ix = 179
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0241751
┌ Info: Price and cut time (b-and-b)
└   t = 0.1180432
┌ Info: current bounds
│   node_ix = 179
│   lb = 1.1492392005906715
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 149
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8373
└   sum(fire_plans.plans_per_fire) = 5565
┌ Info: Time check
└   time() - start_time = 45.71600008010864
┌ Info: Exploring node
└   branch_and_bound_node.ix = 184
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106529
┌ Info: Price and cut time (b-and-b)
└   t = 0.0855285
┌ Info: current bounds
│   node_ix = 184
│   lb = 1.1492392005906715
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 150
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8386
└   sum(fire_plans.plans_per_fire) = 5579
┌ Info: Time check
└   time() - start_time = 45.82000017166138
┌ Info: Exploring node
└   branch_and_bound_node.ix = 185
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0131596
┌ Info: Price and cut time (b-and-b)
└   t = 0.0797098
┌ Info: current bounds
│   node_ix = 185
│   lb = 1.1492897974490761
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 151
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8412
└   sum(fire_plans.plans_per_fire) = 5590
┌ Info: Time check
└   time() - start_time = 45.91799998283386
┌ Info: Exploring node
└   branch_and_bound_node.ix = 180
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
│     FireDemandBranchingRule(3, 2, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0130504
┌ Info: Price and cut time (b-and-b)
└   t = 0.0664736
┌ Info: current bounds
│   node_ix = 180
│   lb = 1.1492897974490761
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 152
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8428
└   sum(fire_plans.plans_per_fire) = 5601
┌ Info: Time check
└   time() - start_time = 46.00200009346008
┌ Info: Exploring node
└   branch_and_bound_node.ix = 181
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
│     FireDemandBranchingRule(3, 2, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.015923
┌ Info: Price and cut time (b-and-b)
└   t = 0.0389058
┌ Info: current bounds
│   node_ix = 181
│   lb = 1.1493195403219452
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 153
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8439
└   sum(fire_plans.plans_per_fire) = 5607
┌ Info: Time check
└   time() - start_time = 46.062999963760376
┌ Info: Exploring node
└   branch_and_bound_node.ix = 30
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 7, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106548
┌ Info: Price and cut time (b-and-b)
└   t = 0.1421467
┌ Info: current bounds
│   node_ix = 30
│   lb = 1.1493195403219452
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 154
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8468
└   sum(fire_plans.plans_per_fire) = 5624
┌ Info: Time check
└   time() - start_time = 46.21000003814697
┌ Info: Exploring node
└   branch_and_bound_node.ix = 31
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 7, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112975
┌ Info: Price and cut time (b-and-b)
└   t = 0.1035162
┌ Info: current bounds
│   node_ix = 31
│   lb = 1.1493454469709816
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 155
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8482
└   sum(fire_plans.plans_per_fire) = 5644
┌ Info: Time check
└   time() - start_time = 46.343000173568726
┌ Info: Exploring node
└   branch_and_bound_node.ix = 186
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102198
┌ Info: Price and cut time (b-and-b)
└   t = 0.1538801
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 186
│   lb = 1.1493454469709816
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 156
└   length(nodes) = 199
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8516
└   sum(fire_plans.plans_per_fire) = 5663
┌ Info: Time check
└   time() - start_time = 46.51100015640259
┌ Info: Exploring node
└   branch_and_bound_node.ix = 187
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102471
┌ Info: Price and cut time (b-and-b)
└   t = 0.0672889
┌ Info: current bounds
│   node_ix = 187
│   lb = 1.1493905154442112
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 157
└   length(nodes) = 199
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8576
└   sum(fire_plans.plans_per_fire) = 5675
┌ Info: Time check
└   time() - start_time = 46.59500002861023
┌ Info: Exploring node
└   branch_and_bound_node.ix = 60
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110931
┌ Info: Price and cut time (b-and-b)
└   t = 0.126509
┌ Info: current bounds
│   node_ix = 60
│   lb = 1.1493905154442112
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 158
└   length(nodes) = 199
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8624
└   sum(fire_plans.plans_per_fire) = 5696
┌ Info: Time check
└   time() - start_time = 46.72800016403198
┌ Info: Exploring node
└   branch_and_bound_node.ix = 61
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0131698
┌ Info: Price and cut time (b-and-b)
└   t = 0.1123351
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 61
│   lb = 1.1494369508835824
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 159
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8643
└   sum(fire_plans.plans_per_fire) = 5710
┌ Info: Time check
└   time() - start_time = 46.861000061035156
┌ Info: Exploring node
└   branch_and_bound_node.ix = 182
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0130015
┌ Info: Price and cut time (b-and-b)
└   t = 0.0859655
┌ Info: current bounds
│   node_ix = 182
│   lb = 1.1494369508835824
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 160
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8657
└   sum(fire_plans.plans_per_fire) = 5725
┌ Info: Time check
└   time() - start_time = 46.97200012207031
┌ Info: Exploring node
└   branch_and_bound_node.ix = 183
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106988
┌ Info: Price and cut time (b-and-b)
└   t = 0.0966598
┌ Info: current bounds
│   node_ix = 183
│   lb = 1.149440671311809
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 161
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8711
└   sum(fire_plans.plans_per_fire) = 5740
┌ Info: Time check
└   time() - start_time = 47.08400011062622
┌ Info: Exploring node
└   branch_and_bound_node.ix = 192
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0126654
┌ Info: Price and cut time (b-and-b)
└   t = 0.1349598
┌ Info: current bounds
│   node_ix = 192
│   lb = 1.149440671311809
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 162
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8740
└   sum(fire_plans.plans_per_fire) = 5759
┌ Info: Time check
└   time() - start_time = 47.22800016403198
┌ Info: Exploring node
└   branch_and_bound_node.ix = 193
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117779
┌ Info: Price and cut time (b-and-b)
└   t = 0.0982624
┌ Info: current bounds
│   node_ix = 193
│   lb = 1.1494438261528297
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 163
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8753
└   sum(fire_plans.plans_per_fire) = 5775
┌ Info: Time check
└   time() - start_time = 47.35199999809265
┌ Info: Exploring node
└   branch_and_bound_node.ix = 194
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0126069
┌ Info: Price and cut time (b-and-b)
└   t = 0.1428546
┌ Info: current bounds
│   node_ix = 194
│   lb = 1.1494438261528297
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 164
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8774
└   sum(fire_plans.plans_per_fire) = 5798
┌ Info: Time check
└   time() - start_time = 47.50999999046326
┌ Info: Exploring node
└   branch_and_bound_node.ix = 195
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106077
┌ Info: Price and cut time (b-and-b)
└   t = 0.0620447
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 195
│   lb = 1.149467080180183
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 165
└   length(nodes) = 203
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8784
└   sum(fire_plans.plans_per_fire) = 5804
┌ Info: Time check
└   time() - start_time = 47.5789999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 200
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0108693
┌ Info: Price and cut time (b-and-b)
└   t = 0.0963579
┌ Info: current bounds
│   node_ix = 200
│   lb = 1.149467080180183
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 166
└   length(nodes) = 203
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8819
└   sum(fire_plans.plans_per_fire) = 5821
┌ Info: Time check
└   time() - start_time = 47.705000162124634
┌ Info: Exploring node
└   branch_and_bound_node.ix = 201
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0125198
┌ Info: Price and cut time (b-and-b)
└   t = 0.1839595
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 201
│   lb = 1.149471096526979
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 167
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8881
└   sum(fire_plans.plans_per_fire) = 5850
┌ Info: Time check
└   time() - start_time = 47.9060001373291
┌ Info: Exploring node
└   branch_and_bound_node.ix = 174
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 2, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104874
┌ Info: Price and cut time (b-and-b)
└   t = 0.0648157
┌ Info: current bounds
│   node_ix = 174
│   lb = 1.149471096526979
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 168
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8902
└   sum(fire_plans.plans_per_fire) = 5860
┌ Info: Time check
└   time() - start_time = 47.98699998855591
┌ Info: Exploring node
└   branch_and_bound_node.ix = 175
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 2, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.011023
┌ Info: Price and cut time (b-and-b)
└   t = 0.2275129
┌ Info: current bounds
│   node_ix = 175
│   lb = 1.1495105283601643
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 169
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8972
└   sum(fire_plans.plans_per_fire) = 5900
┌ Info: Time check
└   time() - start_time = 48.223000049591064
┌ Info: Exploring node
└   branch_and_bound_node.ix = 150
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0113371
┌ Info: Price and cut time (b-and-b)
└   t = 0.0516502
┌ Info: current bounds
│   node_ix = 150
│   lb = 1.1495105283601643
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 170
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8991
└   sum(fire_plans.plans_per_fire) = 5906
┌ Info: Time check
└   time() - start_time = 48.29100012779236
┌ Info: Exploring node
└   branch_and_bound_node.ix = 151
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110638
┌ Info: Price and cut time (b-and-b)
└   t = 0.116227
┌ Info: current bounds
│   node_ix = 151
│   lb = 1.1495319100204608
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 171
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9013
└   sum(fire_plans.plans_per_fire) = 5921
┌ Info: Time check
└   time() - start_time = 48.443000078201294
┌ Info: Exploring node
└   branch_and_bound_node.ix = 204
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112413
┌ Info: Price and cut time (b-and-b)
└   t = 0.1553201
┌ Info: current bounds
│   node_ix = 204
│   lb = 1.1495319100204608
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 172
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9027
└   sum(fire_plans.plans_per_fire) = 5940
┌ Info: Time check
└   time() - start_time = 48.605000019073486
┌ Info: Exploring node
└   branch_and_bound_node.ix = 205
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0108277
┌ Info: Price and cut time (b-and-b)
└   t = 0.1149583
┌ Info: current bounds
│   node_ix = 205
│   lb = 1.1495423501628288
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 173
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9053
└   sum(fire_plans.plans_per_fire) = 5958
┌ Info: Time check
└   time() - start_time = 48.73800015449524
┌ Info: Exploring node
└   branch_and_bound_node.ix = 172
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112638
┌ Info: Price and cut time (b-and-b)
└   t = 0.1953219
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 172
│   lb = 1.1495423501628288
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 174
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9094
└   sum(fire_plans.plans_per_fire) = 5983
┌ Info: Time check
└   time() - start_time = 48.9539999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 173
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0120899
┌ Info: Price and cut time (b-and-b)
└   t = 0.0868389
┌ Info: current bounds
│   node_ix = 173
│   lb = 1.149552633453325
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 175
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9105
└   sum(fire_plans.plans_per_fire) = 5993
┌ Info: Time check
└   time() - start_time = 49.06700015068054
┌ Info: Exploring node
└   branch_and_bound_node.ix = 196
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102306
┌ Info: Price and cut time (b-and-b)
└   t = 0.080996
┌ Info: current bounds
│   node_ix = 196
│   lb = 1.149552633453325
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 176
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9122
└   sum(fire_plans.plans_per_fire) = 6003
┌ Info: Time check
└   time() - start_time = 49.16200017929077
┌ Info: Exploring node
└   branch_and_bound_node.ix = 197
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0140983
┌ Info: Price and cut time (b-and-b)
└   t = 0.0745881
┌ Info: current bounds
│   node_ix = 197
│   lb = 1.1496109561888859
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 177
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9158
└   sum(fire_plans.plans_per_fire) = 6012
┌ Info: Time check
└   time() - start_time = 49.25600004196167
┌ Info: Exploring node
└   branch_and_bound_node.ix = 88
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0105643
┌ Info: Price and cut time (b-and-b)
└   t = 0.1414704
┌ Info: current bounds
│   node_ix = 88
│   lb = 1.1496109561888859
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 178
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9181
└   sum(fire_plans.plans_per_fire) = 6038
┌ Info: Time check
└   time() - start_time = 49.402000188827515
┌ Info: Exploring node
└   branch_and_bound_node.ix = 89
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0136613
┌ Info: Price and cut time (b-and-b)
└   t = 0.09113
┌ Info: current bounds
│   node_ix = 89
│   lb = 1.1496794092375313
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 179
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9233
└   sum(fire_plans.plans_per_fire) = 6054
┌ Info: Time check
└   time() - start_time = 49.52400016784668
┌ Info: Exploring node
└   branch_and_bound_node.ix = 198
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0109419
┌ Info: Price and cut time (b-and-b)
└   t = 0.0817557
┌ Info: current bounds
│   node_ix = 198
│   lb = 1.1496794092375313
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 180
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9258
└   sum(fire_plans.plans_per_fire) = 6071
┌ Info: Time check
└   time() - start_time = 49.62100005149841
┌ Info: Exploring node
└   branch_and_bound_node.ix = 199
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104648
┌ Info: Price and cut time (b-and-b)
└   t = 0.1386505
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 5, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 5, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 199
│   lb = 1.1497269073019973
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 181
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9277
└   sum(fire_plans.plans_per_fire) = 6094
┌ Info: Time check
└   time() - start_time = 49.77500009536743
┌ Info: Exploring node
└   branch_and_bound_node.ix = 190
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 4, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0151115
┌ Info: Price and cut time (b-and-b)
└   t = 0.2918848
┌ Info: current bounds
│   node_ix = 190
│   lb = 1.1497269073019973
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 182
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9292
└   sum(fire_plans.plans_per_fire) = 6125
┌ Info: Time check
└   time() - start_time = 50.08200001716614
┌ Info: Exploring node
└   branch_and_bound_node.ix = 191
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 4, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0134619
┌ Info: Price and cut time (b-and-b)
└   t = 0.1145092
┌ Info: current bounds
│   node_ix = 191
│   lb = 1.1498098772719398
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 183
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9316
└   sum(fire_plans.plans_per_fire) = 6141
┌ Info: Time check
└   time() - start_time = 50.22000002861023
┌ Info: Exploring node
└   branch_and_bound_node.ix = 138
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 7, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106763
┌ Info: Price and cut time (b-and-b)
└   t = 0.1037257
┌ Info: current bounds
│   node_ix = 138
│   lb = 1.1498098772719398
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 184
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9346
└   sum(fire_plans.plans_per_fire) = 6155
┌ Info: Time check
└   time() - start_time = 50.33500003814697
┌ Info: Exploring node
└   branch_and_bound_node.ix = 139
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 7, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0136731
┌ Info: Price and cut time (b-and-b)
└   t = 0.0613064
┌ Info: current bounds
│   node_ix = 139
│   lb = 1.1498205381172113
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 185
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9375
└   sum(fire_plans.plans_per_fire) = 6166
┌ Info: Time check
└   time() - start_time = 50.420000076293945
┌ Info: Exploring node
└   branch_and_bound_node.ix = 202
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110684
┌ Info: Price and cut time (b-and-b)
└   t = 0.0890267
┌ Info: current bounds
│   node_ix = 202
│   lb = 1.1498205381172113
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 186
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9390
└   sum(fire_plans.plans_per_fire) = 6179
┌ Info: Time check
└   time() - start_time = 50.52500009536743
┌ Info: Exploring node
└   branch_and_bound_node.ix = 203
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 2, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 3, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0116773
┌ Info: Price and cut time (b-and-b)
└   t = 0.0513893
┌ Info: current bounds
│   node_ix = 203
│   lb = 1.1498393868020345
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 187
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9410
└   sum(fire_plans.plans_per_fire) = 6187
┌ Info: Time check
└   time() - start_time = 50.59000015258789
┌ Info: Exploring node
└   branch_and_bound_node.ix = 122
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0116001
┌ Info: Price and cut time (b-and-b)
└   t = 0.1224721
┌ Info: current bounds
│   node_ix = 122
│   lb = 1.1498393868020345
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 188
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9432
└   sum(fire_plans.plans_per_fire) = 6205
┌ Info: Time check
└   time() - start_time = 50.718000173568726
┌ Info: Exploring node
└   branch_and_bound_node.ix = 123
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112175
┌ Info: Price and cut time (b-and-b)
└   t = 0.0623227
┌ Info: current bounds
│   node_ix = 123
│   lb = 1.1498639052451616
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 189
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9442
└   sum(fire_plans.plans_per_fire) = 6213
┌ Info: Time check
└   time() - start_time = 50.80200004577637
┌ Info: Exploring node
└   branch_and_bound_node.ix = 176
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0139115
┌ Info: Price and cut time (b-and-b)
└   t = 0.2294817
┌ Info: current bounds
│   node_ix = 176
│   lb = 1.1498639052451616
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 190
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9483
└   sum(fire_plans.plans_per_fire) = 6238
┌ Info: Time check
└   time() - start_time = 51.051000118255615
┌ Info: Exploring node
└   branch_and_bound_node.ix = 177
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0120067
┌ Info: Price and cut time (b-and-b)
└   t = 0.0567332
┌ Info: current bounds
│   node_ix = 177
│   lb = 1.1498774428227223
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 191
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9508
└   sum(fire_plans.plans_per_fire) = 6246
┌ Info: Time check
└   time() - start_time = 51.13499999046326
┌ Info: Exploring node
└   branch_and_bound_node.ix = 166
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112
┌ Info: Price and cut time (b-and-b)
└   t = 0.1083785
┌ Info: current bounds
│   node_ix = 166
│   lb = 1.1498774428227223
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 192
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9522
└   sum(fire_plans.plans_per_fire) = 6259
┌ Info: Time check
└   time() - start_time = 51.25200009346008
┌ Info: Exploring node
└   branch_and_bound_node.ix = 167
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 3, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110991
┌ Info: Price and cut time (b-and-b)
└   t = 0.0898464
┌ Info: current bounds
│   node_ix = 167
│   lb = 1.1498889314710696
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 193
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9567
└   sum(fire_plans.plans_per_fire) = 6273
┌ Info: Time check
└   time() - start_time = 51.366000175476074
┌ Info: Exploring node
└   branch_and_bound_node.ix = 206
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0113473
┌ Info: Price and cut time (b-and-b)
└   t = 0.0991385
┌ Info: current bounds
│   node_ix = 206
│   lb = 1.1498889314710696
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 194
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9593
└   sum(fire_plans.plans_per_fire) = 6291
┌ Info: Time check
└   time() - start_time = 51.48100018501282
┌ Info: Exploring node
└   branch_and_bound_node.ix = 207
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0111911
┌ Info: Price and cut time (b-and-b)
└   t = 0.0700748
┌ Info: current bounds
│   node_ix = 207
│   lb = 1.1499704131091995
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 195
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9621
└   sum(fire_plans.plans_per_fire) = 6304
┌ Info: Time check
└   time() - start_time = 51.568000078201294
┌ Info: Exploring node
└   branch_and_bound_node.ix = 148
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0106767
┌ Info: Price and cut time (b-and-b)
└   t = 0.0726219
┌ Info: current bounds
│   node_ix = 148
│   lb = 1.1499704131091995
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 196
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9660
└   sum(fire_plans.plans_per_fire) = 6315
┌ Info: Time check
└   time() - start_time = 51.65700006484985
┌ Info: Exploring node
└   branch_and_bound_node.ix = 149
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 0, "less_than_or_equal")
│     FireDemandBranchingRule(1, 7, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0117425
┌ Info: Price and cut time (b-and-b)
└   t = 0.0719576
┌ Info: current bounds
│   node_ix = 149
│   lb = 1.1500825433494315
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 197
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9671
└   sum(fire_plans.plans_per_fire) = 6325
┌ Info: Time check
└   time() - start_time = 51.74500012397766
┌ Info: Exploring node
└   branch_and_bound_node.ix = 156
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 0, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0118923
┌ Info: Price and cut time (b-and-b)
└   t = 0.079697
┌ Info: current bounds
│   node_ix = 156
│   lb = 1.1500825433494315
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 198
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9691
└   sum(fire_plans.plans_per_fire) = 6342
┌ Info: Time check
└   time() - start_time = 51.842000007629395
┌ Info: Exploring node
└   branch_and_bound_node.ix = 157
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 8, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0124603
┌ Info: Price and cut time (b-and-b)
└   t = 0.1335942
┌ Info: current bounds
│   node_ix = 157
│   lb = 1.15009257886156
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 199
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9731
└   sum(fire_plans.plans_per_fire) = 6365
┌ Info: Time check
└   time() - start_time = 51.992000102996826
┌ Info: Exploring node
└   branch_and_bound_node.ix = 208
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0116103
┌ Info: Price and cut time (b-and-b)
└   t = 0.077936
┌ Info: current bounds
│   node_ix = 208
│   lb = 1.15009257886156
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 200
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9764
└   sum(fire_plans.plans_per_fire) = 6376
┌ Info: Time check
└   time() - start_time = 52.087000131607056
┌ Info: Exploring node
└   branch_and_bound_node.ix = 209
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 3, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 5, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0112481
┌ Info: Price and cut time (b-and-b)
└   t = 0.1142634
┌ Info: current bounds
│   node_ix = 209
│   lb = 1.1501420420324961
└   ub = 1.1501420420324961
┌ Info: number of nodes
│   node_explored_count = 201
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9801
└   sum(fire_plans.plans_per_fire) = 6389
┌ Info: Time check
└   time() - start_time = 52.20300006866455
┌ Info: Solved to tolerance
│   min_lb = 1.1510016808783436
└   ub = 1.1501420420324961
