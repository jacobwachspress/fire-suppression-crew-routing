[ Info: Initializing data structures
┌ Info: Checkpoint after initializing data structures
└   time() - start_time = 1.375
┌ Warning: Node with no parent
│   i = 1
└ @ Main C:\Users\jacob\Coding\MIT\ihc_routing\BranchAndPrice.jl:127
┌ Info: Exploring node
└   branch_and_bound_node.ix = 1
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules = FireDemandBranchingRule[]
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0084019
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 32.2078701
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 4, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 1
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0   1  15  4  0  0
│      0   0   0  7  6  6   6   4   3   1   0  0  0  0
│     10   1   0  0  0  0   0   0   0   0   0  0  0  0
│      6  19  20  7  1  0   0   0   0   0   1  1  0  0
│      0   0   0  3  6  6  10  12  13  13   2  1  0  0
└      6   1   1  0  1  1   0   0   0   1   1  0  0  0
┌ Info: Price and cut time (heuristic)
└   t = 1.0008701
┌ Info: found sol
│   t = 0.2416463
│   obj = 2.741738301787329
└   obj_bound = 2.741738301787329
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   2  16  5  1  1
│      1   1   1  8  7  7   7   5   4   2   1  1  1  1
│     11   2   1  1  1  1   1   1   1   1   1  1  1  1
│      7  20  21  8  2  1   1   1   1   1   2  2  1  1
│      1   1   1  4  7  7  11  13  14  14   3  2  1  1
└      7   2   2  1  2  2   1   1   1   2   2  1  1  1
┌ Info: Price and cut time (heuristic)
└   t = 3.9564722
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.9643018
│   obj = 2.737906889372606
└   obj_bound = 2.7376364283181864
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2  2  2  2   2   2   2   3  17  6  2  2
│      2   2   2  9  8  8   8   6   5   3   2  2  2  2
│     12   3   2  2  2  2   2   2   2   2   2  2  2  2
│      8  21  22  9  3  2   2   2   2   2   3  3  2  2
│      2   2   2  5  8  8  12  14  15  15   4  3  2  2
└      8   3   3  2  3  3   2   2   2   3   3  2  2  2
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 18
┌ Info: Price and cut time (heuristic)
└   t = 7.473013
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 4.9526086
│   obj = 2.731331657304532
└   obj_bound = 2.7310859283185063
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      3   3   3   3  3  3   3   3   3   4  18  7  3  3
│      3   3   3  10  9  9   9   7   6   4   3  3  3  3
│     13   4   3   3  3  3   3   3   3   3   3  3  3  3
│      9  22  23  10  4  3   3   3   3   3   4  4  3  3
│      3   3   3   6  9  9  13  15  16  16   5  4  3  3
└      9   4   4   3  4  4   3   3   3   4   4  3  3  3
┌ Info: Price and cut time (heuristic)
└   t = 3.5465961
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 3.497985
│   obj = 2.731331657304532
└   obj_bound = 2.731331657304532
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      4   4   4   4   4   4   4   4   4   5  19  8  4  4
│      4   4   4  11  10  10  10   8   7   5   4  4  4  4
│     14   5   4   4   4   4   4   4   4   4   4  4  4  4
│     10  23  24  11   5   4   4   4   4   4   5  5  4  4
│      4   4   4   7  10  10  14  16  17  17   6  5  4  4
└     10   5   5   4   5   5   4   4   4   5   5  4  4  4
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (heuristic)
└   t = 8.1874619
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 5.1600636
│   obj = 2.731331657304532
└   obj_bound = 2.7312411490447945
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.731331657304532
┌ Info: current bounds
│   node_ix = 1
│   lb = 2.702656680388751
└   ub = 2.731331657304532
┌ Info: number of nodes
│   node_explored_count = 1
└   length(nodes) = 3
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3063
└   sum(fire_plans.plans_per_fire) = 1555
┌ Info: Time check
└   time() - start_time = 73.86800003051758
┌ Info: Exploring node
└   branch_and_bound_node.ix = 2
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0723846
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 11
┌ Info: Price and cut time (b-and-b)
└   t = 8.7667201
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 2
│   lb = 2.702656680388751
└   ub = 2.731331657304532
┌ Info: number of nodes
│   node_explored_count = 2
└   length(nodes) = 5
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3195
└   sum(fire_plans.plans_per_fire) = 1745
┌ Info: Time check
└   time() - start_time = 82.71600008010864
┌ Info: Exploring node
└   branch_and_bound_node.ix = 3
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.092356
┌ Info: Price and cut time (b-and-b)
└   t = 8.1963634
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 11, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 11, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 3
│   lb = 2.707442422296144
└   ub = 2.731331657304532
┌ Info: number of nodes
│   node_explored_count = 3
└   length(nodes) = 7
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3523
└   sum(fire_plans.plans_per_fire) = 1919
┌ Info: Time check
└   time() - start_time = 91.03200006484985
┌ Info: Exploring node
└   branch_and_bound_node.ix = 4
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0583056
┌ Info: Price and cut time (b-and-b)
└   t = 4.5325438
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 4
│   lb = 2.707442422296144
└   ub = 2.731331657304532
┌ Info: number of nodes
│   node_explored_count = 4
└   length(nodes) = 9
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3773
└   sum(fire_plans.plans_per_fire) = 2035
┌ Info: Time check
└   time() - start_time = 95.64599990844727
┌ Info: Exploring node
└   branch_and_bound_node.ix = 5
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1689497
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.2276412
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 5
│   lb = 2.7074453337661017
└   ub = 2.731331657304532
┌ Info: number of nodes
│   node_explored_count = 5
└   length(nodes) = 11
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 3838
└   sum(fire_plans.plans_per_fire) = 2121
┌ Info: Time check
└   time() - start_time = 99.05800008773804
┌ Info: Exploring node
└   branch_and_bound_node.ix = 10
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0546406
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 2.5055267
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 10
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  5  16  2  0  0
│      0   0   1  8  5  5   6   5   4  1   0  0  0  0
│     10   1   0  0  0  0   0   0   0  0   0  0  0  0
│      6  19  20  2  1  0   0   0   0  1   1  0  0  0
│      0   0   1  7  7  7  10  11  12  9   1  0  0  0
└      5   1   0  0  1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.0971211
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.140107
│   obj = 2.7313316573045316
└   obj_bound = 2.7313316573045316
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   6  17  3  1  1
│      1   1   2  9  6  6   7   6   5   2   1  1  1  1
│     11   2   1  1  1  1   1   1   1   1   1  1  1  1
│      7  20  21  3  2  1   1   1   1   2   2  1  1  1
│      1   1   2  8  8  8  11  12  13  10   2  1  1  1
└      6   2   1  1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.4052379
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.8581689
│   obj = 2.7313316573045316
└   obj_bound = 2.7313316573045316
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   7  18  4  2  2
│      2   2   3  10  7  7   8   7   6   3   2  2  2  2
│     12   3   2   2  2  2   2   2   2   2   2  2  2  2
│      8  21  22   4  3  2   2   2   2   3   3  2  2  2
│      2   2   3   9  9  9  12  13  14  11   3  2  2  2
└      7   3   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.9551303
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 2.4862156
│   obj = 2.7313316573045325
└   obj_bound = 2.7313316573045325
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7313316573045316
┌ Info: current bounds
│   node_ix = 10
│   lb = 2.7074453337661017
└   ub = 2.7313316573045316
┌ Info: number of nodes
│   node_explored_count = 6
└   length(nodes) = 13
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4522
└   sum(fire_plans.plans_per_fire) = 2488
┌ Info: Time check
└   time() - start_time = 112.1819999217987
┌ Info: Exploring node
└   branch_and_bound_node.ix = 11
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0623115
┌ Info: Price and cut time (b-and-b)
└   t = 7.0598132
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 11
│   lb = 2.70751117086363
└   ub = 2.7313316573045316
┌ Info: number of nodes
│   node_explored_count = 7
└   length(nodes) = 15
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4638
└   sum(fire_plans.plans_per_fire) = 2641
┌ Info: Time check
└   time() - start_time = 119.31399989128113
┌ Info: Exploring node
└   branch_and_bound_node.ix = 12
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0488086
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 4.3811288
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 12
│   lb = 2.70751117086363
└   ub = 2.7313316573045316
┌ Info: number of nodes
│   node_explored_count = 8
└   length(nodes) = 17
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4809
└   sum(fire_plans.plans_per_fire) = 2759
┌ Info: Time check
└   time() - start_time = 123.76600003242493
┌ Info: Exploring node
└   branch_and_bound_node.ix = 13
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1025264
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 3.9863791
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 13
│   lb = 2.707588958313234
└   ub = 2.7313316573045316
┌ Info: number of nodes
│   node_explored_count = 9
└   length(nodes) = 19
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 4889
└   sum(fire_plans.plans_per_fire) = 2847
┌ Info: Time check
└   time() - start_time = 127.86400008201599
┌ Info: Exploring node
└   branch_and_bound_node.ix = 14
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0520334
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 4.9503772
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 14
│   lb = 2.707588958313234
└   ub = 2.7313316573045316
┌ Info: number of nodes
│   node_explored_count = 10
└   length(nodes) = 21
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5025
└   sum(fire_plans.plans_per_fire) = 2986
┌ Info: Time check
└   time() - start_time = 132.8840000629425
┌ Info: Exploring node
└   branch_and_bound_node.ix = 15
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0965961
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.334429
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 15
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0   0   0  5  15  2  0  0
│      0   0   1   5  4  4   6   6   7  1   0  0  0  0
│     10   2   0   0  0  0   0   0   0  0   0  0  0  0
│      7  18  19   2  1  0   0   0   0  1   1  0  0  0
│      0   0   1  10  8  8  10  10  10  9   1  0  0  0
└      5   1   0   0  1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.8909133
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3359178
│   obj = 2.7313316573045316
└   obj_bound = 2.7313316573045316
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1   6  16  3  1  1
│      1   1   2   6  5  5   7   7   8   2   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  19  20   3  2  1   1   1   1   2   2  1  1  1
│      1   1   2  11  9  9  11  11  11  10   2  1  1  1
└      6   2   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.8864276
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.7741038
│   obj = 2.725287287914408
└   obj_bound = 2.725287287914408
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   7  17  4  2  2
│      2   2   3   7   6   6   8   8   9   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   3   2   2   2   2   3   3  2  2  2
│      2   2   3  12  10  10  12  12  12  11   3  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 3.36535
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.6985294
│   obj = 2.720152070272304
└   obj_bound = 2.719996443212917
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      3   3   3   3   3   3   3   3   3   8  18  5  3  3
│      3   3   4   8   7   7   9   9  10   4   3  3  3  3
│     13   5   3   3   3   3   3   3   3   3   3  3  3  3
│     10  21  22   5   4   3   3   3   3   4   4  3  3  3
│      3   3   4  13  11  11  13  13  13  12   4  3  3  3
└      8   4   3   3   4   4   3   3   3   4   5  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.608882
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.256393
│   obj = 2.7201520702723045
└   obj_bound = 2.7199324938483604
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      4   4   4   4   4   4   4   4   4   9  19  6  4  4
│      4   4   5   9   8   8  10  10  11   5   4  4  4  4
│     14   6   4   4   4   4   4   4   4   4   4  4  4  4
│     11  22  23   6   5   4   4   4   4   5   5  4  4  4
│      4   4   5  14  12  12  14  14  14  13   5  4  4  4
└      9   5   4   4   5   5   4   4   4   5   6  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.1279333
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 2.4700383
│   obj = 2.720152070272304
└   obj_bound = 2.720085703900578
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.720152070272304
┌ Info: current bounds
│   node_ix = 15
│   lb = 2.70759672538787
└   ub = 2.720152070272304
┌ Info: number of nodes
│   node_explored_count = 11
└   length(nodes) = 23
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5851
└   sum(fire_plans.plans_per_fire) = 3501
┌ Info: Time check
└   time() - start_time = 155.93700003623962
┌ Info: Exploring node
└   branch_and_bound_node.ix = 22
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0539659
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 4.26507
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 22
│   lb = 2.70759672538787
└   ub = 2.720152070272304
┌ Info: number of nodes
│   node_explored_count = 12
└   length(nodes) = 25
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 5884
└   sum(fire_plans.plans_per_fire) = 3611
┌ Info: Time check
└   time() - start_time = 160.29699993133545
┌ Info: Exploring node
└   branch_and_bound_node.ix = 23
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.06986
┌ Info: Price and cut time (b-and-b)
└   t = 6.564846
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 23
│   lb = 2.707627080087163
└   ub = 2.720152070272304
┌ Info: number of nodes
│   node_explored_count = 13
└   length(nodes) = 27
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6106
└   sum(fire_plans.plans_per_fire) = 3739
┌ Info: Time check
└   time() - start_time = 166.94899988174438
┌ Info: Exploring node
└   branch_and_bound_node.ix = 24
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0605176
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 4.3050967
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 24
│   lb = 2.707627080087163
└   ub = 2.720152070272304
┌ Info: number of nodes
│   node_explored_count = 14
└   length(nodes) = 29
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6159
└   sum(fire_plans.plans_per_fire) = 3831
┌ Info: Time check
└   time() - start_time = 171.3289999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 25
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0668914
┌ Info: Price and cut time (b-and-b)
└   t = 6.4125568
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 25
│   lb = 2.7076724287128835
└   ub = 2.720152070272304
┌ Info: number of nodes
│   node_explored_count = 15
└   length(nodes) = 31
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6208
└   sum(fire_plans.plans_per_fire) = 3963
┌ Info: Time check
└   time() - start_time = 177.8199999332428
┌ Info: Exploring node
└   branch_and_bound_node.ix = 18
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0522139
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 2.8357577
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 18
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  5  16  2  0  0
│      0   0   1  8  6  6   6   4   4  1   0  0  0  0
│     10   2   0  0  0  0   0   0   0  0   0  0  0  0
│      7  18  19  2  1  0   0   0   0  1   1  0  0  0
│      0   0   1  6  6  6  11  13  13  9   1  0  0  0
└      5   2   0  0  1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.9558958
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1173725
│   obj = 2.720152070272304
└   obj_bound = 2.7201300302472387
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   6  17  3  1  1
│      1   1   2  9  7  7   7   5   5   2   1  1  1  1
│     11   3   1  1  1  1   1   1   1   1   1  1  1  1
│      8  19  20  3  2  1   1   1   1   2   2  1  1  1
│      1   1   2  7  7  7  12  14  14  10   2  1  1  1
└      6   3   1  1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.2512096
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2506145
│   obj = 2.7200298994670895
└   obj_bound = 2.720029899467089
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   7  18  4  2  2
│      2   2   3  10  8  8   8   6   6   3   2  2  2  2
│     12   4   2   2  2  2   2   2   2   2   2  2  2  2
│      9  20  21   4  3  2   2   2   2   3   3  2  2  2
│      2   2   3   8  8  8  13  15  15  11   3  2  2  2
└      7   4   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.964145
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5168613
│   obj = 2.720029899467089
└   obj_bound = 2.7200298994670886
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      3   3   3   3  3  3   3   3   3   8  19  5  3  3
│      3   3   4  11  9  9   9   7   7   4   3  3  3  3
│     13   5   3   3  3  3   3   3   3   3   3  3  3  3
│     10  21  22   5  4  3   3   3   3   4   4  3  3  3
│      3   3   4   9  9  9  14  16  16  12   4  3  3  3
└      8   5   3   3  4  4   3   3   3   4   5  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 2.7271732
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.2242997
│   obj = 2.7200298994670895
└   obj_bound = 2.7197886280664028
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7200298994670895
┌ Info: current bounds
│   node_ix = 18
│   lb = 2.7076724287128835
└   ub = 2.7200298994670895
┌ Info: number of nodes
│   node_explored_count = 16
└   length(nodes) = 33
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6783
└   sum(fire_plans.plans_per_fire) = 4419
┌ Info: Time check
└   time() - start_time = 192.52600002288818
┌ Info: Exploring node
└   branch_and_bound_node.ix = 19
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0813996
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.6365909
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 19
│   lb = 2.7077381544439545
└   ub = 2.7200298994670895
┌ Info: number of nodes
│   node_explored_count = 17
└   length(nodes) = 35
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 6897
└   sum(fire_plans.plans_per_fire) = 4542
┌ Info: Time check
└   time() - start_time = 197.25799989700317
┌ Info: Exploring node
└   branch_and_bound_node.ix = 32
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.055085
┌ Info: Price and cut time (b-and-b)
└   t = 6.5319343
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 32
│   lb = 2.7077381544439545
└   ub = 2.7200298994670895
┌ Info: number of nodes
│   node_explored_count = 18
└   length(nodes) = 37
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7086
└   sum(fire_plans.plans_per_fire) = 4656
┌ Info: Time check
└   time() - start_time = 203.85400009155273
┌ Info: Exploring node
└   branch_and_bound_node.ix = 33
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1010305
┌ Info: Price and cut time (b-and-b)
└   t = 6.4274457
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 33
│   lb = 2.7077672939765614
└   ub = 2.7200298994670895
┌ Info: number of nodes
│   node_explored_count = 19
└   length(nodes) = 39
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7151
└   sum(fire_plans.plans_per_fire) = 4733
┌ Info: Time check
└   time() - start_time = 210.4029998779297
┌ Info: Exploring node
└   branch_and_bound_node.ix = 16
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0632366
┌ Info: Price and cut time (b-and-b)
└   t = 4.1456834
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 16
│   lb = 2.7077672939765614
└   ub = 2.7200298994670895
┌ Info: number of nodes
│   node_explored_count = 20
└   length(nodes) = 41
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7284
└   sum(fire_plans.plans_per_fire) = 4833
┌ Info: Time check
└   time() - start_time = 214.63299989700317
┌ Info: Exploring node
└   branch_and_bound_node.ix = 17
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0738432
┌ Info: Price and cut time (b-and-b)
└   t = 5.7653407
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 17
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0  0   0  5  15  2  0  0
│      0   0   1  8  3  3   6  7   6  1   0  0  0  0
│     10   1   0  0  0  0   0  0   0  0   0  0  0  0
│      6  19  20  2  0  0   0  0   0  1   1  0  0  0
│      0   0   1  6  9  8  10  9  10  9   1  0  0  0
└      5   1   0  0  1  1   0  0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.8262662
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1298414
│   obj = 2.7200298994670895
└   obj_bound = 2.7200298994670895
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1   1  1   1   1   1   6  16  3  1  1
│      1   1   2  9   4  4   7   8   7   2   1  1  1  1
│     11   2   1  1   1  1   1   1   1   1   1  1  1  1
│      7  20  21  3   1  1   1   1   1   2   2  1  1  1
│      1   1   2  7  10  9  11  10  11  10   2  1  1  1
└      6   2   1  1   2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.2449694
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3780424
│   obj = 2.720029899467089
└   obj_bound = 2.71984416463395
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   7  17  4  2  2
│      2   2   3  10   5   5   8   9   8   3   2  2  2  2
│     12   3   2   2   2   2   2   2   2   2   2  2  2  2
│      8  21  22   4   2   2   2   2   2   3   3  2  2  2
│      2   2   3   8  11  10  12  11  12  11   3  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.9589278
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5039249
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      3   3   3   3   3   3   3   3   3   8  18  5  3  3
│      3   3   4  11   6   6   9  10   9   4   3  3  3  3
│     13   4   3   3   3   3   3   3   3   3   3  3  3  3
│      9  22  23   5   3   3   3   3   3   4   4  3  3  3
│      3   3   4   9  12  11  13  12  13  12   4  3  3  3
└      8   4   3   3   4   4   3   3   3   4   5  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 3.910041
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.7839706
│   obj = 2.7180682556691522
└   obj_bound = 2.7180665159037436
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      4   4   4   4   4   4   4   4   4   9  19  6  4  4
│      4   4   5  12   7   7  10  11  10   5   4  4  4  4
│     14   5   4   4   4   4   4   4   4   4   4  4  4  4
│     10  23  24   6   4   4   4   4   4   5   5  4  4  4
│      4   4   5  10  13  12  14  13  14  13   5  4  4  4
└      9   5   4   4   5   5   4   4   4   5   6  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 6.9899256
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.1597011
│   obj = 2.718068255669152
└   obj_bound = 2.718068255669152
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 17
│   lb = 2.7078908932500694
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 21
└   length(nodes) = 43
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7969
└   sum(fire_plans.plans_per_fire) = 5547
┌ Info: Time check
└   time() - start_time = 243.50600004196167
┌ Info: Exploring node
└   branch_and_bound_node.ix = 30
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0564627
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 1.4387382
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 30
│   lb = 2.7078908932500694
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 22
└   length(nodes) = 45
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 7996
└   sum(fire_plans.plans_per_fire) = 5580
┌ Info: Time check
└   time() - start_time = 245.0130000114441
┌ Info: Exploring node
└   branch_and_bound_node.ix = 31
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0689198
┌ Info: Price and cut time (b-and-b)
└   t = 7.2655356
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 31
│   lb = 2.7079967539181715
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 23
└   length(nodes) = 47
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8107
└   sum(fire_plans.plans_per_fire) = 5687
┌ Info: Time check
└   time() - start_time = 252.3619999885559
┌ Info: Exploring node
└   branch_and_bound_node.ix = 40
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0506264
┌ Info: Price and cut time (b-and-b)
└   t = 4.9383913
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 40
│   lb = 2.7079967539181715
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 24
└   length(nodes) = 49
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8154
└   sum(fire_plans.plans_per_fire) = 5794
┌ Info: Time check
└   time() - start_time = 257.37400007247925
┌ Info: Exploring node
└   branch_and_bound_node.ix = 41
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1259045
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 22
┌ Info: Price and cut time (b-and-b)
└   t = 9.8947018
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 41
│   lb = 2.7080719510305435
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 25
└   length(nodes) = 51
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8328
└   sum(fire_plans.plans_per_fire) = 5938
┌ Info: Time check
└   time() - start_time = 267.42400002479553
┌ Info: Exploring node
└   branch_and_bound_node.ix = 44
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0545029
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 8
┌ Info: Price and cut time (b-and-b)
└   t = 6.9754072
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 44
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0  0  0  6  15  2  0  0
│      0   0   0  5  3  4   7  7  7  0   0  0  0  0
│     10   2   0  0  0  0   0  0  0  0   0  0  0  0
│      7  18  19  2  1  1   0  0  0  0   0  0  0  0
│      0   0   1  9  9  8  10  9  9  9   2  0  0  0
└      5   1   0  0  1  1   0  0  0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.6261384
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2396786
│   obj = 2.7180682556691522
└   obj_bound = 2.7179052749068937
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1  1   1   1   1   7  16  3  1  1
│      1   1   1   6   4  5   8   8   8   1   1  1  1  1
│     11   3   1   1   1  1   1   1   1   1   1  1  1  1
│      8  19  20   3   2  2   1   1   1   1   1  1  1  1
│      1   1   2  10  10  9  11  10  10  10   3  1  1  1
└      6   2   1   1   2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.7388005
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.192394
│   obj = 2.7180682556691522
└   obj_bound = 2.7180497754108033
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   8  17  4  2  2
│      2   2   2   7   5   6   9   9   9   2   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   3   3   2   2   2   2   2  2  2  2
│      2   2   3  11  11  10  12  11  11  11   4  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.6798431
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.438138
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 44
│   lb = 2.7080719510305435
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 26
└   length(nodes) = 53
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8830
└   sum(fire_plans.plans_per_fire) = 6384
┌ Info: Time check
└   time() - start_time = 282.01200008392334
┌ Info: Exploring node
└   branch_and_bound_node.ix = 45
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0591338
┌ Info: Price and cut time (b-and-b)
└   t = 3.5350332
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 9, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 45
│   lb = 2.708089514734806
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 27
└   length(nodes) = 55
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 8935
└   sum(fire_plans.plans_per_fire) = 6444
┌ Info: Time check
└   time() - start_time = 285.61500000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 28
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0627096
┌ Info: Price and cut time (b-and-b)
└   t = 3.6968773
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 28
│   lb = 2.708089514734806
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 28
└   length(nodes) = 57
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9004
└   sum(fire_plans.plans_per_fire) = 6515
┌ Info: Time check
└   time() - start_time = 289.38899993896484
┌ Info: Exploring node
└   branch_and_bound_node.ix = 29
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0803295
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 7.5519175
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 29
│   lb = 2.7081258733394797
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 29
└   length(nodes) = 59
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9124
└   sum(fire_plans.plans_per_fire) = 6610
┌ Info: Time check
└   time() - start_time = 297.0350000858307
┌ Info: Exploring node
└   branch_and_bound_node.ix = 20
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0627504
┌ Info: Price and cut time (b-and-b)
└   t = 5.9880545
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 20
│   lb = 2.7081258733394797
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 30
└   length(nodes) = 61
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9252
└   sum(fire_plans.plans_per_fire) = 6731
┌ Info: Time check
└   time() - start_time = 303.11299991607666
┌ Info: Exploring node
└   branch_and_bound_node.ix = 21
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0870241
┌ Info: Price and cut time (b-and-b)
└   t = 3.4663818
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 21
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   0   0   4  16  2  0  0
│      0   0   1  5  7  6  7   4   4   1   0  0  0  0
│     10   2   0  0  0  0  0   0   0   0   0  0  0  0
│      7  18  19  2  1  0  0   0   0   1   1  0  0  0
│      0   0   1  9  5  5  9  12  12  10   1  0  0  0
└      5   2   0  0  1  1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.6635669
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1402925
│   obj = 2.7180682556691522
└   obj_bound = 2.7180603163623154
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1   5  17  3  1  1
│      1   1   2   6  8  7   8   5   5   2   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  19  20   3  2  1   1   1   1   2   2  1  1  1
│      1   1   2  10  6  6  10  13  13  11   2  1  1  1
└      6   3   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.4277539
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3034195
│   obj = 2.718068255669152
└   obj_bound = 2.7178017702899133
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   6  18  4  2  2
│      2   2   3   7  9  8   9   6   6   3   2  2  2  2
│     12   4   2   2  2  2   2   2   2   2   2  2  2  2
│      9  20  21   4  3  2   2   2   2   3   3  2  2  2
│      2   2   3  11  7  7  11  14  14  12   3  2  2  2
└      7   4   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.5620997
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.7377318
│   obj = 2.7180682556691522
└   obj_bound = 2.7178880806094674
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 21
│   lb = 2.708157400228637
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 31
└   length(nodes) = 63
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9880
└   sum(fire_plans.plans_per_fire) = 7067
┌ Info: Time check
└   time() - start_time = 314.19000005722046
┌ Info: Exploring node
└   branch_and_bound_node.ix = 42
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0574655
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.118538
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 42
│   lb = 2.708157400228637
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 32
└   length(nodes) = 65
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9936
└   sum(fire_plans.plans_per_fire) = 7150
┌ Info: Time check
└   time() - start_time = 317.37599992752075
┌ Info: Exploring node
└   branch_and_bound_node.ix = 43
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0735258
┌ Info: Price and cut time (b-and-b)
└   t = 7.2652716
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 43
│   lb = 2.7081938122972713
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 33
└   length(nodes) = 67
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 9984
└   sum(fire_plans.plans_per_fire) = 7255
┌ Info: Time check
└   time() - start_time = 324.74000000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 38
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.060225
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 9
┌ Info: Price and cut time (b-and-b)
└   t = 6.9199491
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 38
│   lb = 2.7081938122972713
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 34
└   length(nodes) = 69
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 10201
└   sum(fire_plans.plans_per_fire) = 7403
┌ Info: Time check
└   time() - start_time = 331.7339999675751
┌ Info: Exploring node
└   branch_and_bound_node.ix = 39
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0788999
┌ Info: Price and cut time (b-and-b)
└   t = 3.8064086
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 39
│   lb = 2.708204188351736
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 35
└   length(nodes) = 71
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 10258
└   sum(fire_plans.plans_per_fire) = 7470
┌ Info: Time check
└   time() - start_time = 335.64400005340576
┌ Info: Exploring node
└   branch_and_bound_node.ix = 8
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0631935
┌ Info: Price and cut time (b-and-b)
└   t = 4.3275775
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 8
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   0   0   5  15  2  0  0
│      0   1   1  7  5  5  9   4   3   0   1  0  0  0
│     10   1   0  0  0  0  0   0   0   0   0  0  0  0
│      6  19  20  2  1  0  0   0   0   0   1  0  0  0
│      0   0   1  7  7  7  6  12  13  10   1  0  0  0
└      5   1   0  0  1  1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.7532977
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1801366
│   obj = 2.7180682556691527
└   obj_bound = 2.7179233219574908
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   6  16  3  1  1
│      1   2   2  8  6  6  10   5   4   1   2  1  1  1
│     11   2   1  1  1  1   1   1   1   1   1  1  1  1
│      7  20  21  3  2  1   1   1   1   1   2  1  1  1
│      1   1   2  8  8  8   7  13  14  11   2  1  1  1
└      6   2   1  1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.3872889
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.211005
│   obj = 2.7180682556691522
└   obj_bound = 2.717808840832962
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2  2  2  2   2   2   2   7  17  4  2  2
│      2   3   3  9  7  7  11   6   5   2   3  2  2  2
│     12   3   2  2  2  2   2   2   2   2   2  2  2  2
│      8  21  22  4  3  2   2   2   2   2   3  2  2  2
│      2   2   3  9  9  9   8  14  15  12   3  2  2  2
└      7   3   2  2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.6238063
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.7742129
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691527
┌ Info: current bounds
│   node_ix = 8
│   lb = 2.708204188351736
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 36
└   length(nodes) = 73
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 11105
└   sum(fire_plans.plans_per_fire) = 7939
┌ Info: Time check
└   time() - start_time = 350.80999994277954
┌ Info: Exploring node
└   branch_and_bound_node.ix = 9
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1219239
┌ Info: Price and cut time (b-and-b)
└   t = 4.147477
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 9
│   lb = 2.708215973175757
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 37
└   length(nodes) = 75
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 11158
└   sum(fire_plans.plans_per_fire) = 8017
┌ Info: Time check
└   time() - start_time = 355.09100008010864
┌ Info: Exploring node
└   branch_and_bound_node.ix = 48
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0612545
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 8
┌ Info: Price and cut time (b-and-b)
└   t = 6.0466437
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 48
│   lb = 2.708215973175757
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 38
└   length(nodes) = 77
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 11241
└   sum(fire_plans.plans_per_fire) = 8136
┌ Info: Time check
└   time() - start_time = 361.22499990463257
┌ Info: Exploring node
└   branch_and_bound_node.ix = 49
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.083421
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 1.4739742
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 49
│   lb = 2.708224688157981
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 39
└   length(nodes) = 79
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 11273
└   sum(fire_plans.plans_per_fire) = 8164
┌ Info: Time check
└   time() - start_time = 362.7869999408722
┌ Info: Exploring node
└   branch_and_bound_node.ix = 62
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0721247
┌ Info: Price and cut time (b-and-b)
└   t = 7.1953576
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 62
│   lb = 2.708224688157981
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 40
└   length(nodes) = 81
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 11509
└   sum(fire_plans.plans_per_fire) = 8273
┌ Info: Time check
└   time() - start_time = 370.0859999656677
┌ Info: Exploring node
└   branch_and_bound_node.ix = 63
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0979881
┌ Info: Price and cut time (b-and-b)
└   t = 4.8016786
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 63
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0   4  16  2  0  0
│      0   0   1  5  7  4   6   6   4   1   0  0  0  0
│     10   1   0  0  0  0   0   0   0   0   0  0  0  0
│      6  19  20  2  1  0   0   0   1   0   1  0  0  0
│      0   0   1  9  5  7  10  10  12  10   0  0  0  0
└      5   2   0  0  1  1   0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.6760401
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1407858
│   obj = 2.7180682556691522
└   obj_bound = 2.7179969594676137
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1   5  17  3  1  1
│      1   1   2   6  8  5   7   7   5   2   1  1  1  1
│     11   2   1   1  1  1   1   1   1   1   1  1  1  1
│      7  20  21   3  2  1   1   1   2   1   2  1  1  1
│      1   1   2  10  6  8  11  11  13  11   1  1  1  1
└      6   3   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.8493017
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2397254
│   obj = 2.718068255669152
└   obj_bound = 2.7178374738702873
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   6  18  4  2  2
│      2   2   3   7  9  6   8   8   6   3   2  2  2  2
│     12   3   2   2  2  2   2   2   2   2   2  2  2  2
│      8  21  22   4  3  2   2   2   3   2   3  2  2  2
│      2   2   3  11  7  9  12  12  14  12   2  2  2  2
└      7   4   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.0275886
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.7861659
│   obj = 2.7180682556691522
└   obj_bound = 2.717902977772967
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 63
│   lb = 2.708242541282352
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 41
└   length(nodes) = 83
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12009
└   sum(fire_plans.plans_per_fire) = 8641
┌ Info: Time check
└   time() - start_time = 384.4920001029968
┌ Info: Exploring node
└   branch_and_bound_node.ix = 74
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0933862
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.3213147
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 74
│   lb = 2.708242541282352
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 42
└   length(nodes) = 85
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12195
└   sum(fire_plans.plans_per_fire) = 8726
┌ Info: Time check
└   time() - start_time = 387.93300008773804
┌ Info: Exploring node
└   branch_and_bound_node.ix = 75
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0718894
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 8
┌ Info: Price and cut time (b-and-b)
└   t = 6.4969747
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 75
│   lb = 2.7082540215305007
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 43
└   length(nodes) = 87
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12247
└   sum(fire_plans.plans_per_fire) = 8860
┌ Info: Time check
└   time() - start_time = 394.5150001049042
┌ Info: Exploring node
└   branch_and_bound_node.ix = 70
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0574371
┌ Info: Price and cut time (b-and-b)
└   t = 4.1152866
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 70
│   lb = 2.7082540215305007
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 44
└   length(nodes) = 89
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12296
└   sum(fire_plans.plans_per_fire) = 8922
┌ Info: Time check
└   time() - start_time = 398.7130000591278
┌ Info: Exploring node
└   branch_and_bound_node.ix = 71
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0819971
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 4.164027
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 71
│   lb = 2.708350226273807
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 45
└   length(nodes) = 91
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12332
└   sum(fire_plans.plans_per_fire) = 9013
┌ Info: Time check
└   time() - start_time = 403.0720000267029
┌ Info: Exploring node
└   branch_and_bound_node.ix = 34
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.068593
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 4.6780422
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 34
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  5  16  2  0  0
│      0   0   1  9  5  3   5   4   7  1   0  0  0  0
│     10   1   0  0  0  0   0   0   0  0   0  0  0  0
│      6  19  20  2  2  0   0   0   0  0   0  0  0  0
│      0   0   1  6  6  9  11  13  10  9   1  0  0  0
└      5   2   0  0  1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.6459701
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1348318
│   obj = 2.7180682556691522
└   obj_bound = 2.7178116521828746
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1   1   1   1   1   6  17  3  1  1
│      1   1   2  10  6   4   6   5   8   2   1  1  1  1
│     11   2   1   1  1   1   1   1   1   1   1  1  1  1
│      7  20  21   3  3   1   1   1   1   1   1  1  1  1
│      1   1   2   7  7  10  12  14  11  10   2  1  1  1
└      6   3   1   1  2   2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.4087092
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2952864
│   obj = 2.7180682556691522
└   obj_bound = 2.71786698950582
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   2   7  18  4  2  2
│      2   2   3  11  7   5   7   6   9   3   2  2  2  2
│     12   3   2   2  2   2   2   2   2   2   2  2  2  2
│      8  21  22   4  4   2   2   2   2   2   2  2  2  2
│      2   2   3   8  8  11  13  15  12  11   3  2  2  2
└      7   4   2   2  3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.1149807
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3200582
│   obj = 2.718068255669152
└   obj_bound = 2.71783469847812
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 34
│   lb = 2.708350226273807
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 46
└   length(nodes) = 93
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 12978
└   sum(fire_plans.plans_per_fire) = 9399
┌ Info: Time check
└   time() - start_time = 417.40499997138977
┌ Info: Exploring node
└   branch_and_bound_node.ix = 35
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0793131
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 9.4572212
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 35
│   lb = 2.7084018677533406
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 47
└   length(nodes) = 95
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 13259
└   sum(fire_plans.plans_per_fire) = 9542
┌ Info: Time check
└   time() - start_time = 426.9489998817444
┌ Info: Exploring node
└   branch_and_bound_node.ix = 84
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0640152
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 3.5900208
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 84
│   lb = 2.7084018677533406
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 48
└   length(nodes) = 97
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 13307
└   sum(fire_plans.plans_per_fire) = 9613
┌ Info: Time check
└   time() - start_time = 430.6340000629425
┌ Info: Exploring node
└   branch_and_bound_node.ix = 85
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0738641
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 9.0048343
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 85
│   lb = 2.7084283007817733
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 49
└   length(nodes) = 99
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 13447
└   sum(fire_plans.plans_per_fire) = 9728
┌ Info: Time check
└   time() - start_time = 439.7279999256134
┌ Info: Exploring node
└   branch_and_bound_node.ix = 60
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0724
┌ Info: Price and cut time (b-and-b)
└   t = 4.8978042
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 60
│   lb = 2.7084283007817733
└   ub = 2.7180682556691522
┌ Info: number of nodes
│   node_explored_count = 50
└   length(nodes) = 101
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 13499
└   sum(fire_plans.plans_per_fire) = 9815
┌ Info: Time check
└   time() - start_time = 444.71399998664856
┌ Info: Exploring node
└   branch_and_bound_node.ix = 61
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0970362
┌ Info: Price and cut time (b-and-b)
└   t = 7.1114095
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 61
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   1   1   4  16  2  0  0
│      0   0   1  5  4  4  6  10   4   1   0  0  0  0
│     10   2   0  0  0  0  0   0   0   0   0  0  0  0
│      7  18  19  2  1  0  0   0   1   1   1  0  0  0
│      0   0   1  9  8  8  9   6  12  10   1  0  0  0
└      5   1   0  0  1  1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.1975683
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2085239
│   obj = 2.718068255669152
└   obj_bound = 2.71788706840461
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   2   2   5  17  3  1  1
│      1   1   2   6  5  5   7  11   5   2   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  19  20   3  2  1   1   1   2   2   2  1  1  1
│      1   1   2  10  9  9  10   7  13  11   2  1  1  1
└      6   2   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.257748
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2553498
│   obj = 2.7180682556691522
└   obj_bound = 2.7178429064849943
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   3   3   6  18  4  2  2
│      2   2   3   7   6   6   8  12   6   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   3   2   2   2   3   3   3  2  2  2
│      2   2   3  11  10  10  11   8  14  12   3  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.4879617
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.8358103
│   obj = 2.7180682556691522
└   obj_bound = 2.717948105727628
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.718068255669152
┌ Info: current bounds
│   node_ix = 61
│   lb = 2.708434265735131
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 51
└   length(nodes) = 103
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 14150
└   sum(fire_plans.plans_per_fire) = 10243
┌ Info: Time check
└   time() - start_time = 463.07299995422363
┌ Info: Exploring node
└   branch_and_bound_node.ix = 86
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1063637
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 4.561014
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 86
│   lb = 2.708434265735131
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 52
└   length(nodes) = 105
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 14182
└   sum(fire_plans.plans_per_fire) = 10333
┌ Info: Time check
└   time() - start_time = 467.75499987602234
┌ Info: Exploring node
└   branch_and_bound_node.ix = 87
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0884135
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 3.6507043
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 87
│   lb = 2.7084469347783853
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 53
└   length(nodes) = 107
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 14377
└   sum(fire_plans.plans_per_fire) = 10428
┌ Info: Time check
└   time() - start_time = 471.51399993896484
┌ Info: Exploring node
└   branch_and_bound_node.ix = 72
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0743565
┌ Info: Price and cut time (b-and-b)
└   t = 3.5036605
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 72
│   lb = 2.7084469347783853
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 54
└   length(nodes) = 109
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 14480
└   sum(fire_plans.plans_per_fire) = 10495
┌ Info: Time check
└   time() - start_time = 475.10199999809265
┌ Info: Exploring node
└   branch_and_bound_node.ix = 73
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0911476
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 11.7707571
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 73
│   lb = 2.708461721746637
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 55
└   length(nodes) = 111
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 14653
└   sum(fire_plans.plans_per_fire) = 10656
┌ Info: Time check
└   time() - start_time = 486.9909999370575
┌ Info: Exploring node
└   branch_and_bound_node.ix = 104
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0732916
┌ Info: Price and cut time (b-and-b)
└   t = 9.9658473
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 6, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 104
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0   0  0   0   0   0  5  15  2  0  0
│      0   0   1   3   2  6  10   6   7  1   0  0  0  0
│     10   2   0   0   0  0   0   0   0  0   0  0  0  0
│      7  18  19   2   1  0   0   0   0  1   1  0  0  0
│      0   0   1  11  10  6   7  10  10  9   1  0  0  0
└      5   1   0   0   1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.357084
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1395123
│   obj = 2.7180682556691522
└   obj_bound = 2.7178959121475623
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1  1   1   1   1   6  16  3  1  1
│      1   1   2   4   3  7  11   7   8   2   1  1  1  1
│     11   3   1   1   1  1   1   1   1   1   1  1  1  1
│      8  19  20   3   2  1   1   1   1   2   2  1  1  1
│      1   1   2  12  11  7   8  11  11  10   2  1  1  1
└      6   2   1   1   2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.5750542
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2856468
│   obj = 2.7180682556691522
└   obj_bound = 2.717895139792736
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   2   2   7  17  4  2  2
│      2   2   3   5   4  8  12   8   9   3   2  2  2  2
│     12   4   2   2   2  2   2   2   2   2   2  2  2  2
│      9  20  21   4   3  2   2   2   2   3   3  2  2  2
│      2   2   3  13  12  8   9  12  12  11   3  2  2  2
└      7   3   2   2   3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.3838046
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3978974
│   obj = 2.7180682556691522
└   obj_bound = 2.7178126068708917
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 104
│   lb = 2.708461721746637
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 56
└   length(nodes) = 113
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 15192
└   sum(fire_plans.plans_per_fire) = 11097
┌ Info: Time check
└   time() - start_time = 508.00499987602234
┌ Info: Exploring node
└   branch_and_bound_node.ix = 105
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0895499
┌ Info: Price and cut time (b-and-b)
└   t = 15.5344032
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 105
│   lb = 2.708515443859381
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 57
└   length(nodes) = 115
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 15272
└   sum(fire_plans.plans_per_fire) = 11295
┌ Info: Time check
└   time() - start_time = 523.6370000839233
┌ Info: Exploring node
└   branch_and_bound_node.ix = 90
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.063364
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 13
┌ Info: Price and cut time (b-and-b)
└   t = 4.5347113
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 90
│   lb = 2.708515443859381
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 58
└   length(nodes) = 117
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 15370
└   sum(fire_plans.plans_per_fire) = 11350
┌ Info: Time check
└   time() - start_time = 528.2579998970032
┌ Info: Exploring node
└   branch_and_bound_node.ix = 91
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.080845
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 18
┌ Info: Price and cut time (b-and-b)
└   t = 5.4707633
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 91
│   lb = 2.70855180038364
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 59
└   length(nodes) = 119
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 15455
└   sum(fire_plans.plans_per_fire) = 11421
┌ Info: Time check
└   time() - start_time = 533.835000038147
┌ Info: Exploring node
└   branch_and_bound_node.ix = 100
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0839172
┌ Info: Price and cut time (b-and-b)
└   t = 9.1367903
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 100
│   lb = 2.70855180038364
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 60
└   length(nodes) = 121
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 15569
└   sum(fire_plans.plans_per_fire) = 11562
┌ Info: Time check
└   time() - start_time = 543.0780000686646
┌ Info: Exploring node
└   branch_and_bound_node.ix = 101
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1199999
┌ Info: Price and cut time (b-and-b)
└   t = 8.8354678
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 101
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   1   1  4  16  2  0  0
│      0   0   1  5  4  7  6   6   4  1   0  0  0  0
│     10   2   0  0  0  0  0   0   0  0   0  0  0  0
│      7  18  19  2  1  0  0   0   1  1   1  0  0  0
│      0   0   1  9  8  4  9  10  12  9   1  0  0  0
└      5   2   0  0  1  1  0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.7307417
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1957878
│   obj = 2.7180682556691522
└   obj_bound = 2.717848301060161
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   2   2   5  17  3  1  1
│      1   1   2   6  5  8   7   7   5   2   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  19  20   3  2  1   1   1   2   2   2  1  1  1
│      1   1   2  10  9  5  10  11  13  10   2  1  1  1
└      6   3   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.1784651
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2494022
│   obj = 2.7180682556691522
└   obj_bound = 2.717868914867213
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   3   3   6  18  4  2  2
│      2   2   3   7   6  9   8   8   6   3   2  2  2  2
│     12   4   2   2   2  2   2   2   2   2   2  2  2  2
│      9  20  21   4   3  2   2   2   3   3   3  2  2  2
│      2   2   3  11  10  6  11  12  14  11   3  2  2  2
└      7   4   2   2   3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.7121729
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5332191
│   obj = 2.7180682556691522
└   obj_bound = 2.718068255669152
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 101
│   lb = 2.7086389292506583
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 61
└   length(nodes) = 123
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16057
└   sum(fire_plans.plans_per_fire) = 11985
┌ Info: Time check
└   time() - start_time = 561.8689999580383
┌ Info: Exploring node
└   branch_and_bound_node.ix = 66
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0631362
┌ Info: Price and cut time (b-and-b)
└   t = 4.4699261
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 66
│   lb = 2.7086389292506583
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 62
└   length(nodes) = 125
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16097
└   sum(fire_plans.plans_per_fire) = 12049
┌ Info: Time check
└   time() - start_time = 566.414999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 67
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0997417
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 4.5593367
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 67
│   lb = 2.7087136180009512
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 63
└   length(nodes) = 127
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16164
└   sum(fire_plans.plans_per_fire) = 12126
┌ Info: Time check
└   time() - start_time = 571.0969998836517
┌ Info: Exploring node
└   branch_and_bound_node.ix = 56
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.068865
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 10
┌ Info: Price and cut time (b-and-b)
└   t = 4.8374092
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 56
│   lb = 2.7087136180009512
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 64
└   length(nodes) = 129
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16228
└   sum(fire_plans.plans_per_fire) = 12218
┌ Info: Time check
└   time() - start_time = 576.0190000534058
┌ Info: Exploring node
└   branch_and_bound_node.ix = 57
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.3102114
┌ Info: Price and cut time (b-and-b)
└   t = 3.7096706
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 57
│   lb = 2.7087802535768915
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 65
└   length(nodes) = 131
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16251
└   sum(fire_plans.plans_per_fire) = 12265
┌ Info: Time check
└   time() - start_time = 580.0620000362396
┌ Info: Exploring node
└   branch_and_bound_node.ix = 96
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0711532
┌ Info: Price and cut time (b-and-b)
└   t = 4.4999959
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 96
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0  0   0   4  16  2  0  0
│      0   0   1   5  5  3  10  7   4   1   0  0  0  0
│     10   2   0   0  0  0   0  0   0   0   0  0  0  0
│      7  19  20   2  1  0   0  0   0   1   1  0  0  0
│      0   0   1  10  7  9   7  9  13  10   1  0  0  0
└      5   1   0   0  1  1   0  0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.2220524
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.130693
│   obj = 2.7180682556691522
└   obj_bound = 2.717820213516631
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1   1   1   1   1   5  17  3  1  1
│      1   1   2   6  6   4  11   8   5   2   1  1  1  1
│     11   3   1   1  1   1   1   1   1   1   1  1  1  1
│      8  20  21   3  2   1   1   1   1   2   2  1  1  1
│      1   1   2  11  8  10   8  10  14  11   2  1  1  1
└      6   2   1   1  2   2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.554959
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2685043
│   obj = 2.718068255669152
└   obj_bound = 2.717804335385735
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   2   6  18  4  2  2
│      2   2   3   7  7   5  12   9   6   3   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      9  21  22   4  3   2   2   2   2   3   3  2  2  2
│      2   2   3  12  9  11   9  11  15  12   3  2  2  2
└      7   3   2   2  3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.3616518
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6071102
│   obj = 2.7180682556691522
└   obj_bound = 2.717822491753097
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 96
│   lb = 2.7087802535768915
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 66
└   length(nodes) = 133
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16901
└   sum(fire_plans.plans_per_fire) = 12670
┌ Info: Time check
└   time() - start_time = 594.539999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 97
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.3123253
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.5641593
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 97
│   lb = 2.708793621465987
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 67
└   length(nodes) = 135
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 16955
└   sum(fire_plans.plans_per_fire) = 12739
┌ Info: Time check
└   time() - start_time = 598.4319999217987
┌ Info: Exploring node
└   branch_and_bound_node.ix = 106
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0717254
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 3.244551
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 106
│   lb = 2.708793621465987
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 68
└   length(nodes) = 137
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17004
└   sum(fire_plans.plans_per_fire) = 12802
┌ Info: Time check
└   time() - start_time = 601.7750000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 107
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0846662
┌ Info: Price and cut time (b-and-b)
└   t = 4.2132355
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 107
│   lb = 2.708806374112532
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 69
└   length(nodes) = 139
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17051
└   sum(fire_plans.plans_per_fire) = 12870
┌ Info: Time check
└   time() - start_time = 606.0929999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 126
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0677362
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 9
┌ Info: Price and cut time (b-and-b)
└   t = 3.968653
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 126
│   lb = 2.708806374112532
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 70
└   length(nodes) = 141
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17077
└   sum(fire_plans.plans_per_fire) = 12915
┌ Info: Time check
└   time() - start_time = 610.1389999389648
┌ Info: Exploring node
└   branch_and_bound_node.ix = 127
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0927198
┌ Info: Price and cut time (b-and-b)
└   t = 9.3734351
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 127
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0  0   0  6  15  2  0  0
│      0   0   1  8  3  6   6  6   4  1   0  0  0  0
│     10   2   0  0  0  0   0  0   0  0   0  0  0  0
│      7  18  19  2  1  0   0  1   1  0   1  0  0  0
│      0   0   1  6  9  5  10  9  12  9   1  0  0  0
└      5   2   0  0  1  1   0  0   0  0   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.8276073
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1598436
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1   1  1   1   1   1   7  16  3  1  1
│      1   1   2  9   4  7   7   7   5   2   1  1  1  1
│     11   3   1  1   1  1   1   1   1   1   1  1  1  1
│      8  19  20  3   2  1   1   2   2   1   2  1  1  1
│      1   1   2  7  10  6  11  10  13  10   2  1  1  1
└      6   3   1  1   2  2   1   1   1   1   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.1605905
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.140229
│   obj = 2.7180682556691522
└   obj_bound = 2.718041714862896
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   2   2   8  17  4  2  2
│      2   2   3  10   5  8   8   8   6   3   2  2  2  2
│     12   4   2   2   2  2   2   2   2   2   2  2  2  2
│      9  20  21   4   3  2   2   3   3   2   3  2  2  2
│      2   2   3   8  11  7  12  11  14  11   3  2  2  2
└      7   4   2   2   3  3   2   2   2   2   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.6857485
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.630297
│   obj = 2.7180682556691522
└   obj_bound = 2.717812776392313
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 127
│   lb = 2.7088121252730795
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 71
└   length(nodes) = 143
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17596
└   sum(fire_plans.plans_per_fire) = 13275
┌ Info: Time check
└   time() - start_time = 628.0620000362396
┌ Info: Exploring node
└   branch_and_bound_node.ix = 88
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0630496
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 15
┌ Info: Price and cut time (b-and-b)
└   t = 4.3816182
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 88
│   lb = 2.7088121252730795
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 72
└   length(nodes) = 145
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17648
└   sum(fire_plans.plans_per_fire) = 13314
┌ Info: Time check
└   time() - start_time = 632.5239999294281
┌ Info: Exploring node
└   branch_and_bound_node.ix = 89
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0949318
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 10
┌ Info: Price and cut time (b-and-b)
└   t = 5.7929551
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 89
│   lb = 2.7088160466163305
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 73
└   length(nodes) = 147
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17765
└   sum(fire_plans.plans_per_fire) = 13396
┌ Info: Time check
└   time() - start_time = 638.4210000038147
┌ Info: Exploring node
└   branch_and_bound_node.ix = 108
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0773463
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.083571
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 108
│   lb = 2.7088160466163305
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 74
└   length(nodes) = 149
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 17910
└   sum(fire_plans.plans_per_fire) = 13484
┌ Info: Time check
└   time() - start_time = 642.6010000705719
┌ Info: Exploring node
└   branch_and_bound_node.ix = 109
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1104217
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 5.3899914
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 109
│   lb = 2.7088323889462096
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 75
└   length(nodes) = 151
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18057
└   sum(fire_plans.plans_per_fire) = 13594
┌ Info: Time check
└   time() - start_time = 648.1219999790192
┌ Info: Exploring node
└   branch_and_bound_node.ix = 130
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0762165
┌ Info: Price and cut time (b-and-b)
└   t = 3.4952033
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 4, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 130
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0  0  0  6  15  2  0  0
│      0   0   0   4  7  4   6  7  7  0   0  0  0  0
│     10   2   0   0  0  0   0  0  0  0   0  0  0  0
│      7  19  20   2  0  2   0  0  0  0   0  0  0  0
│      0   0   2  10  6  7  11  9  9  9   2  0  0  0
└      5   1   0   0  1  1   0  0  0  0   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.078497
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1080004
│   obj = 2.7180682556691522
└   obj_bound = 2.7178031142002106
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1   7  16  3  1  1
│      1   1   1   5  8  5   7   8   8   1   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  20  21   3  1  3   1   1   1   1   1  1  1  1
│      1   1   3  11  7  8  12  10  10  10   3  1  1  1
└      6   2   1   1  2  2   1   1   1   1   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.7709764
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2271823
│   obj = 2.7180682556691522
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   8  17  4  2  2
│      2   2   2   6  9  6   8   9   9   2   2  2  2  2
│     12   4   2   2  2  2   2   2   2   2   2  2  2  2
│      9  21  22   4  2  4   2   2   2   2   2  2  2  2
│      2   2   4  12  8  9  13  11  11  11   4  2  2  2
└      7   3   2   2  3  3   2   2   2   2   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.3119065
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2663503
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691513
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 130
│   lb = 2.7088323889462096
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 76
└   length(nodes) = 153
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18471
└   sum(fire_plans.plans_per_fire) = 13989
┌ Info: Time check
└   time() - start_time = 660.1889998912811
┌ Info: Exploring node
└   branch_and_bound_node.ix = 131
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0741675
┌ Info: Price and cut time (b-and-b)
└   t = 2.397281
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 131
│   lb = 2.708859179291503
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 77
└   length(nodes) = 155
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18526
└   sum(fire_plans.plans_per_fire) = 14035
┌ Info: Time check
└   time() - start_time = 662.6779999732971
┌ Info: Exploring node
└   branch_and_bound_node.ix = 82
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0881381
┌ Info: Price and cut time (b-and-b)
└   t = 4.4555439
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 82
│   lb = 2.708859179291503
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 78
└   length(nodes) = 157
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18575
└   sum(fire_plans.plans_per_fire) = 14102
┌ Info: Time check
└   time() - start_time = 667.2420001029968
┌ Info: Exploring node
└   branch_and_bound_node.ix = 83
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.357215
┌ Info: Price and cut time (b-and-b)
└   t = 4.5486617
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 83
│   lb = 2.7088687789147374
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 79
└   length(nodes) = 159
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18627
└   sum(fire_plans.plans_per_fire) = 14178
┌ Info: Time check
└   time() - start_time = 672.1749999523163
┌ Info: Exploring node
└   branch_and_bound_node.ix = 26
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0754688
┌ Info: Price and cut time (b-and-b)
└   t = 7.57722
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 26
│   lb = 2.7088687789147374
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 80
└   length(nodes) = 161
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 18785
└   sum(fire_plans.plans_per_fire) = 14330
┌ Info: Time check
└   time() - start_time = 679.8359999656677
┌ Info: Exploring node
└   branch_and_bound_node.ix = 27
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1042619
┌ Info: There may be more cuts; one last DCG to have provable lower bound
└   loop_ix = 25
┌ Info: Price and cut time (b-and-b)
└   t = 10.0451624
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 27
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0   0   0  5  15  2  0  0
│      0   0   1   5  6  7   5   3   7  1   0  0  0  0
│     10   1   0   0  0  0   0   0   0  0   0  0  0  0
│      6  19  20   2  1  0   0   0   0  1   1  0  0  0
│      0   0   1  10  6  5  11  13  10  9   1  0  0  0
└      5   2   0   0  1  1   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.5520787
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2126868
│   obj = 2.7180682556691522
└   obj_bound = 2.718045255669153
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1   6  16  3  1  1
│      1   1   2   6  7  8   6   4   8   2   1  1  1  1
│     11   2   1   1  1  1   1   1   1   1   1  1  1  1
│      7  20  21   3  2  1   1   1   1   2   2  1  1  1
│      1   1   2  11  7  6  12  14  11  10   2  1  1  1
└      6   3   1   1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.0265767
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2465212
│   obj = 2.7180682556691522
└   obj_bound = 2.7178331106401914
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   7  17  4  2  2
│      2   2   3   7  8  9   7   5   9   3   2  2  2  2
│     12   3   2   2  2  2   2   2   2   2   2  2  2  2
│      8  21  22   4  3  2   2   2   2   3   3  2  2  2
│      2   2   3  12  8  7  13  15  12  11   3  2  2  2
└      7   4   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.8079644
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6412726
│   obj = 2.7180682556691522
└   obj_bound = 2.7178492151691698
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 27
│   lb = 2.708883256338433
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 81
└   length(nodes) = 163
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 19379
└   sum(fire_plans.plans_per_fire) = 14741
┌ Info: Time check
└   time() - start_time = 703.6679999828339
┌ Info: Exploring node
└   branch_and_bound_node.ix = 68
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0733727
┌ Info: Price and cut time (b-and-b)
└   t = 5.2168837
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 68
│   lb = 2.708883256338433
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 82
└   length(nodes) = 165
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 19472
└   sum(fire_plans.plans_per_fire) = 14803
┌ Info: Time check
└   time() - start_time = 708.9769999980927
┌ Info: Exploring node
└   branch_and_bound_node.ix = 69
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0915637
┌ Info: Price and cut time (b-and-b)
└   t = 3.1685977
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 69
│   lb = 2.708956562055907
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 83
└   length(nodes) = 167
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 19512
└   sum(fire_plans.plans_per_fire) = 14862
┌ Info: Time check
└   time() - start_time = 712.2490000724792
┌ Info: Exploring node
└   branch_and_bound_node.ix = 138
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0792264
┌ Info: Price and cut time (b-and-b)
└   t = 7.2168351
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 138
│   lb = 2.708956562055907
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 84
└   length(nodes) = 169
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 19551
└   sum(fire_plans.plans_per_fire) = 14952
┌ Info: Time check
└   time() - start_time = 719.5680000782013
┌ Info: Exploring node
└   branch_and_bound_node.ix = 139
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0950515
┌ Info: Price and cut time (b-and-b)
└   t = 13.1576281
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 139
│   lb = 2.7089606056847884
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 85
└   length(nodes) = 171
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 19741
└   sum(fire_plans.plans_per_fire) = 15150
┌ Info: Time check
└   time() - start_time = 732.8429999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 92
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0787149
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 7.1553168
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 92
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0  0   5  15  2  0  0
│      0   0   0  8  5  3   6   3  6   0   0  0  0  0
│     10   1   0  0  0  0   0   0  0   0   0  0  0  0
│      6  18  19  2  1  1   0   0  0   0   0  0  0  0
│      0   0   1  6  7  7  10  12  9  10   1  0  0  0
└      5   2   0  0  1  1   0   0  0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.34306
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1278856
│   obj = 2.7180682556691522
└   obj_bound = 2.71799967569979
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   6  16  3  1  1
│      1   1   1  9  6  4   7   4   7   1   1  1  1  1
│     11   2   1  1  1  1   1   1   1   1   1  1  1  1
│      7  19  20  3  2  2   1   1   1   1   1  1  1  1
│      1   1   2  7  8  8  11  13  10  11   2  1  1  1
└      6   3   1  1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.8594004
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1550445
│   obj = 2.7180682556691522
└   obj_bound = 2.71780011605943
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   7  17  4  2  2
│      2   2   2  10  7  5   8   5   8   2   2  2  2  2
│     12   3   2   2  2  2   2   2   2   2   2  2  2  2
│      8  20  21   4  3  3   2   2   2   2   2  2  2  2
│      2   2   3   8  9  9  12  14  11  12   3  2  2  2
└      7   4   2   2  3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.8712424
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3704806
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 92
│   lb = 2.7089606056847884
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 86
└   length(nodes) = 173
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 20302
└   sum(fire_plans.plans_per_fire) = 15622
┌ Info: Time check
└   time() - start_time = 750.5929999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 93
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0868026
┌ Info: Price and cut time (b-and-b)
└   t = 2.4371801
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 93
│   lb = 2.709017637523095
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 87
└   length(nodes) = 175
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 20359
└   sum(fire_plans.plans_per_fire) = 15663
┌ Info: Time check
└   time() - start_time = 753.1299998760223
┌ Info: Exploring node
└   branch_and_bound_node.ix = 134
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0777819
┌ Info: Price and cut time (b-and-b)
└   t = 4.6644715
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 134
│   lb = 2.709017637523095
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 88
└   length(nodes) = 177
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 20427
└   sum(fire_plans.plans_per_fire) = 15742
┌ Info: Time check
└   time() - start_time = 757.8900001049042
┌ Info: Exploring node
└   branch_and_bound_node.ix = 135
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1127928
┌ Info: Price and cut time (b-and-b)
└   t = 2.8453301
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 135
│   lb = 2.709019610197052
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 89
└   length(nodes) = 179
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 20478
└   sum(fire_plans.plans_per_fire) = 15790
┌ Info: Time check
└   time() - start_time = 760.8680000305176
┌ Info: Exploring node
└   branch_and_bound_node.ix = 150
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0799226
┌ Info: Price and cut time (b-and-b)
└   t = 4.0115275
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 150
│   lb = 2.709019610197052
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 90
└   length(nodes) = 181
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 20538
└   sum(fire_plans.plans_per_fire) = 15867
┌ Info: Time check
└   time() - start_time = 764.989000082016
┌ Info: Exploring node
└   branch_and_bound_node.ix = 151
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0924745
┌ Info: Price and cut time (b-and-b)
└   t = 7.4810339
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 151
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0   0   0   0  0  0  5  15  2  0  0
│      0   0   0  7   2   2  10  7  7  0   0  0  0  0
│     10   2   0  0   0   0   0  0  0  0   0  0  0  0
│      7  18  19  2   0   0   0  0  0  0   1  0  0  0
│      0   0   1  7  10  10   6  9  9  9   1  0  0  0
└      5   2   0  0   1   1   0  0  0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.8878912
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1459483
│   obj = 2.7180682556691522
└   obj_bound = 2.7179181759747686
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1   1   1   1   1   1   6  16  3  1  1
│      1   1   1  8   3   3  11   8   8   1   1  1  1  1
│     11   3   1  1   1   1   1   1   1   1   1  1  1  1
│      8  19  20  3   1   1   1   1   1   1   2  1  1  1
│      1   1   2  8  11  11   7  10  10  10   2  1  1  1
└      6   3   1  1   2   2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.977665
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3441083
│   obj = 2.7180682556691522
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2  2   2   2   2   2   2   7  17  4  2  2
│      2   2   2  9   4   4  12   9   9   2   2  2  2  2
│     12   4   2  2   2   2   2   2   2   2   2  2  2  2
│      9  20  21  4   2   2   2   2   2   2   3  2  2  2
│      2   2   3  9  12  12   8  11  11  11   3  2  2  2
└      7   4   2  2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 3.8199116
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3191634
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691513
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 151
│   lb = 2.7090377439848012
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 91
└   length(nodes) = 183
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 21079
└   sum(fire_plans.plans_per_fire) = 16367
┌ Info: Time check
└   time() - start_time = 783.9979999065399
┌ Info: Exploring node
└   branch_and_bound_node.ix = 180
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0736145
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 9
┌ Info: Price and cut time (b-and-b)
└   t = 6.1961167
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 180
│   lb = 2.7090377439848012
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 92
└   length(nodes) = 185
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 21206
└   sum(fire_plans.plans_per_fire) = 16457
┌ Info: Time check
└   time() - start_time = 790.2850000858307
┌ Info: Exploring node
└   branch_and_bound_node.ix = 181
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0951872
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.0465985
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 181
│   lb = 2.7090840769893014
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 93
└   length(nodes) = 187
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 21268
└   sum(fire_plans.plans_per_fire) = 16506
┌ Info: Time check
└   time() - start_time = 793.4460000991821
┌ Info: Exploring node
└   branch_and_bound_node.ix = 116
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0755695
┌ Info: Price and cut time (b-and-b)
└   t = 2.7496652
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 4, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 116
│   lb = 2.7090840769893014
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 94
└   length(nodes) = 189
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 21387
└   sum(fire_plans.plans_per_fire) = 16584
┌ Info: Time check
└   time() - start_time = 796.300999879837
┌ Info: Exploring node
└   branch_and_bound_node.ix = 117
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0667753
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 2.9665848
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 117
│   lb = 2.7091244093719773
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 95
└   length(nodes) = 191
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 21484
└   sum(fire_plans.plans_per_fire) = 16655
┌ Info: Time check
└   time() - start_time = 799.3429999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 102
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.086765
┌ Info: Price and cut time (b-and-b)
└   t = 4.1943703
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 102
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0  0  1   1   3  17  2  0  0
│      0   0   1   5  4  4  6  9   4   1   0  0  0  0
│     10   1   0   0  0  0  0  0   0   0   0  0  0  0
│      6  19  20   2  1  0  0  0   1   1   0  0  0  0
│      0   0   1  10  8  8  9  6  12  10   0  0  0  0
└      5   1   0   0  1  1  0  0   0   1   1  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.4191316
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1723744
│   obj = 2.7180682556691522
└   obj_bound = 2.7178034733861205
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   2   2   4  18  3  1  1
│      1   1   2   6  5  5   7  10   5   2   1  1  1  1
│     11   2   1   1  1  1   1   1   1   1   1  1  1  1
│      7  20  21   3  2  1   1   1   2   2   1  1  1  1
│      1   1   2  11  9  9  10   7  13  11   1  1  1  1
└      6   2   1   1  2  2   1   1   1   2   2  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.2531207
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2371861
│   obj = 2.7180682556691522
└   obj_bound = 2.7178208367864394
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   3   3   5  19  4  2  2
│      2   2   3   7   6   6   8  11   6   3   2  2  2  2
│     12   3   2   2   2   2   2   2   2   2   2  2  2  2
│      8  21  22   4   3   2   2   2   3   3   2  2  2  2
│      2   2   3  12  10  10  11   8  14  12   2  2  2  2
└      7   3   2   2   3   3   2   2   2   3   3  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.8043486
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6310206
│   obj = 2.7180682556691522
└   obj_bound = 2.7178160844248165
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 102
│   lb = 2.7091244093719773
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 96
└   length(nodes) = 193
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22128
└   sum(fire_plans.plans_per_fire) = 16996
┌ Info: Time check
└   time() - start_time = 816.1099998950958
┌ Info: Exploring node
└   branch_and_bound_node.ix = 103
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1476635
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 4.5243295
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 103
│   lb = 2.709130825323455
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 97
└   length(nodes) = 195
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22173
└   sum(fire_plans.plans_per_fire) = 17060
┌ Info: Time check
└   time() - start_time = 820.7999999523163
┌ Info: Exploring node
└   branch_and_bound_node.ix = 54
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.4742308
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.4765299
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 54
│   lb = 2.709130825323455
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 98
└   length(nodes) = 197
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22241
└   sum(fire_plans.plans_per_fire) = 17141
┌ Info: Time check
└   time() - start_time = 825.7690000534058
┌ Info: Exploring node
└   branch_and_bound_node.ix = 55
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0964646
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 4.2221236
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 55
│   lb = 2.7091382781202547
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 99
└   length(nodes) = 199
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22336
└   sum(fire_plans.plans_per_fire) = 17208
┌ Info: Time check
└   time() - start_time = 830.1089999675751
┌ Info: Exploring node
└   branch_and_bound_node.ix = 158
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0806353
┌ Info: Price and cut time (b-and-b)
└   t = 2.3451242
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 158
│   lb = 2.7091382781202547
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 100
└   length(nodes) = 201
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22360
└   sum(fire_plans.plans_per_fire) = 17232
┌ Info: Time check
└   time() - start_time = 832.566999912262
┌ Info: Exploring node
└   branch_and_bound_node.ix = 159
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0875937
┌ Info: Price and cut time (b-and-b)
└   t = 8.6320918
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 8, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 159
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0   0   0  0   1  6  15  1  0  0
│      0   0   1  6  7   2   6  8   4  1   0  0  0  0
│     10   2   0  0  0   0   0  0   0  0   0  0  0  0
│      7  18  19  1  1   0   0  0   1  1   1  0  0  0
│      0   0   1  9  5  10  10  8  12  9   1  0  0  0
└      5   1   0  0  1   1   0  0   0  0   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.1413702
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1413028
│   obj = 2.7180682556691522
└   obj_bound = 2.7178449859303275
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1   1   1  1   2   7  16  2  1  1
│      1   1   2   7  8   3   7  9   5   2   1  1  1  1
│     11   3   1   1  1   1   1  1   1   1   1  1  1  1
│      8  19  20   2  2   1   1  1   2   2   2  1  1  1
│      1   1   2  10  6  11  11  9  13  10   2  1  1  1
└      6   2   1   1  2   2   1  1   1   1   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.8923499
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1307914
│   obj = 2.7180682556691522
└   obj_bound = 2.7178006535695736
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   3   8  17  3  2  2
│      2   2   3   8  9   4   8  10   6   3   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      9  20  21   3  3   2   2   2   3   3   3  2  2  2
│      2   2   3  11  7  12  12  10  14  11   3  2  2  2
└      7   3   2   2  3   3   2   2   2   2   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.5665339
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5431296
│   obj = 2.7180682556691522
└   obj_bound = 2.717808952823524
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 159
│   lb = 2.709152605048384
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 101
└   length(nodes) = 203
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22765
└   sum(fire_plans.plans_per_fire) = 17648
┌ Info: Time check
└   time() - start_time = 852.6670000553131
┌ Info: Exploring node
└   branch_and_bound_node.ix = 78
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0705197
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (b-and-b)
└   t = 3.2804401
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 78
│   lb = 2.709152605048384
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 102
└   length(nodes) = 205
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 22817
└   sum(fire_plans.plans_per_fire) = 17706
┌ Info: Time check
└   time() - start_time = 856.0469999313354
┌ Info: Exploring node
└   branch_and_bound_node.ix = 79
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1494374
┌ Info: Price and cut time (b-and-b)
└   t = 5.9439651
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 79
│   lb = 2.7091570495585358
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 103
└   length(nodes) = 207
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23005
└   sum(fire_plans.plans_per_fire) = 17828
┌ Info: Time check
└   time() - start_time = 862.1559998989105
┌ Info: Exploring node
└   branch_and_bound_node.ix = 122
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1044435
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 12
┌ Info: Price and cut time (b-and-b)
└   t = 7.8344326
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 122
│   lb = 2.7091570495585358
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 104
└   length(nodes) = 209
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23076
└   sum(fire_plans.plans_per_fire) = 17912
┌ Info: Time check
└   time() - start_time = 870.1180000305176
┌ Info: Exploring node
└   branch_and_bound_node.ix = 123
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1515884
┌ Info: Price and cut time (b-and-b)
└   t = 6.3347462
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 123
│   lb = 2.7091748499290986
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 105
└   length(nodes) = 211
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23121
└   sum(fire_plans.plans_per_fire) = 18002
┌ Info: Time check
└   time() - start_time = 876.635999917984
┌ Info: Exploring node
└   branch_and_bound_node.ix = 148
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0911472
┌ Info: Price and cut time (b-and-b)
└   t = 7.2944477
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 148
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   0   0   4  16  2  0  0
│      0   0   1  8  4  3  9   3   3   1   0  0  0  0
│     10   2   0  0  0  0  0   0   0   0   0  0  0  0
│      6  19  19  2  1  0  0   0   0   1   1  0  0  0
│      0   0   1  6  7  9  6  12  12  10   0  0  0  0
└      5   1   0  0  1  1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.9499476
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1431707
│   obj = 2.7180682556691522
└   obj_bound = 2.718047655669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1   1   1   1   1   5  17  3  1  1
│      1   1   2  9  5   4  10   4   4   2   1  1  1  1
│     11   3   1  1  1   1   1   1   1   1   1  1  1  1
│      7  20  20  3  2   1   1   1   1   2   2  1  1  1
│      1   1   2  7  8  10   7  13  13  11   1  1  1  1
└      6   2   1  1  2   2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.7615778
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1748775
│   obj = 2.7180682556691522
└   obj_bound = 2.717842830553051
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   2   6  18  4  2  2
│      2   2   3  10  6   5  11   5   5   3   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      8  21  21   4  3   2   2   2   2   3   3  2  2  2
│      2   2   3   8  9  11   8  14  14  12   2  2  2  2
└      7   3   2   2  3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.7273548
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4820273
│   obj = 2.7180682556691522
└   obj_bound = 2.7178174574265723
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 148
│   lb = 2.7091748499290986
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 106
└   length(nodes) = 213
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23612
└   sum(fire_plans.plans_per_fire) = 18397
┌ Info: Time check
└   time() - start_time = 895.614000082016
┌ Info: Exploring node
└   branch_and_bound_node.ix = 149
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.12967
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 9.1389731
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 149
│   lb = 2.7091912520099357
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 107
└   length(nodes) = 215
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23714
└   sum(fire_plans.plans_per_fire) = 18520
┌ Info: Time check
└   time() - start_time = 904.904000043869
┌ Info: Exploring node
└   branch_and_bound_node.ix = 196
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0750716
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 8
┌ Info: Price and cut time (b-and-b)
└   t = 3.7782217
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 196
│   lb = 2.7091912520099357
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 108
└   length(nodes) = 217
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23743
└   sum(fire_plans.plans_per_fire) = 18568
┌ Info: Time check
└   time() - start_time = 908.7650001049042
┌ Info: Exploring node
└   branch_and_bound_node.ix = 197
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0949202
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 2.1365357
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 197
│   lb = 2.709200959370522
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 109
└   length(nodes) = 219
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23763
└   sum(fire_plans.plans_per_fire) = 18609
┌ Info: Time check
└   time() - start_time = 911.0179998874664
┌ Info: Exploring node
└   branch_and_bound_node.ix = 112
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0897254
┌ Info: Price and cut time (b-and-b)
└   t = 6.0914425
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 112
│   lb = 2.709200959370522
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 110
└   length(nodes) = 221
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 23828
└   sum(fire_plans.plans_per_fire) = 18718
┌ Info: Time check
└   time() - start_time = 917.2279999256134
┌ Info: Exploring node
└   branch_and_bound_node.ix = 113
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.126989
┌ Info: Price and cut time (b-and-b)
└   t = 8.4830016
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 113
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0   0  0  0   0   0  5  15  2  0  0
│      0   0   0   2   1  8  9   6   7  0   0  0  0  0
│     10   1   0   0   0  0  0   0   0  0   0  0  0  0
│      6  19  20   2   1  0  0   0   0  1   1  0  0  0
│      0   0   1  12  11  4  7  10  10  9   1  0  0  0
└      5   1   0   0   1  1  0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.4262544
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1347695
│   obj = 2.7180682556691522
└   obj_bound = 2.7178440950738043
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1  1   1   1   1   6  16  3  1  1
│      1   1   1   3   2  9  10   7   8   1   1  1  1  1
│     11   2   1   1   1  1   1   1   1   1   1  1  1  1
│      7  20  21   3   2  1   1   1   1   2   2  1  1  1
│      1   1   2  13  12  5   8  11  11  10   2  1  1  1
└      6   2   1   1   2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 6.7649222
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2425406
│   obj = 2.718068255669152
└   obj_bound = 2.718034513961017
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   7  17  4  2  2
│      2   2   2   4   3  10  11   8   9   2   2  2  2  2
│     12   3   2   2   2   2   2   2   2   2   2  2  2  2
│      8  21  22   4   3   2   2   2   2   3   3  2  2  2
│      2   2   3  14  13   6   9  12  12  11   3  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 6, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 6.9481956
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.9698876
│   obj = 2.7180682556691522
└   obj_bound = 2.7178503448007976
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 113
│   lb = 2.709204524180611
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 111
└   length(nodes) = 223
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 24324
└   sum(fire_plans.plans_per_fire) = 19169
┌ Info: Time check
└   time() - start_time = 943.231999874115
┌ Info: Exploring node
└   branch_and_bound_node.ix = 204
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0739601
┌ Info: Price and cut time (b-and-b)
└   t = 8.4209847
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 204
│   lb = 2.709204524180611
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 112
└   length(nodes) = 225
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 24381
└   sum(fire_plans.plans_per_fire) = 19294
┌ Info: Time check
└   time() - start_time = 951.7420001029968
┌ Info: Exploring node
└   branch_and_bound_node.ix = 205
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.102795
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 2.6933978
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 205
│   lb = 2.7092288694390874
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 113
└   length(nodes) = 227
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 24402
└   sum(fire_plans.plans_per_fire) = 19334
┌ Info: Time check
└   time() - start_time = 954.5569999217987
┌ Info: Exploring node
└   branch_and_bound_node.ix = 36
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0758253
┌ Info: Price and cut time (b-and-b)
└   t = 9.1380822
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 36
│   lb = 2.7092288694390874
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 114
└   length(nodes) = 229
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 24585
└   sum(fire_plans.plans_per_fire) = 19407
┌ Info: Time check
└   time() - start_time = 963.7869999408722
┌ Info: Exploring node
└   branch_and_bound_node.ix = 37
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1129649
┌ Info: Price and cut time (b-and-b)
└   t = 9.3624472
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 37
│   lb = 2.709247230669006
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 115
└   length(nodes) = 231
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 24645
└   sum(fire_plans.plans_per_fire) = 19505
┌ Info: Time check
└   time() - start_time = 973.300999879837
┌ Info: Exploring node
└   branch_and_bound_node.ix = 166
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1036348
┌ Info: Price and cut time (b-and-b)
└   t = 4.9188541
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 10, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 166
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0   0   0  7  15  1  0  0
│      0   0   2  10  5  5   6   3   3  1   0  0  0  0
│     10   2   0   0  0  0   0   0   0  0   0  0  0  0
│      7  19  19   1  1  1   0   0   0  0   1  0  0  0
│      0   0   0   5  8  7  10  13  13  8   1  0  0  0
└      5   1   0   0  1  1   0   0   0  0   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.2055599
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1705912
│   obj = 2.718068255669152
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1  8  16  2  1  1
│      1   1   3  11  6  6   7   4   4  2   1  1  1  1
│     11   3   1   1  1  1   1   1   1  1   1  1  1  1
│      8  20  20   2  2  2   1   1   1  1   2  1  1  1
│      1   1   1   6  9  8  11  14  14  9   2  1  1  1
└      6   2   1   1  2  2   1   1   1  1   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 5.6712195
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2101127
│   obj = 2.7180682556691522
└   obj_bound = 2.717861182124884
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   2   2   9  17  3  2  2
│      2   2   4  12   7  7   8   5   5   3   2  2  2  2
│     12   4   2   2   2  2   2   2   2   2   2  2  2  2
│      9  21  21   3   3  3   2   2   2   2   3  2  2  2
│      2   2   2   7  10  9  12  15  15  10   3  2  2  2
└      7   3   2   2   3  3   2   2   2   2   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.0850938
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 1.6832784
│   obj = 2.7180682556691522
└   obj_bound = 2.717805983144929
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.718068255669152
┌ Info: current bounds
│   node_ix = 166
│   lb = 2.709247230669006
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 116
└   length(nodes) = 233
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25075
└   sum(fire_plans.plans_per_fire) = 19833
┌ Info: Time check
└   time() - start_time = 992.3900001049042
┌ Info: Exploring node
└   branch_and_bound_node.ix = 167
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1970143
┌ Info: Price and cut time (b-and-b)
└   t = 10.5249168
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 11, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 12, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 167
│   lb = 2.7092656930755172
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 117
└   length(nodes) = 235
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25179
└   sum(fire_plans.plans_per_fire) = 19938
┌ Info: Time check
└   time() - start_time = 1003.1389999389648
┌ Info: Exploring node
└   branch_and_bound_node.ix = 98
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.146307
┌ Info: Price and cut time (b-and-b)
└   t = 8.3910394
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 98
│   lb = 2.7092656930755172
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 118
└   length(nodes) = 237
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25218
└   sum(fire_plans.plans_per_fire) = 20017
┌ Info: Time check
└   time() - start_time = 1011.7190001010895
┌ Info: Exploring node
└   branch_and_bound_node.ix = 99
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1571921
┌ Info: Price and cut time (b-and-b)
└   t = 14.2486577
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 99
│   lb = 2.7092675307656853
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 119
└   length(nodes) = 239
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25400
└   sum(fire_plans.plans_per_fire) = 20152
┌ Info: Time check
└   time() - start_time = 1026.1570000648499
┌ Info: Exploring node
└   branch_and_bound_node.ix = 140
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1052122
┌ Info: Price and cut time (b-and-b)
└   t = 5.1083881
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 9, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 9, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 140
│   lb = 2.7092675307656853
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 120
└   length(nodes) = 241
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25452
└   sum(fire_plans.plans_per_fire) = 20235
┌ Info: Time check
└   time() - start_time = 1031.4000000953674
┌ Info: Exploring node
└   branch_and_bound_node.ix = 141
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1180593
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 5.8743534
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 141
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  5  14  2  0  0
│      0   0   0  8  3  3   5   6   6  0   0  0  0  0
│     10   2   0  0  0  0   0   0   0  0   0  0  0  0
│      7  18  19  2  0  0   0   0   0  0   1  0  0  0
│      0   0   2  6  9  9  11  10  10  8   2  0  0  0
└      5   1   0  0  1  0   0   0   0  2   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.1576192
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1340028
│   obj = 2.7180682556691522
└   obj_bound = 2.7177991669943307
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1   1   1   1   1   1  6  15  3  1  1
│      1   1   1  9   4   4   6   7   7  1   1  1  1  1
│     11   3   1  1   1   1   1   1   1  1   1  1  1  1
│      8  19  20  3   1   1   1   1   1  1   2  1  1  1
│      1   1   3  7  10  10  12  11  11  9   3  1  1  1
└      6   2   1  1   2   1   1   1   1  3   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.3803954
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2188407
│   obj = 2.7180682556691522
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   7  16  4  2  2
│      2   2   2  10   5   5   7   8   8   2   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   2   2   2   2   2   2   3  2  2  2
│      2   2   4   8  11  11  13  12  12  10   4  2  2  2
└      7   3   2   2   3   2   2   2   2   4   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (heuristic)
└   t = 3.7359398
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.782256
│   obj = 2.718068255669152
└   obj_bound = 2.717804580229764
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 141
│   lb = 2.70927729134095
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 121
└   length(nodes) = 243
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 25972
└   sum(fire_plans.plans_per_fire) = 20597
┌ Info: Time check
└   time() - start_time = 1051.6600000858307
┌ Info: Exploring node
└   branch_and_bound_node.ix = 132
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1023409
┌ Info: Price and cut time (b-and-b)
└   t = 7.4535145
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 132
│   lb = 2.70927729134095
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 122
└   length(nodes) = 245
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26108
└   sum(fire_plans.plans_per_fire) = 20690
┌ Info: Time check
└   time() - start_time = 1059.2379999160767
┌ Info: Exploring node
└   branch_and_bound_node.ix = 133
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1300032
┌ Info: Price and cut time (b-and-b)
└   t = 5.0303869
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 133
│   lb = 2.709280056072629
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 123
└   length(nodes) = 247
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26150
└   sum(fire_plans.plans_per_fire) = 20748
┌ Info: Time check
└   time() - start_time = 1064.4270000457764
┌ Info: Exploring node
└   branch_and_bound_node.ix = 218
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1018245
┌ Info: Price and cut time (b-and-b)
└   t = 3.341164
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 218
│   lb = 2.709280056072629
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 124
└   length(nodes) = 249
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26291
└   sum(fire_plans.plans_per_fire) = 20788
┌ Info: Time check
└   time() - start_time = 1067.898999929428
┌ Info: Exploring node
└   branch_and_bound_node.ix = 219
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1265931
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 2.1485247
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 219
│   lb = 2.7092981916003325
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 125
└   length(nodes) = 251
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26346
└   sum(fire_plans.plans_per_fire) = 20829
┌ Info: Time check
└   time() - start_time = 1070.8429999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 110
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.107254
┌ Info: Price and cut time (b-and-b)
└   t = 15.7641925
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 12, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 13, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 110
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0  0   0   0   5  15  2  0  0
│      0   0   1  7  4  7  9   3   2   1   0  0  0  0
│     10   2   0  0  0  0  0   0   0   0   0  0  0  0
│      7  18  19  2  1  0  0   0   0   0   1  0  0  0
│      0   0   1  7  8  5  6  13  14  10   1  0  0  0
└      5   2   0  0  1  1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.3554566
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1197317
│   obj = 2.718068255669152
└   obj_bound = 2.7179976926056426
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   6  16  3  1  1
│      1   1   2  8  5  8  10   4   3   2   1  1  1  1
│     11   3   1  1  1  1   1   1   1   1   1  1  1  1
│      8  19  20  3  2  1   1   1   1   1   2  1  1  1
│      1   1   2  8  9  6   7  14  15  11   2  1  1  1
└      6   3   1  1  2  2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 11.1934564
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6546987
│   obj = 2.7180682556691522
└   obj_bound = 2.7179890225778975
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2  2   2  2   2   2   2   7  17  4  2  2
│      2   2   3  9   6  9  11   5   4   3   2  2  2  2
│     12   4   2  2   2  2   2   2   2   2   2  2  2  2
│      9  20  21  4   3  2   2   2   2   2   3  2  2  2
│      2   2   3  9  10  7   8  15  16  12   3  2  2  2
└      7   4   2  2   3  3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.3474391
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4637715
│   obj = 2.7180682556691527
└   obj_bound = 2.717827246551955
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.718068255669152
┌ Info: current bounds
│   node_ix = 110
│   lb = 2.7092981916003325
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 126
└   length(nodes) = 253
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26916
└   sum(fire_plans.plans_per_fire) = 21339
┌ Info: Time check
└   time() - start_time = 1107.9530000686646
┌ Info: Exploring node
└   branch_and_bound_node.ix = 111
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    5-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1228363
┌ Info: Price and cut time (b-and-b)
└   t = 10.0606528
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 111
│   lb = 2.709299513407668
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 127
└   length(nodes) = 255
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 26949
└   sum(fire_plans.plans_per_fire) = 21430
┌ Info: Time check
└   time() - start_time = 1118.1579999923706
┌ Info: Exploring node
└   branch_and_bound_node.ix = 124
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0839369
┌ Info: Price and cut time (b-and-b)
└   t = 10.0543463
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 124
│   lb = 2.709299513407668
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 128
└   length(nodes) = 257
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27021
└   sum(fire_plans.plans_per_fire) = 21523
┌ Info: Time check
└   time() - start_time = 1128.3220000267029
┌ Info: Exploring node
└   branch_and_bound_node.ix = 125
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1338735
┌ Info: Price and cut time (b-and-b)
└   t = 6.3811655
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 125
│   lb = 2.709321199861944
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 129
└   length(nodes) = 259
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27098
└   sum(fire_plans.plans_per_fire) = 21596
┌ Info: Time check
└   time() - start_time = 1134.8519999980927
┌ Info: Exploring node
└   branch_and_bound_node.ix = 226
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0957217
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 5.2416437
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 7, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 7, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 226
│   lb = 2.709321199861944
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 130
└   length(nodes) = 261
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27198
└   sum(fire_plans.plans_per_fire) = 21664
┌ Info: Time check
└   time() - start_time = 1140.2149999141693
┌ Info: Exploring node
└   branch_and_bound_node.ix = 227
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1037946
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 3.0358257
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 227
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0   0   0  0  0  6  15  2  0  0
│      0   0   0  9  6   0   5  6  6  0   0  0  0  0
│     10   2   0  0  0   0   0  0  0  0   0  0  0  0
│      7  18  19  1  1   0   0  0  0  0   0  0  0  0
│      0   0   2  6  6  11  11  9  9  8   2  0  0  0
└      5   1   0  0  1   0   0  0  0  2   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.9577704
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1316217
│   obj = 2.7180682556691522
└   obj_bound = 2.717816307758276
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1   1   1   1   1  7  16  3  1  1
│      1   1   1  10  7   1   6   7   7  1   1  1  1  1
│     11   3   1   1  1   1   1   1   1  1   1  1  1  1
│      8  19  20   2  2   1   1   1   1  1   1  1  1  1
│      1   1   3   7  7  12  12  10  10  9   3  1  1  1
└      6   2   1   1  2   1   1   1   1  3   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.385917
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1043591
│   obj = 2.7180682556691522
└   obj_bound = 2.7177991922026123
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   2   8  17  4  2  2
│      2   2   2  11  8   2   7   8   8   2   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      9  20  21   3  3   2   2   2   2   2   2  2  2  2
│      2   2   4   8  8  13  13  11  11  10   4  2  2  2
└      7   3   2   2  3   2   2   2   2   4   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.7752793
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2205916
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 227
│   lb = 2.709360749206511
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 131
└   length(nodes) = 263
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27676
└   sum(fire_plans.plans_per_fire) = 21966
┌ Info: Time check
└   time() - start_time = 1152.1429998874664
┌ Info: Exploring node
└   branch_and_bound_node.ix = 230
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0865892
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 10
┌ Info: Price and cut time (b-and-b)
└   t = 7.1630024
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 230
│   lb = 2.709360749206511
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 132
└   length(nodes) = 265
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27745
└   sum(fire_plans.plans_per_fire) = 22034
┌ Info: Time check
└   time() - start_time = 1159.4140000343323
┌ Info: Exploring node
└   branch_and_bound_node.ix = 231
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1157767
┌ Info: Price and cut time (b-and-b)
└   t = 4.396008
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 4, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 231
│   lb = 2.709372131441666
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 133
└   length(nodes) = 267
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27849
└   sum(fire_plans.plans_per_fire) = 22096
┌ Info: Time check
└   time() - start_time = 1163.954999923706
┌ Info: Exploring node
└   branch_and_bound_node.ix = 46
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0885268
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 7
┌ Info: Price and cut time (b-and-b)
└   t = 3.6257446
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 4, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 4, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 46
│   lb = 2.709372131441666
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 134
└   length(nodes) = 269
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27901
└   sum(fire_plans.plans_per_fire) = 22137
┌ Info: Time check
└   time() - start_time = 1167.6879999637604
┌ Info: Exploring node
└   branch_and_bound_node.ix = 47
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1174996
┌ Info: Price and cut time (b-and-b)
└   t = 4.4243737
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 47
│   lb = 2.7093729157880126
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 135
└   length(nodes) = 271
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 27950
└   sum(fire_plans.plans_per_fire) = 22172
┌ Info: Time check
└   time() - start_time = 1172.2439999580383
┌ Info: Exploring node
└   branch_and_bound_node.ix = 114
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0961922
┌ Info: Price and cut time (b-and-b)
└   t = 4.945307
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 114
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0   0  0   0  0   5  16  2  0  0
│      0   0   1   5  3   2  9   6  7   1   0  0  0  0
│     10   2   0   0  0   0  0   0  0   0   0  0  0  0
│      7  19  19   2  1   0  0   0  0   0   1  0  0  0
│      0   0   1  10  9  10  7  10  9  10   1  0  0  0
└      5   1   0   0  1   1  0   0  0   1   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.5170977
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1427088
│   obj = 2.718068255669152
└   obj_bound = 2.717976975410804
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1   1   1   1   1   6  17  3  1  1
│      1   1   2   6   4   3  10   7   8   2   1  1  1  1
│     11   3   1   1   1   1   1   1   1   1   1  1  1  1
│      8  20  20   3   2   1   1   1   1   1   2  1  1  1
│      1   1   2  11  10  11   8  11  10  11   2  1  1  1
└      6   2   1   1   2   2   1   1   1   2   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.5963781
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.24999
│   obj = 2.718068255669152
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   7  18  4  2  2
│      2   2   3   7   5   4  11   8   9   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  21  21   4   3   2   2   2   2   2   3  2  2  2
│      2   2   3  12  11  12   9  12  11  12   3  2  2  2
└      7   3   2   2   3   3   2   2   2   3   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.6286575
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.3947441
│   obj = 2.7180682556691522
└   obj_bound = 2.7180682556691522
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.718068255669152
┌ Info: current bounds
│   node_ix = 114
│   lb = 2.7093729157880126
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 136
└   length(nodes) = 273
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 28341
└   sum(fire_plans.plans_per_fire) = 22512
┌ Info: Time check
└   time() - start_time = 1190.6970000267029
┌ Info: Exploring node
└   branch_and_bound_node.ix = 115
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1078487
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 11
┌ Info: Price and cut time (b-and-b)
└   t = 9.8896174
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 11, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 11, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 115
│   lb = 2.7093736534896977
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 137
└   length(nodes) = 275
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 28416
└   sum(fire_plans.plans_per_fire) = 22615
┌ Info: Time check
└   time() - start_time = 1200.7130000591278
┌ Info: Exploring node
└   branch_and_bound_node.ix = 156
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.091095
┌ Info: Price and cut time (b-and-b)
└   t = 5.7944083
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 156
│   lb = 2.7093736534896977
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 138
└   length(nodes) = 277
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 28528
└   sum(fire_plans.plans_per_fire) = 22691
┌ Info: Time check
└   time() - start_time = 1206.6189999580383
┌ Info: Exploring node
└   branch_and_bound_node.ix = 157
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.7118119
┌ Info: Price and cut time (b-and-b)
└   t = 3.8155702
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 157
│   lb = 2.709376742120245
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 139
└   length(nodes) = 279
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 28557
└   sum(fire_plans.plans_per_fire) = 22753
┌ Info: Time check
└   time() - start_time = 1211.1689999103546
┌ Info: Exploring node
└   branch_and_bound_node.ix = 194
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.6993466
┌ Info: Price and cut time (b-and-b)
└   t = 6.0714882
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 194
│   lb = 2.709376742120245
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 140
└   length(nodes) = 281
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 28630
└   sum(fire_plans.plans_per_fire) = 22834
┌ Info: Time check
└   time() - start_time = 1217.9749999046326
┌ Info: Exploring node
└   branch_and_bound_node.ix = 195
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.119661
┌ Info: Price and cut time (b-and-b)
└   t = 9.0990885
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 195
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0   0  0  0  0   0  6  15  2  0  0
│      0   0   1   4   3  7  6  9   3  1   0  0  0  0
│     10   2   0   0   0  0  0  0   0  0   0  0  0  0
│      7  19  19   2   1  0  0  0   0  0   1  0  0  0
│      0   0   1  11  10  5  9  6  12  9   1  0  0  0
└      5   1   0   0   1  1  0  0   0  0   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.0239171
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1658859
│   obj = 2.7180682556691522
└   obj_bound = 2.717985988266075
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1  1   1   1   1   7  16  3  1  1
│      1   1   2   5   4  8   7  10   4   2   1  1  1  1
│     11   3   1   1   1  1   1   1   1   1   1  1  1  1
│      8  20  20   3   2  1   1   1   1   1   2  1  1  1
│      1   1   2  12  11  6  10   7  13  10   2  1  1  1
└      6   2   1   1   2  2   1   1   1   1   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.4813169
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.245803
│   obj = 2.7180682556691522
└   obj_bound = 2.717821244216049
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   2   2   8  17  4  2  2
│      2   2   3   6   5  9   8  11   5   3   2  2  2  2
│     12   4   2   2   2  2   2   2   2   2   2  2  2  2
│      9  21  21   4   3  2   2   2   2   2   3  2  2  2
│      2   2   3  13  12  7  11   8  14  11   3  2  2  2
└      7   3   2   2   3  3   2   2   2   2   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.8141701
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4715892
│   obj = 2.7180682556691522
└   obj_bound = 2.7178245556691523
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691522
┌ Info: current bounds
│   node_ix = 195
│   lb = 2.7094016241546157
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 141
└   length(nodes) = 283
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29189
└   sum(fire_plans.plans_per_fire) = 23207
┌ Info: Time check
└   time() - start_time = 1240.8259999752045
┌ Info: Exploring node
└   branch_and_bound_node.ix = 250
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0735966
┌ Info: Price and cut time (b-and-b)
└   t = 2.2125083
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 250
│   lb = 2.7094016241546157
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 142
└   length(nodes) = 285
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29223
└   sum(fire_plans.plans_per_fire) = 23247
┌ Info: Time check
└   time() - start_time = 1243.119999885559
┌ Info: Exploring node
└   branch_and_bound_node.ix = 251
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    12-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.113161
┌ Info: Price and cut time (b-and-b)
└   t = 7.3455731
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 7, 11, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 7, 12, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 251
│   lb = 2.7094090666597257
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 143
└   length(nodes) = 287
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29390
└   sum(fire_plans.plans_per_fire) = 23347
┌ Info: Time check
└   time() - start_time = 1250.6040000915527
┌ Info: Exploring node
└   branch_and_bound_node.ix = 254
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1188097
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 7.3678006
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 254
│   lb = 2.7094090666597257
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 144
└   length(nodes) = 289
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29445
└   sum(fire_plans.plans_per_fire) = 23428
┌ Info: Time check
└   time() - start_time = 1258.135999917984
┌ Info: Exploring node
└   branch_and_bound_node.ix = 255
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    6-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1063052
┌ Info: Price and cut time (b-and-b)
└   t = 19.1937727
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 255
│   lb = 2.7094091671209575
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 145
└   length(nodes) = 291
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29626
└   sum(fire_plans.plans_per_fire) = 23630
┌ Info: Time check
└   time() - start_time = 1277.4670000076294
┌ Info: Exploring node
└   branch_and_bound_node.ix = 136
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0830234
┌ Info: Price and cut time (b-and-b)
└   t = 5.2386349
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 136
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0   0  0  0  0  0   4  17  2  0  0
│      0   0   1   3   2  3  9  9  6   1   0  0  0  0
│     10   2   0   0   0  0  0  0  0   0   0  0  0  0
│      6  18  19   2   1  0  1  0  0   1   0  0  0  0
│      0   0   1  11  10  9  7  6  9  10   0  1  0  0
└      5   2   0   0   1  1  0  0  0   2   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.0675656
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1185119
│   obj = 2.7180682556691527
└   obj_bound = 2.717984121684376
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1   1   1   1   1   5  18  3  1  1
│      1   1   2   4   3   4  10  10   7   2   1  1  1  1
│     11   3   1   1   1   1   1   1   1   1   1  1  1  1
│      7  19  20   3   2   1   2   1   1   2   1  1  1  1
│      1   1   2  12  11  10   8   7  10  11   1  2  1  1
└      6   3   1   1   2   2   1   1   1   3   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.8915769
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2491045
│   obj = 2.7180682556691522
└   obj_bound = 2.718068255669152
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   6  19  4  2  2
│      2   2   3   5   4   5  11  11   8   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      8  20  21   4   3   2   3   2   2   3   2  2  2  2
│      2   2   3  13  12  11   9   8  11  12   2  3  2  2
└      7   4   2   2   3   3   2   2   2   4   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.0558082
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4590524
│   obj = 2.7180682556691522
└   obj_bound = 2.7178650389700163
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7180682556691527
┌ Info: current bounds
│   node_ix = 136
│   lb = 2.7094091671209575
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 146
└   length(nodes) = 293
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 29966
└   sum(fire_plans.plans_per_fire) = 23940
┌ Info: Time check
└   time() - start_time = 1296.0620000362396
┌ Info: Exploring node
└   branch_and_bound_node.ix = 137
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1365508
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 5.4259995
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 4, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 4, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 137
│   lb = 2.7094374347372585
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 147
└   length(nodes) = 295
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30014
└   sum(fire_plans.plans_per_fire) = 24023
┌ Info: Time check
└   time() - start_time = 1301.6389999389648
┌ Info: Exploring node
└   branch_and_bound_node.ix = 200
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1232003
┌ Info: Price and cut time (b-and-b)
└   t = 8.9040086
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 8, 10, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 200
│   lb = 2.7094374347372585
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 148
└   length(nodes) = 297
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30110
└   sum(fire_plans.plans_per_fire) = 24178
┌ Info: Time check
└   time() - start_time = 1310.691999912262
┌ Info: Exploring node
└   branch_and_bound_node.ix = 201
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1227802
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 7.9512265
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 201
│   lb = 2.7094451892462565
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 149
└   length(nodes) = 299
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30230
└   sum(fire_plans.plans_per_fire) = 24287
┌ Info: Time check
└   time() - start_time = 1318.800999879837
┌ Info: Exploring node
└   branch_and_bound_node.ix = 210
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1280023
┌ Info: Price and cut time (b-and-b)
└   t = 4.3528199
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 210
│   lb = 2.7094451892462565
└   ub = 2.718068255669152
┌ Info: number of nodes
│   node_explored_count = 150
└   length(nodes) = 301
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30276
└   sum(fire_plans.plans_per_fire) = 24325
┌ Info: Time check
└   time() - start_time = 1323.3090000152588
┌ Info: Exploring node
└   branch_and_bound_node.ix = 211
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1188302
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 5.9315934
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 2, 18, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 2, 19, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 211
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  7  15  1  0  0
│      0   0   2  7  5  6   7   5   4  1   0  0  0  0
│     10   2   0  0  0  0   0   0   0  0   0  0  0  0
│      7  19  19  1  0  0   0   0   0  0   0  0  0  0
│      0   0   0  9  7  6  10  12  13  7   1  0  0  0
└      5   1   0  0  1  0   0   0   0  1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.4328508
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1750259
│   obj = 2.7179909581245094
└   obj_bound = 2.717749586062528
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   1  8  16  2  1  1
│      1   1   3   8  6  7   8   6   5  2   1  1  1  1
│     11   3   1   1  1  1   1   1   1  1   1  1  1  1
│      8  20  20   2  1  1   1   1   1  1   1  1  1  1
│      1   1   1  10  8  7  11  13  14  8   2  1  1  1
└      6   2   1   1  2  1   1   1   1  2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 4.9005436
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1737768
│   obj = 2.717990958124509
└   obj_bound = 2.7178387684473475
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2  9  17  3  2  2
│      2   2   4   9  7  8   9   7   6  3   2  2  2  2
│     12   4   2   2  2  2   2   2   2  2   2  2  2  2
│      9  21  21   3  2  2   2   2   2  2   2  2  2  2
│      2   2   2  11  9  8  12  14  15  9   3  2  2  2
└      7   3   2   2  3  2   2   2   2  3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.4968341
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6084184
│   obj = 2.7179592832501376
└   obj_bound = 2.7177844481412143
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      3   3   3   3   3  3   3   3   3  10  18  4  3  3
│      3   3   5  10   8  9  10   8   7   4   3  3  3  3
│     13   5   3   3   3  3   3   3   3   3   3  3  3  3
│     10  22  22   4   3  3   3   3   3   3   3  3  3  3
│      3   3   3  12  10  9  13  15  16  10   4  3  3  3
└      8   4   3   3   4  3   3   3   3   4   5  3  3  3
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.6307692
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4817478
│   obj = 2.717959283250137
└   obj_bound = 2.717724926295148
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      4   4   4   4   4   4   4   4   4  11  19  5  4  4
│      4   4   6  11   9  10  11   9   8   5   4  4  4  4
│     14   6   4   4   4   4   4   4   4   4   4  4  4  4
│     11  23  23   5   4   4   4   4   4   4   4  4  4  4
│      4   4   4  13  11  10  14  16  17  11   5  4  4  4
└      9   5   4   4   5   4   4   4   4   5   6  4  4  4
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.9763063
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5486512
│   obj = 2.7179592832501376
└   obj_bound = 2.717699897658029
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7179592832501376
┌ Info: current bounds
│   node_ix = 211
│   lb = 2.709445232989215
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 151
└   length(nodes) = 303
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30897
└   sum(fire_plans.plans_per_fire) = 24805
┌ Info: Time check
└   time() - start_time = 1351.8129999637604
┌ Info: Exploring node
└   branch_and_bound_node.ix = 128
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1109665
┌ Info: Price and cut time (b-and-b)
└   t = 7.4126396
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 6, 0, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 6, 1, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 128
│   lb = 2.709445232989215
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 152
└   length(nodes) = 305
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30951
└   sum(fire_plans.plans_per_fire) = 24905
┌ Info: Time check
└   time() - start_time = 1359.3550000190735
┌ Info: Exploring node
└   branch_and_bound_node.ix = 129
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1528416
┌ Info: Price and cut time (b-and-b)
└   t = 6.0233459
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 129
│   lb = 2.7094533422014853
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 153
└   length(nodes) = 307
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 30981
└   sum(fire_plans.plans_per_fire) = 24962
┌ Info: Time check
└   time() - start_time = 1365.5739998817444
┌ Info: Exploring node
└   branch_and_bound_node.ix = 228
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1033565
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 10
┌ Info: Price and cut time (b-and-b)
└   t = 8.2263076
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 228
│   lb = 2.7094533422014853
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 154
└   length(nodes) = 309
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 31056
└   sum(fire_plans.plans_per_fire) = 25041
┌ Info: Time check
└   time() - start_time = 1373.9519999027252
┌ Info: Exploring node
└   branch_and_bound_node.ix = 229
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1750554
┌ Info: Price and cut time (b-and-b)
└   t = 11.013599
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 229
│   lb = 2.709455916738954
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 155
└   length(nodes) = 311
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 31164
└   sum(fire_plans.plans_per_fire) = 25133
┌ Info: Time check
└   time() - start_time = 1385.2000000476837
┌ Info: Exploring node
└   branch_and_bound_node.ix = 164
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1038585
┌ Info: Price and cut time (b-and-b)
└   t = 3.4530957
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 164
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   1  4  17  2  0  0
│      0   0   1  9  4  5   6   4   3  1   0  0  0  0
│     10   1   0  0  0  0   0   0   0  0   0  0  0  0
│      6  19  20  2  1  1   0   0   0  1   1  0  0  0
│      0   0   0  5  8  6  10  13  12  9   0  0  0  0
└      5   1   0  0  1  1   0   0   0  1   1  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.1838797
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1238567
│   obj = 2.7179592832501376
└   obj_bound = 2.717732206135185
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   1   2   5  18  3  1  1
│      1   1   2  10  5  6   7   5   4   2   1  1  1  1
│     11   2   1   1  1  1   1   1   1   1   1  1  1  1
│      7  20  21   3  2  2   1   1   1   2   2  1  1  1
│      1   1   1   6  9  7  11  14  13  10   1  1  1  1
└      6   2   1   1  2  2   1   1   1   2   2  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 4.6432425
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.207823
│   obj = 2.717959283250137
└   obj_bound = 2.7178996849963077
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2  2   2   2   3   6  19  4  2  2
│      2   2   3  11   6  7   8   6   5   3   2  2  2  2
│     12   3   2   2   2  2   2   2   2   2   2  2  2  2
│      8  21  22   4   3  3   2   2   2   3   3  2  2  2
│      2   2   2   7  10  8  12  15  14  11   2  2  2  2
└      7   3   2   2   3  3   2   2   2   3   3  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.7620171
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2704081
│   obj = 2.717959283250137
└   obj_bound = 2.717752820429201
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7179592832501376
┌ Info: current bounds
│   node_ix = 164
│   lb = 2.709455916738954
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 156
└   length(nodes) = 313
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 31600
└   sum(fire_plans.plans_per_fire) = 25366
┌ Info: Time check
└   time() - start_time = 1398.9900000095367
┌ Info: Exploring node
└   branch_and_bound_node.ix = 165
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1247745
┌ Info: Price and cut time (b-and-b)
└   t = 10.9497972
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 165
│   lb = 2.7094633960159116
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 157
└   length(nodes) = 315
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 31798
└   sum(fire_plans.plans_per_fire) = 25494
┌ Info: Time check
└   time() - start_time = 1410.1219999790192
┌ Info: Exploring node
└   branch_and_bound_node.ix = 198
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1325848
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 3.433941
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 198
│   lb = 2.7094633960159116
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 158
└   length(nodes) = 317
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 31842
└   sum(fire_plans.plans_per_fire) = 25534
┌ Info: Time check
└   time() - start_time = 1413.7330000400543
┌ Info: Exploring node
└   branch_and_bound_node.ix = 199
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1610125
┌ Info: Price and cut time (b-and-b)
└   t = 12.3952118
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 199
│   lb = 2.7094935096580057
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 159
└   length(nodes) = 319
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32123
└   sum(fire_plans.plans_per_fire) = 25647
┌ Info: Time check
└   time() - start_time = 1426.3389999866486
┌ Info: Exploring node
└   branch_and_bound_node.ix = 272
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1360863
┌ Info: Price and cut time (b-and-b)
└   t = 6.963889
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 272
│   lb = 2.7094935096580057
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 160
└   length(nodes) = 321
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32269
└   sum(fire_plans.plans_per_fire) = 25730
┌ Info: Time check
└   time() - start_time = 1433.4960000514984
┌ Info: Exploring node
└   branch_and_bound_node.ix = 273
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1585692
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 8.8755644
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 273
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0   0   0  4  16  2  0  0
│      0   0   2   4  3  3  10   6   6  1   0  0  0  0
│     10   2   0   0  0  0   0   0   0  0   0  0  0  0
│      7  19  19   2  1  0   0   0   0  0   1  0  0  0
│      0   0   0  11  9  9   7  10  10  9   1  0  0  0
└      5   1   0   0  1  0   0   0   0  2   1  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.9151306
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1409089
│   obj = 2.7179592832501376
└   obj_bound = 2.7176960438615367
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1   1   1   1   1   5  17  3  1  1
│      1   1   3   5   4   4  11   7   7   2   1  1  1  1
│     11   3   1   1   1   1   1   1   1   1   1  1  1  1
│      8  20  20   3   2   1   1   1   1   1   2  1  1  1
│      1   1   1  12  10  10   8  11  11  10   2  1  1  1
└      6   2   1   1   2   1   1   1   1   3   2  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 4
┌ Info: Price and cut time (heuristic)
└   t = 4.3416013
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.228327
│   obj = 2.717959283250137
└   obj_bound = 2.71789364815405
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   6  18  4  2  2
│      2   2   4   6   5   5  12   8   8   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  21  21   4   3   2   2   2   2   2   3  2  2  2
│      2   2   2  13  11  11   9  12  12  11   3  2  2  2
└      7   3   2   2   3   2   2   2   2   4   3  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 6.9889589
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.665295
│   obj = 2.717959283250137
└   obj_bound = 2.7177064949373233
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7179592832501376
┌ Info: current bounds
│   node_ix = 273
│   lb = 2.7094987347994626
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 161
└   length(nodes) = 323
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32637
└   sum(fire_plans.plans_per_fire) = 26146
┌ Info: Time check
└   time() - start_time = 1458.2039999961853
┌ Info: Exploring node
└   branch_and_bound_node.ix = 278
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0892595
┌ Info: Price and cut time (b-and-b)
└   t = 7.3870051
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 278
│   lb = 2.7094987347994626
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 162
└   length(nodes) = 325
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32677
└   sum(fire_plans.plans_per_fire) = 26194
┌ Info: Time check
└   time() - start_time = 1465.7330000400543
┌ Info: Exploring node
└   branch_and_bound_node.ix = 279
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1623359
┌ Info: Price and cut time (b-and-b)
└   t = 8.7032025
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 279
│   lb = 2.709499759596119
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 163
└   length(nodes) = 327
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32780
└   sum(fire_plans.plans_per_fire) = 26271
┌ Info: Time check
└   time() - start_time = 1474.625
┌ Info: Exploring node
└   branch_and_bound_node.ix = 182
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1500424
┌ Info: Price and cut time (b-and-b)
└   t = 11.5106359
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 182
│   lb = 2.709499759596119
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 164
└   length(nodes) = 329
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32869
└   sum(fire_plans.plans_per_fire) = 26384
┌ Info: Time check
└   time() - start_time = 1486.300999879837
┌ Info: Exploring node
└   branch_and_bound_node.ix = 183
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1823253
┌ Info: Price and cut time (b-and-b)
└   t = 13.7036916
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 183
│   lb = 2.7095027904948785
└   ub = 2.7179592832501376
┌ Info: number of nodes
│   node_explored_count = 165
└   length(nodes) = 331
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 32980
└   sum(fire_plans.plans_per_fire) = 26540
┌ Info: Time check
└   time() - start_time = 1500.2170000076294
┌ Info: Exploring node
└   branch_and_bound_node.ix = 50
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.119417
┌ Info: Price and cut time (b-and-b)
└   t = 10.5951967
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 8, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 50
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   1   1   5  16  2  0  0
│      0   0   0  8  6  8   4   6   1   0   0  0  0  0
│     10   2   0  0  0  0   0   0   0   0   0  0  0  0
│      6  18  19  2  1  1   0   1   0   0   1  0  0  0
│      0   0   1  7  6  3  12  10  15  10   1  0  0  0
└      5   1   0  0  1  1   0   0   0   1   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.046723
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1920553
│   obj = 2.717959283250137
└   obj_bound = 2.717730866170139
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   2   2   6  17  3  1  1
│      1   1   1  9  7  9   5   7   2   1   1  1  1  1
│     11   3   1  1  1  1   1   1   1   1   1  1  1  1
│      7  19  20  3  2  2   1   2   1   1   2  1  1  1
│      1   1   2  8  7  4  13  11  16  11   2  1  1  1
└      6   2   1  1  2  2   1   1   1   2   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.2437374
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2523212
│   obj = 2.717959283250137
└   obj_bound = 2.7176903053945503
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   3   3   7  18  4  2  2
│      2   2   2  10  8  10   6   8   3   2   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      8  20  21   4  3   3   2   3   2   2   3  2  2  2
│      2   2   3   9  8   5  14  12  17  12   3  2  2  2
└      7   3   2   2  3   3   2   2   2   3   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.4888922
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4676403
│   obj = 2.717959283250137
└   obj_bound = 2.7176938758430915
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.717959283250137
┌ Info: current bounds
│   node_ix = 50
│   lb = 2.7095027904948785
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 166
└   length(nodes) = 333
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 33484
└   sum(fire_plans.plans_per_fire) = 26888
┌ Info: Time check
└   time() - start_time = 1525.329999923706
┌ Info: Exploring node
└   branch_and_bound_node.ix = 51
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1923203
┌ Info: Price and cut time (b-and-b)
└   t = 6.2984831
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 51
│   lb = 2.7095043934908967
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 167
└   length(nodes) = 335
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 33566
└   sum(fire_plans.plans_per_fire) = 26962
┌ Info: Time check
└   time() - start_time = 1531.8389999866486
┌ Info: Exploring node
└   branch_and_bound_node.ix = 236
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.114772
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.6125998
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 236
│   lb = 2.7095043934908967
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 168
└   length(nodes) = 337
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 33615
└   sum(fire_plans.plans_per_fire) = 27015
┌ Info: Time check
└   time() - start_time = 1536.5929999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 237
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1331695
┌ Info: Price and cut time (b-and-b)
└   t = 5.9874282
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 4, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 237
│   lb = 2.70951009936797
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 169
└   length(nodes) = 339
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 33704
└   sum(fire_plans.plans_per_fire) = 27073
┌ Info: Time check
└   time() - start_time = 1542.7379999160767
┌ Info: Exploring node
└   branch_and_bound_node.ix = 212
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1419695
┌ Info: Price and cut time (b-and-b)
└   t = 7.0369057
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 212
│   lb = 2.70951009936797
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 170
└   length(nodes) = 341
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 33876
└   sum(fire_plans.plans_per_fire) = 27158
┌ Info: Time check
└   time() - start_time = 1549.9340000152588
┌ Info: Exploring node
└   branch_and_bound_node.ix = 213
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1587623
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 3.803695
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 213
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0   0  0   0   0   4  16  2  0  0
│      0   0   1  9  5   1  9   3   3   1   0  0  0  0
│     10   2   0  0  0   0  0   0   0   0   0  0  0  0
│      6  19  20  2  2   0  0   0   0   0   0  0  0  0
│      0   0   1  6  6  11  6  12  12  10   0  0  0  0
└      5   1   0  0  1   1  0   0   0   1   2  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.0401968
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1405241
│   obj = 2.7179592832501376
└   obj_bound = 2.7177182561155826
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1   1   1   1   1   5  17  3  1  1
│      1   1   2  10  6   2  10   4   4   2   1  1  1  1
│     11   3   1   1  1   1   1   1   1   1   1  1  1  1
│      7  20  21   3  3   1   1   1   1   1   1  1  1  1
│      1   1   2   7  7  12   7  13  13  11   1  1  1  1
└      6   2   1   1  2   2   1   1   1   2   3  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 8
┌ Info: Price and cut time (heuristic)
└   t = 5.1380396
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.6687417
│   obj = 2.717959283250137
└   obj_bound = 2.7179357299674707
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2   2   2   2   2   6  18  4  2  2
│      2   2   3  11  7   3  11   5   5   3   2  2  2  2
│     12   4   2   2  2   2   2   2   2   2   2  2  2  2
│      8  21  22   4  4   2   2   2   2   2   2  2  2  2
│      2   2   3   8  8  13   8  14  14  12   2  2  2  2
└      7   3   2   2  3   3   2   2   2   3   4  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.8875618
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4937144
│   obj = 2.717959283250137
└   obj_bound = 2.7179203103676577
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7179592832501376
┌ Info: current bounds
│   node_ix = 213
│   lb = 2.709511670558312
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 171
└   length(nodes) = 343
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 34243
└   sum(fire_plans.plans_per_fire) = 27463
┌ Info: Time check
└   time() - start_time = 1566.0969998836517
┌ Info: Exploring node
└   branch_and_bound_node.ix = 284
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    13-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1086262
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 1.4323407
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 4, 11, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 4, 12, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 284
│   lb = 2.709511670558312
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 172
└   length(nodes) = 345
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 34289
└   sum(fire_plans.plans_per_fire) = 27497
┌ Info: Time check
└   time() - start_time = 1567.6870000362396
┌ Info: Exploring node
└   branch_and_bound_node.ix = 285
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    13-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 9, 7, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 8, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0854962
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 16
┌ Info: Price and cut time (b-and-b)
└   t = 13.4068498
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 10, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 10, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 285
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 173
└   length(nodes) = 347
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 34425
└   sum(fire_plans.plans_per_fire) = 27653
┌ Info: Time check
└   time() - start_time = 1581.2019999027252
┌ Info: Exploring node
└   branch_and_bound_node.ix = 270
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1219554
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 1.2463376
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 270
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 174
└   length(nodes) = 349
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 34474
└   sum(fire_plans.plans_per_fire) = 27670
┌ Info: Time check
└   time() - start_time = 1582.611999988556
┌ Info: Exploring node
└   branch_and_bound_node.ix = 348
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 6, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0819205
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 2
┌ Info: Price and cut time (b-and-b)
└   t = 1.0938552
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 4, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 4, 3, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 348
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 175
└   length(nodes) = 351
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 34502
└   sum(fire_plans.plans_per_fire) = 27686
┌ Info: Time check
└   time() - start_time = 1583.9289999008179
┌ Info: Exploring node
└   branch_and_bound_node.ix = 349
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 7, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0884176
┌ Info: Price and cut time (b-and-b)
└   t = 6.9679934
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 349
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0   0  0  0  0  0  7  15  2  0  0
│      0   0   2   2   2  8  8  7  7  1   0  0  0  0
│     10   2   0   0   0  0  0  0  0  0   0  0  0  0
│      7  18  19   2   0  0  0  0  0  0   1  0  0  0
│      0   0   0  12  11  3  9  9  9  8   2  0  0  0
└      5   1   0   0   1  1  0  0  0  0   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 7, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.4512708
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.133603
│   obj = 2.7179592832501376
└   obj_bound = 2.717878858124509
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1   1  1   1   1   1  8  16  3  1  1
│      1   1   3   3   3  9   9   8   8  2   1  1  1  1
│     11   3   1   1   1  1   1   1   1  1   1  1  1  1
│      8  19  20   3   1  1   1   1   1  1   2  1  1  1
│      1   1   1  13  12  4  10  10  10  9   3  1  1  1
└      6   2   1   1   2  2   1   1   1  1   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 7, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.6123471
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1192137
│   obj = 2.7179592832501376
└   obj_bound = 2.717690666994708
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   9  17  4  2  2
│      2   2   4   4   4  10  10   9   9   3   2  2  2  2
│     12   4   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   2   2   2   2   2   2   3  2  2  2
│      2   2   2  14  13   5  11  11  11  10   4  2  2  2
└      7   3   2   2   3   3   2   2   2   2   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 7, 7, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 3.0242493
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1479235
│   obj = 2.7179592832501367
└   obj_bound = 2.717691561174062
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.7179592832501376
┌ Info: current bounds
│   node_ix = 349
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 176
└   length(nodes) = 351
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35110
└   sum(fire_plans.plans_per_fire) = 28022
┌ Info: Time check
└   time() - start_time = 1601.566999912262
┌ Info: Exploring node
└   branch_and_bound_node.ix = 350
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1218651
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 17
┌ Info: Price and cut time (b-and-b)
└   t = 10.8541531
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 350
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 177
└   length(nodes) = 353
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35174
└   sum(fire_plans.plans_per_fire) = 28116
┌ Info: Time check
└   time() - start_time = 1612.5929999351501
┌ Info: Exploring node
└   branch_and_bound_node.ix = 351
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    11-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 7, 6, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1334017
┌ Info: Price and cut time (b-and-b)
└   t = 7.7395975
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 351
│   lb = 2.7095240205056523
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 178
└   length(nodes) = 355
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35252
└   sum(fire_plans.plans_per_fire) = 28180
┌ Info: Time check
└   time() - start_time = 1620.50200009346
┌ Info: Exploring node
└   branch_and_bound_node.ix = 271
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1237204
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.9095631
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(4, 2, 18, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(4, 2, 19, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 271
│   lb = 2.7095369221420658
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 179
└   length(nodes) = 357
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35410
└   sum(fire_plans.plans_per_fire) = 28255
┌ Info: Time check
└   time() - start_time = 1625.585000038147
┌ Info: Exploring node
└   branch_and_bound_node.ix = 144
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0883583
┌ Info: Price and cut time (b-and-b)
└   t = 3.6535033
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(6, 1, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(6, 1, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 144
│   lb = 2.7095369221420658
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 180
└   length(nodes) = 359
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35511
└   sum(fire_plans.plans_per_fire) = 28316
┌ Info: Time check
└   time() - start_time = 1629.37299990654
┌ Info: Exploring node
└   branch_and_bound_node.ix = 145
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    10-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1005544
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 3
┌ Info: Price and cut time (b-and-b)
└   t = 4.9501744
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 5, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 145
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0  0  0   0   0   0  3  17  2  0  0
│      0   0   1  8  7  6   5   3   3  2   0  0  0  0
│     10   2   0  0  0  0   0   0   0  0   0  0  0  0
│      7  19  20  2  1  0   0   0   0  1   1  0  0  0
│      0   0   0  6  5  6  11  13  13  9   0  0  0  0
└      5   1   0  0  1  0   0   0   0  3   1  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.7469301
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1350696
│   obj = 2.717959283250137
└   obj_bound = 2.717956891101505
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1  1  1   1   1   1   4  18  3  1  1
│      1   1   2  9  8  7   6   4   4   3   1  1  1  1
│     11   3   1  1  1  1   1   1   1   1   1  1  1  1
│      8  20  21  3  2  1   1   1   1   2   2  1  1  1
│      1   1   1  7  6  7  12  14  14  10   1  1  1  1
└      6   2   1  1  2  1   1   1   1   4   2  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 2.6990611
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1942993
│   obj = 2.717959283250137
└   obj_bound = 2.7178834833530336
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   2   2   5  19  4  2  2
│      2   2   3  10  9  8   7   5   5   4   2  2  2  2
│     12   4   2   2  2  2   2   2   2   2   2  2  2  2
│      9  21  22   4  3  2   2   2   2   3   3  2  2  2
│      2   2   2   8  7  8  13  15  15  11   2  2  2  2
└      7   3   2   2  3  2   2   2   2   5   3  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 7, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (heuristic)
└   t = 2.8072559
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4218136
│   obj = 2.7179592832501376
└   obj_bound = 2.7176980695044275
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.717959283250137
┌ Info: current bounds
│   node_ix = 145
│   lb = 2.7095545413775075
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 181
└   length(nodes) = 361
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35900
└   sum(fire_plans.plans_per_fire) = 28584
┌ Info: Time check
└   time() - start_time = 1643.611999988556
┌ Info: Exploring node
└   branch_and_bound_node.ix = 58
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1276501
┌ Info: Price and cut time (b-and-b)
└   t = 11.9370387
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 58
│   lb = 2.7095545413775075
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 182
└   length(nodes) = 363
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 35965
└   sum(fire_plans.plans_per_fire) = 28697
┌ Info: Time check
└   time() - start_time = 1655.7269999980927
┌ Info: Exploring node
└   branch_and_bound_node.ix = 59
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 8, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 7, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1928116
┌ Info: Price and cut time (b-and-b)
└   t = 7.9351142
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 59
│   lb = 2.7095569398906276
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 183
└   length(nodes) = 365
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36033
└   sum(fire_plans.plans_per_fire) = 28751
┌ Info: Time check
└   time() - start_time = 1663.9010000228882
┌ Info: Exploring node
└   branch_and_bound_node.ix = 266
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(4, 4, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1009055
┌ Info: Price and cut time (b-and-b)
└   t = 5.6655801
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 7, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 7, 11, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 266
│   lb = 2.7095569398906276
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 184
└   length(nodes) = 367
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36079
└   sum(fire_plans.plans_per_fire) = 28822
┌ Info: Time check
└   time() - start_time = 1669.6879999637604
┌ Info: Exploring node
└   branch_and_bound_node.ix = 267
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    9-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 11, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 6, 5, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
│     FireDemandBranchingRule(4, 4, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1338125
┌ Info: Price and cut time (b-and-b)
└   t = 18.7953024
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 7, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 7, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 267
│   lb = 2.7095610392140994
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 185
└   length(nodes) = 369
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36211
└   sum(fire_plans.plans_per_fire) = 29056
┌ Info: Time check
└   time() - start_time = 1688.6600000858307
┌ Info: Exploring node
└   branch_and_bound_node.ix = 186
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1364804
┌ Info: Price and cut time (b-and-b)
└   t = 8.4131138
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 186
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0  0   0  0  0  0   0   4  16  2  0  0
│      0   0   0  8   2  4  9  7   3   0   0  0  0  0
│     10   1   0  0   0  0  0  0   0   0   0  0  0  0
│      7  18  19  2   0  1  0  0   0   1   1  0  0  0
│      0   0   1  7  11  8  7  9  13  10   1  0  0  0
└      5   1   0  0   1  1  0  0   0   2   1  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.9724403
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1596118
│   obj = 2.717959283250137
└   obj_bound = 2.717849127470322
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1  1   1  1   1   1   1   5  17  3  1  1
│      1   1   1  9   3  5  10   8   4   1   1  1  1  1
│     11   2   1  1   1  1   1   1   1   1   1  1  1  1
│      8  19  20  3   1  2   1   1   1   2   2  1  1  1
│      1   1   2  8  12  9   8  10  14  11   2  1  1  1
└      6   2   1  1   2  2   1   1   1   3   2  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 5.7071093
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2546372
│   obj = 2.717959283250137
└   obj_bound = 2.717715869428025
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2   2   2   2   2   2   6  18  4  2  2
│      2   2   2  10   4   6  11   9   5   2   2  2  2  2
│     12   3   2   2   2   2   2   2   2   2   2  2  2  2
│      9  20  21   4   2   3   2   2   2   3   3  2  2  2
│      2   2   3   9  13  10   9  11  15  12   3  2  2  2
└      7   3   2   2   3   3   2   2   2   4   3  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 8, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.3628399
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4192484
│   obj = 2.717959283250137
└   obj_bound = 2.717959283250137
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.717959283250137
┌ Info: current bounds
│   node_ix = 186
│   lb = 2.7095610392140994
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 186
└   length(nodes) = 371
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36754
└   sum(fire_plans.plans_per_fire) = 29472
┌ Info: Time check
└   time() - start_time = 1711.37299990654
┌ Info: Exploring node
└   branch_and_bound_node.ix = 187
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 8, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1604227
┌ Info: Price and cut time (b-and-b)
└   t = 4.6671519
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 10, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 10, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 187
│   lb = 2.709569804231639
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 187
└   length(nodes) = 373
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36795
└   sum(fire_plans.plans_per_fire) = 29531
┌ Info: Time check
└   time() - start_time = 1716.2430000305176
┌ Info: Exploring node
└   branch_and_bound_node.ix = 288
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 7, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1247344
┌ Info: Price and cut time (b-and-b)
└   t = 17.3506617
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 288
│   lb = 2.709569804231639
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 188
└   length(nodes) = 375
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36930
└   sum(fire_plans.plans_per_fire) = 29711
┌ Info: Time check
└   time() - start_time = 1733.7539999485016
┌ Info: Exploring node
└   branch_and_bound_node.ix = 289
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 8, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(2, 4, 8, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1866431
┌ Info: Price and cut time (b-and-b)
└   t = 6.5717098
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 289
│   lb = 2.7095795512954157
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 189
└   length(nodes) = 377
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 36984
└   sum(fire_plans.plans_per_fire) = 29804
┌ Info: Time check
└   time() - start_time = 1740.5360000133514
┌ Info: Exploring node
└   branch_and_bound_node.ix = 80
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1016946
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 6
┌ Info: Price and cut time (b-and-b)
└   t = 5.9495619
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 7, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 8, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 80
│   lb = 2.7095795512954157
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 190
└   length(nodes) = 379
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 37043
└   sum(fire_plans.plans_per_fire) = 29860
┌ Info: Time check
└   time() - start_time = 1746.6689999103546
┌ Info: Exploring node
└   branch_and_bound_node.ix = 81
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
│     FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
│     FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.159406
┌ Info: Price and cut time (b-and-b)
└   t = 14.0114222
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 8, 3, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 8, 4, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 81
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      0   0   0   0  0  0   0   1   1   3  16  2  0  0
│      0   0   0   5  7  7   6   4   3   0   0  0  0  0
│     10   2   0   0  0  0   0   0   0   0   0  0  0  0
│      7  18  19   2  1  1   0   0   0   0   1  0  0  0
│      0   0   1  10  5  3  10  11  12  12   0  0  0  0
└      5   2   1   0  1  1   0   0   1   1   2  1  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 1.9880982
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1623595
│   obj = 2.717959283250137
└   obj_bound = 2.717746952685389
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      1   1   1   1  1  1   1   2   2   4  17  3  1  1
│      1   1   1   6  8  8   7   5   4   1   1  1  1  1
│     11   3   1   1  1  1   1   1   1   1   1  1  1  1
│      8  19  20   3  2  2   1   1   1   1   2  1  1  1
│      1   1   2  11  6  4  11  12  13  13   1  1  1  1
└      6   3   2   1  2  2   1   1   2   2   3  2  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 4.8487425
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.2373668
│   obj = 2.717959283250137
└   obj_bound = 2.717715948287486
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    6×14 Matrix{Int64}:
│      2   2   2   2  2  2   2   3   3   5  18  4  2  2
│      2   2   2   7  9  9   8   6   5   2   2  2  2  2
│     12   4   2   2  2  2   2   2   2   2   2  2  2  2
│      9  20  21   4  3  3   2   2   2   2   3  2  2  2
│      2   2   3  12  7  5  12  13  14  14   2  2  2  2
└      7   4   3   2  3  3   2   2   3   3   4  3  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 4, 7, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 9, 5, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(5, 10, 10, "greater_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 6.62332
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.5489535
│   obj = 2.717959283250137
└   obj_bound = 2.717959283250137
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 2.717959283250137
┌ Info: current bounds
│   node_ix = 81
│   lb = 2.7095948590957417
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 191
└   length(nodes) = 381
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 37609
└   sum(fire_plans.plans_per_fire) = 30308
┌ Info: Time check
└   time() - start_time = 1776.691999912262
┌ Info: Exploring node
└   branch_and_bound_node.ix = 338
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1221591
┌ Info: Price and cut time (b-and-b)
└   t = 2.981778
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 338
│   lb = 2.7095948590957417
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 192
└   length(nodes) = 383
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 37645
└   sum(fire_plans.plans_per_fire) = 30350
┌ Info: Time check
└   time() - start_time = 1779.8210000991821
┌ Info: Exploring node
└   branch_and_bound_node.ix = 339
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    8-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(5, 4, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 9, 4, "less_than_or_equal")
│     FireDemandBranchingRule(2, 6, 5, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 10, 9, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 4, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1469309
┌ Info: Price and cut time (b-and-b)
└   t = 5.5748635
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 6, 6, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 6, 7, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 339
│   lb = 2.709610659189615
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 193
└   length(nodes) = 385
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 37728
└   sum(fire_plans.plans_per_fire) = 30451
┌ Info: Time check
└   time() - start_time = 1785.5650000572205
┌ Info: Exploring node
└   branch_and_bound_node.ix = 64
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 3, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1130444
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 12
┌ Info: Price and cut time (b-and-b)
└   t = 9.8436801
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 9, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 9, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 64
│   lb = 2.709610659189615
└   ub = 2.717959283250137
┌ Info: number of nodes
│   node_explored_count = 194
└   length(nodes) = 387
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 37795
└   sum(fire_plans.plans_per_fire) = 30558
┌ Info: Time check
└   time() - start_time = 1795.5409998893738
┌ Info: Exploring node
└   branch_and_bound_node.ix = 65
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    7-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(4, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 7, 9, "greater_than_or_equal")
│     FireDemandBranchingRule(5, 4, 6, "less_than_or_equal")
│     FireDemandBranchingRule(5, 8, 10, "less_than_or_equal")
│     FireDemandBranchingRule(5, 5, 8, "greater_than_or_equal")
│     FireDemandBranchingRule(2, 6, 2, "less_than_or_equal")
│     FireDemandBranchingRule(1, 10, 4, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.1448639
┌ Info: halting cut generation early, too small improvement
└   loop_ix = 5
┌ Info: Price and cut time (b-and-b)
└   t = 4.5878712
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(5, 6, 10, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(5, 6, 11, "greater_than_or_equal")
[ Info: Full time limit reached
