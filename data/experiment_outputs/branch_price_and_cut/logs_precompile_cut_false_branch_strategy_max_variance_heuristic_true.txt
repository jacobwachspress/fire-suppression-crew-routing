[ Info: Initializing data structures
┌ Info: Checkpoint after initializing data structures
└   time() - start_time = 0.23799991607666016
┌ Warning: Node with no parent
│   i = 1
└ @ Main C:\Users\jacob\Coding\MIT\ihc_routing\BranchAndPrice.jl:127
┌ Info: Exploring node
└   branch_and_bound_node.ix = 1
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules = FireDemandBranchingRule[]
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0081357
┌ Info: Price and cut time (b-and-b)
└   t = 0.455655
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 1
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  1  1  0  2  6  8  8  8  6  3  0  0  0
│      0  9  9  8  4  0  0  0  0  0  0  0  0  0
└     10  0  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: Price and cut time (heuristic)
└   t = 0.174205
┌ Info: found sol
│   t = 0.0210221
│   obj = 1.2122545684315973
└   obj_bound = 1.2122545684315973
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   2   2  1  3  7  9  9  9  7  4  1  1  1
│      1  10  10  9  5  1  1  1  1  1  1  1  1  1
└     11   1   1  1  1  1  1  1  1  1  1  1  1  1
┌ Info: Price and cut time (heuristic)
└   t = 0.1616174
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1021503
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149568
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   3   3   2  4  8  10  10  10  8  5  2  2  2
│      2  11  11  10  6  2   2   2   2  2  2  2  2  2
└     12   2   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: Price and cut time (heuristic)
└   t = 0.1771975
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1699581
│   obj = 1.1754333641149566
└   obj_bound = 1.1754333641149566
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      3   4   4   3  5  9  11  11  11  9  6  3  3  3
│      3  12  12  11  7  3   3   3   3  3  3  3  3  3
└     13   3   3   3  3  3   3   3   3  3  3  3  3  3
┌ Info: Price and cut time (heuristic)
└   t = 0.1054812
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.4215325
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149566
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1754333641149568
┌ Info: current bounds
│   node_ix = 1
│   lb = 1.1388005347712324
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 1
└   length(nodes) = 3
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 541
└   sum(fire_plans.plans_per_fire) = 267
┌ Info: Time check
└   time() - start_time = 2.2049999237060547
┌ Info: Exploring node
└   branch_and_bound_node.ix = 2
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0100637
┌ Info: Price and cut time (b-and-b)
└   t = 0.2777548
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 2
│   lb = 1.1388005347712324
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 2
└   length(nodes) = 5
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 574
└   sum(fire_plans.plans_per_fire) = 309
┌ Info: Time check
└   time() - start_time = 2.48799991607666
┌ Info: Exploring node
└   branch_and_bound_node.ix = 3
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    1-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104588
┌ Info: Price and cut time (b-and-b)
└   t = 0.1184764
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 3
│   lb = 1.1394932911329647
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 3
└   length(nodes) = 7
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 617
└   sum(fire_plans.plans_per_fire) = 327
┌ Info: Time check
└   time() - start_time = 2.628999948501587
┌ Info: Exploring node
└   branch_and_bound_node.ix = 4
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0110625
┌ Info: Price and cut time (b-and-b)
└   t = 0.1935995
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 4
│   lb = 1.1394932911329647
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 4
└   length(nodes) = 9
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 659
└   sum(fire_plans.plans_per_fire) = 354
┌ Info: Time check
└   time() - start_time = 2.9039998054504395
┌ Info: Exploring node
└   branch_and_bound_node.ix = 5
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    2-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 9, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0104371
┌ Info: Price and cut time (b-and-b)
└   t = 0.2242105
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 4, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 5, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 5
│   lb = 1.1400216063449233
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 5
└   length(nodes) = 11
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 723
└   sum(fire_plans.plans_per_fire) = 383
┌ Info: Time check
└   time() - start_time = 3.1469998359680176
┌ Info: Exploring node
└   branch_and_bound_node.ix = 8
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0144523
┌ Info: Price and cut time (b-and-b)
└   t = 0.0729474
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
┌ Info: Finding heuristic upper bound
└   explored_bb_node.ix = 8
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing route best sol
[ Info: pushing plan best sol
[ Info: pushing plan best sol
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      0  0  1  1  3  7  8  8  8  6  3  0  0  0
│      0  9  9  9  4  0  0  0  0  0  0  0  0  0
└     10  1  0  0  0  0  0  0  0  0  0  0  0  0
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1586586
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0404461
│   obj = 1.1754333641149568
└   obj_bound = 1.1754324315382796
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      1   1   2   2  4  8  9  9  9  7  4  1  1  1
│      1  10  10  10  5  1  1  1  1  1  1  1  1  1
└     11   2   1   1  1  1  1  1  1  1  1  1  1  1
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.1376539
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.1310592
│   obj = 1.1754333641149568
└   obj_bound = 1.1753161283341236
┌ Info: entering heuristic round
│   branching_rule.allotment_matrix =
│    3×14 Matrix{Int64}:
│      2   2   3   3  5  9  10  10  10  8  5  2  2  2
│      2  11  11  11  6  2   2   2   2  2  2  2  2  2
└     12   3   2   2  2  2   2   2   2  2  2  2  2  2
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
┌ Info: fire rule
└   rule = FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
┌ Info: Price and cut time (heuristic)
└   t = 0.158164
[ Info: pushing solution to IP
┌ Info: found sol
│   t = 0.0954178
│   obj = 1.1754333641149568
└   obj_bound = 1.1754333641149568
┌ Info: Too long since improvement in heuristic, killing early
└   rounds_since_improvement = 2
┌ Info: Found heuristic upper bound
└   ub = 1.1754333641149568
┌ Info: current bounds
│   node_ix = 8
│   lb = 1.1400216063449233
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 6
└   length(nodes) = 13
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 871
└   sum(fire_plans.plans_per_fire) = 481
┌ Info: Time check
└   time() - start_time = 4.630999803543091
┌ Info: Exploring node
└   branch_and_bound_node.ix = 9
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    3-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 2, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0108476
┌ Info: Price and cut time (b-and-b)
└   t = 0.2045125
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(2, 5, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(2, 5, 6, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 9
│   lb = 1.1412974329150785
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 7
└   length(nodes) = 15
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 910
└   sum(fire_plans.plans_per_fire) = 515
┌ Info: Time check
└   time() - start_time = 4.8379998207092285
┌ Info: Exploring node
└   branch_and_bound_node.ix = 12
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 2, "less_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0102046
┌ Info: Price and cut time (b-and-b)
└   t = 0.0806444
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 4, 1, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 4, 2, "greater_than_or_equal")
┌ Info: current bounds
│   node_ix = 12
│   lb = 1.1412974329150785
└   ub = 1.1754333641149568
┌ Info: number of nodes
│   node_explored_count = 8
└   length(nodes) = 17
┌ Info: columns
│   sum(crew_routes.routes_per_crew) = 931
└   sum(fire_plans.plans_per_fire) = 524
┌ Info: Time check
└   time() - start_time = 4.94599986076355
┌ Info: Exploring node
└   branch_and_bound_node.ix = 13
┌ Info: rules
│   crew_rules = CrewSupplyBranchingRule[]
│   fire_rules =
│    4-element Vector{FireDemandBranchingRule}:
│     FireDemandBranchingRule(1, 7, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 9, 8, "less_than_or_equal")
│     FireDemandBranchingRule(1, 2, 1, "less_than_or_equal")
│     FireDemandBranchingRule(1, 5, 3, "greater_than_or_equal")
└   global_rules = GlobalFireAllotmentBranchingRule[]
┌ Info: Define rmp time (b-and-b)
└   t = 0.0135786
┌ Info: Price and cut time (b-and-b)
└   t = 0.192515
┌ Info: branching rules
│   left_branching_rule = FireDemandBranchingRule(1, 6, 5, "less_than_or_equal")
└   right_branching_rule = FireDemandBranchingRule(1, 6, 6, "greater_than_or_equal")
[ Info: Full time limit reached
